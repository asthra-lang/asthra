---
description: 
globs: 
alwaysApply: false
---
# Testing and Benchmarking Standards for Asthra (C23 + LLVM-Only)

## Overview

This rule defines comprehensive testing and benchmarking standards for the Asthra programming language project using C23 standard with Clang/LLVM toolchain exclusively. Given the project's performance requirements and modern C23 features, rigorous testing ensures code quality and reliable performance characteristics.

## Toolchain Requirements

### Compiler and Tools
- **Compiler**: Clang 16+ (C23 support required)
- **Backend**: LLVM IR generation only
- **Build System**: CMake with C23 standard
- **Sanitizers**: Clang's AddressSanitizer, ThreadSanitizer, UBSanitizer
- **Static Analysis**: Clang Static Analyzer, clang-tidy
- **Profiling**: LLVM profiling tools (llvm-profdata, llvm-cov)

### C23 Feature Testing

**LEVERAGE** modern C23 features in tests:

```c
#include "test_framework.h"
#include <stdbit.h>

// Use C23 keywords and features
TEST_CASE("c23_features_validation") {
    // Native bool, true, false (no stdbool.h needed)
    bool success = true;
    ASSERT_TRUE(success);
    
    // Static assertions without message
    static_assert(sizeof(size_t) >= 4);
    static_assert(sizeof(void*) >= 4, "Pointer size requirement");
    
    // constexpr for compile-time constants
    constexpr int MAX_TOKENS = 1024;
    constexpr size_t BUFFER_SIZE = MAX_TOKENS * sizeof(AsthraToken);
    
    // Binary literals with digit separators
    enum TokenFlags {
        TOKEN_KEYWORD    = 0b0000'0001,
        TOKEN_OPERATOR   = 0b0000'0010,
        TOKEN_LITERAL    = 0b0000'0100,
        TOKEN_IDENTIFIER = 0b0000'1000
    };
    
    // typeof for type deduction
    int sample = 42;
    typeof(sample) another = 84;
    ASSERT_EQ(sizeof(sample), sizeof(another));
    
    // nullptr instead of NULL
    void *ptr = nullptr;
    ASSERT_NULL(ptr);
}
```

## Test Framework Architecture

### Core Test Framework with C23 Enhancements

**USE** modern C23 features in the test framework:

```c
#include "test_framework.h"

// Function attributes for better diagnostics
[[nodiscard]] static inline bool setup_test_environment(void) {
    return asthra_runtime_initialize();
}

[[maybe_unused]] static void debug_test_state(void) {
    // Debug helper that may not be used in all builds
}

// Basic test structure with C23 features
TEST_CASE("descriptive_test_name") {
    // Setup phase with constexpr
    constexpr size_t TEST_BUFFER_SIZE = 256;
    char buffer[TEST_BUFFER_SIZE] = {};  // C23 empty initializer
    
    // Test execution
    [[nodiscard]] AsthraResult result = function_under_test();
    
    // C23 enhanced assertions
    ASSERT_TRUE(result.success);
    ASSERT_EQ(result.error_code, ASTHRA_ERROR_NONE);
    ASSERT_NOT_NULL(result.data);
    
    // Cleanup phase
    cleanup_test_resources();
}

// Test suite organization
TEST_SUITE("component_name") {
    RUN_TEST(test_basic_functionality);
    RUN_TEST(test_error_conditions);
    RUN_TEST(test_edge_cases);
    RUN_TEST(test_llvm_integration);
}
```

### LLVM-Specific Testing

**VERIFY** LLVM IR generation and optimization:

```c
TEST_CASE("llvm_ir_generation") {
    const char *source_code = "let x: i32 = 42;";
    
    // Parse and generate LLVM IR
    AsthraCompileResult result = asthra_compile_to_llvm_ir(source_code);
    ASSERT_TRUE(result.success);
    ASSERT_NOT_NULL(result.llvm_ir);
    
    // Verify LLVM IR contains expected patterns
    ASSERT_STRCONTAINS(result.llvm_ir, "i32 42");
    ASSERT_STRCONTAINS(result.llvm_ir, "alloca");
    
    // Validate IR with LLVM verifier
    bool ir_valid = llvm_verify_module(result.llvm_module);
    ASSERT_TRUE(ir_valid);
    
    asthra_compile_result_destroy(&result);
}

TEST_CASE("llvm_optimization_verification") {
    const char *source_code = "let x = 1 + 2 + 3;";
    
    // Compile with optimization
    AsthraCompileOptions opts = {
        .optimization_level = ASTHRA_OPT_AGGRESSIVE,
        .emit_llvm_ir = true
    };
    
    AsthraCompileResult result = asthra_compile_with_options(source_code, &opts);
    ASSERT_TRUE(result.success);
    
    // Verify constant folding occurred
    ASSERT_STRCONTAINS(result.llvm_ir, "i32 6");  // Should be folded to 6
    ASSERT_STRNOTCONTAINS(result.llvm_ir, "add");  // No add instructions
    
    asthra_compile_result_destroy(&result);
}
```

## Unit Testing Standards

### 1. Function-Level Testing with C23

**EVERY** public function must have corresponding tests using C23 features:

```c
// Test normal operation with modern C features
TEST_CASE("slice_create_normal_operation") {
    constexpr size_t TEST_STRING_LEN = 13;
    const char test_string[] = "Hello, World!";
    
    AsthraSlice slice = asthra_slice_from_string(test_string);
    
    ASSERT_NOT_NULL(slice.ptr);
    ASSERT_EQ(slice.len, TEST_STRING_LEN);
    ASSERT_EQ(slice.element_size, sizeof(char));
    ASSERT_EQ(slice.ownership, ASTHRA_OWNERSHIP_BORROWED);
    ASSERT_FALSE(slice.is_mutable);
    
    // Verify content with typeof
    typeof(test_string[0]) *content = (typeof(test_string[0])*)slice.ptr;
    ASSERT_STREQ(content, test_string);
}

// Test error conditions with nullptr
TEST_CASE("slice_create_null_input") {
    AsthraSlice slice = asthra_slice_from_string(nullptr);
    
    ASSERT_NULL(slice.ptr);
    ASSERT_EQ(slice.len, 0);
    ASSERT_EQ(slice.element_size, 0);
}

// Test with binary constants and bit operations
TEST_CASE("token_flag_operations") {
    // Use C23 binary literals
    constexpr uint32_t KEYWORD_FLAG = 0b0001;
    constexpr uint32_t OPERATOR_FLAG = 0b0010;
    constexpr uint32_t COMBINED_FLAGS = KEYWORD_FLAG | OPERATOR_FLAG;
    
    // Use stdbit.h functions
    ASSERT_EQ(stdc_popcount(COMBINED_FLAGS), 2);
    ASSERT_TRUE(stdc_has_single_bit(KEYWORD_FLAG));
    ASSERT_FALSE(stdc_has_single_bit(COMBINED_FLAGS));
}
```

### 2. Error Path Testing with Attributes

**ALWAYS** test error conditions using function attributes:

```c
[[nodiscard]] static AsthraResult simulate_memory_failure(void) {
    return (AsthraResult){
        .success = false,
        .error_code = ASTHRA_ERROR_OUT_OF_MEMORY,
        .data = nullptr
    };
}

TEST_CASE("memory_allocation_failure_handling") {
    AsthraResult result = simulate_memory_failure();
    
    ASSERT_FALSE(result.success);
    ASSERT_EQ(result.error_code, ASTHRA_ERROR_OUT_OF_MEMORY);
    ASSERT_NULL(result.data);
}

[[deprecated("Use new parser API")]]
static AsthraParseResult old_parse_function(const char *code) {
    // Legacy parser implementation
    return (AsthraParseResult){.success = false};
}

TEST_CASE("deprecated_api_warning_test") {
    // This should generate a compiler warning
    const char *invalid_code = "let x = ;";
    AsthraParseResult result = old_parse_function(invalid_code);
    
    ASSERT_FALSE(result.success);
}
```

## Performance Testing with LLVM Tools

### 1. Benchmark Framework with C23

**USE** C23 features for cleaner benchmarks:

```c
#include "test_benchmark_framework.h"
#include <stdbit.h>

BENCHMARK("slice_creation_performance_c23") {
    constexpr size_t ITERATIONS = 100'000;  // Digit separator
    constexpr size_t ELEMENT_COUNT = 1'000;
    
    BENCHMARK_START();
    
    for (size_t i = 0; i < ITERATIONS; i++) {
        AsthraSlice slice = asthra_slice_create(sizeof(int), ELEMENT_COUNT);
        asthra_slice_destroy(&slice);
    }
    
    BENCHMARK_END();
    
    // Performance assertions
    ASSERT_BENCHMARK_TIME_LESS_THAN(1.0);
    ASSERT_BENCHMARK_MEMORY_USAGE_STABLE();
}

BENCHMARK("bit_operations_performance") {
    constexpr size_t TEST_VALUES = 10'000;
    constexpr uint64_t TEST_PATTERN = 0xAAAA'BBBB'CCCC'DDDD;
    
    BENCHMARK_START();
    
    for (size_t i = 0; i < TEST_VALUES; i++) {
        // Use C23 stdbit.h functions
        [[maybe_unused]] unsigned leading_zeros = stdc_leading_zeros(TEST_PATTERN);
        [[maybe_unused]] unsigned popcount = stdc_popcount(TEST_PATTERN);
        [[maybe_unused]] unsigned bit_width = stdc_bit_width(TEST_PATTERN);
    }
    
    BENCHMARK_END();
    
    ASSERT_BENCHMARK_TIME_LESS_THAN(0.1);
}
```

### 2. LLVM-Specific Performance Testing

**MEASURE** LLVM compilation and optimization performance:

```c
BENCHMARK("llvm_compilation_speed") {
    const char *large_source = generate_large_source_file(10'000);
    
    BENCHMARK_START();
    
    AsthraCompileResult result = asthra_compile_to_llvm_ir(large_source);
    
    BENCHMARK_END();
    
    ASSERT_TRUE(result.success);
    ASSERT_BENCHMARK_TIME_LESS_THAN(5.0);  // Less than 5 seconds
    
    // Verify LLVM IR quality
    ASSERT_NOT_NULL(result.llvm_ir);
    ASSERT_GT(strlen(result.llvm_ir), 0);
    
    asthra_compile_result_destroy(&result);
    free((void*)large_source);
}

BENCHMARK("llvm_optimization_impact") {
    const char *test_code = "fn fibonacci(n: i32) -> i32 { if n <= 1 { n } else { fibonacci(n-1) + fibonacci(n-2) } }";
    
    // Compile without optimization
    AsthraCompileOptions no_opt = {.optimization_level = ASTHRA_OPT_NONE};
    BENCHMARK_START();
    AsthraCompileResult unopt = asthra_compile_with_options(test_code, &no_opt);
    BENCHMARK_END_PHASE("unoptimized");
    
    // Compile with optimization
    AsthraCompileOptions with_opt = {.optimization_level = ASTHRA_OPT_AGGRESSIVE};
    BENCHMARK_START();
    AsthraCompileResult opt = asthra_compile_with_options(test_code, &with_opt);
    BENCHMARK_END_PHASE("optimized");
    
    ASSERT_TRUE(unopt.success && opt.success);
    
    // Optimized should be significantly smaller
    size_t unopt_size = strlen(unopt.llvm_ir);
    size_t opt_size = strlen(opt.llvm_ir);
    ASSERT_LT(opt_size, unopt_size * 0.8);  // At least 20% reduction
    
    asthra_compile_result_destroy(&unopt);
    asthra_compile_result_destroy(&opt);
}
```

## Concurrency Testing with C23 Atomics

### 1. Thread Safety Testing

**VERIFY** thread safety using C23 atomic operations:

```c
#include <stdatomic.h>
#include <threads.h>  // C23 threading

typedef struct {
    atomic_size_t counter;
    size_t iterations;
} ThreadTestData;

int thread_increment_worker(void *arg) {
    ThreadTestData *data = (ThreadTestData*)arg;
    
    for (size_t i = 0; i < data->iterations; i++) {
        atomic_fetch_add_explicit(&data->counter, 1, memory_order_relaxed);
    }
    
    return 0;
}

TEST_CASE("atomic_counter_thread_safety_c23") {
    constexpr size_t THREAD_COUNT = 8;
    constexpr size_t ITERATIONS_PER_THREAD = 10'000;
    
    ThreadTestData data = {
        .counter = ATOMIC_VAR_INIT(0),
        .iterations = ITERATIONS_PER_THREAD
    };
    
    thrd_t threads[THREAD_COUNT];
    
    // Start threads using C23 threading
    for (size_t i = 0; i < THREAD_COUNT; i++) {
        int result = thrd_create(&threads[i], thread_increment_worker, &data);
        ASSERT_EQ(result, thrd_success);
    }
    
    // Wait for completion
    for (size_t i = 0; i < THREAD_COUNT; i++) {
        thrd_join(threads[i], nullptr);
    }
    
    // Verify final count
    constexpr size_t EXPECTED = THREAD_COUNT * ITERATIONS_PER_THREAD;
    size_t actual = atomic_load(&data.counter);
    ASSERT_EQ(actual, EXPECTED);
}
```

## Memory Safety Testing (Clang-Only)

### 1. Clang Sanitizers

**USE** Clang's sanitizers exclusively:

```bash
# AddressSanitizer
clang -fsanitize=address -g -O1 -fno-omit-frame-pointer

# ThreadSanitizer  
clang -fsanitize=thread -g -O1

# UndefinedBehaviorSanitizer
clang -fsanitize=undefined -g -O1

# MemorySanitizer
clang -fsanitize=memory -g -O1 -fno-omit-frame-pointer
```

### 2. Bounds Checking with C23

**VERIFY** memory bounds using modern features:

```c
TEST_CASE("slice_bounds_checking_c23") {
    constexpr size_t SLICE_SIZE = 10;
    AsthraSlice slice = asthra_slice_create(sizeof(int), SLICE_SIZE);
    ASSERT_NOT_NULL(slice.ptr);
    
    // Valid access
    constexpr int TEST_VALUE = 42;
    AsthraResult result = asthra_slice_set_element(&slice, 5, &TEST_VALUE);
    ASSERT_TRUE(result.success);
    
    // Invalid access (out of bounds)
    result = asthra_slice_set_element(&slice, 15, &TEST_VALUE);
    ASSERT_FALSE(result.success);
    ASSERT_EQ(result.error_code, ASTHRA_ERROR_INDEX_OUT_OF_BOUNDS);
    
    asthra_slice_destroy(&slice);
}
```

## LLVM-Only Platform Testing

### 1. Clang/LLVM Feature Testing

**VERIFY** Clang and LLVM specific features:

```c
TEST_CASE("clang_llvm_feature_validation") {
    // Verify C23 support
    static_assert(__STDC_VERSION__ >= 202311L);
    
    // Test Clang-specific features
    #if defined(__clang__)
        // Clang version check
        static_assert(__clang_major__ >= 16, "Clang 16+ required for C23");
        
        // Test __has_include (C23 feature)
        #if __has_include(<stdbit.h>)
            ASSERT_TRUE(true);  // stdbit.h should be available
        #else
            ASSERT_FAIL("stdbit.h not available");
        #endif
        
        // Test __has_c_attribute (C23 feature)
        #if __has_c_attribute(nodiscard)
            ASSERT_TRUE(true);  // nodiscard attribute should be supported
        #else
            ASSERT_FAIL("nodiscard attribute not supported");
        #endif
    #else
        ASSERT_FAIL("Only Clang compiler is supported");
    #endif
}

TEST_CASE("llvm_backend_integration") {
    // Test LLVM-specific functionality
    AsthraLLVMContext *ctx = asthra_llvm_create_context();
    ASSERT_NOT_NULL(ctx);
    
    // Create a simple module
    AsthraLLVMModule *module = asthra_llvm_create_module(ctx, "test_module");
    ASSERT_NOT_NULL(module);
    
    // Verify module
    bool is_valid = asthra_llvm_verify_module(module);
    ASSERT_TRUE(is_valid);
    
    // Cleanup
    asthra_llvm_destroy_module(module);
    asthra_llvm_destroy_context(ctx);
}
```

## Test Execution Guidelines (Clang-Only)

### 1. Pre-Commit Testing

**ALWAYS** run before committing changes:

```bash
# Full test suite with Clang
make clean && make test CC=clang

# Performance regression testing
make test-benchmark CC=clang

# Memory safety testing with Clang sanitizers
make test-asan CC=clang
make test-tsan CC=clang  
make test-ubsan CC=clang

# Static analysis with Clang tools
make analyze CC=clang
clang-tidy src/**/*.c
```

### 2. Continuous Integration (Clang-Only)

**ENSURE** CI pipeline uses Clang exclusively:

```yaml
# .github/workflows/test.yml
strategy:
  matrix:
    os: [ubuntu-latest, macos-latest]
    clang-version: [16, 17, 18, 19, 20]
    build-type: [Debug, Release]
    
steps:
  - name: Install Clang
    run: |
      # Install specific Clang version
      sudo apt-get install clang-${{ matrix.clang-version }}
      
  - name: Configure with Clang
    run: |
      cmake -B build \
        -DCMAKE_C_COMPILER=clang-${{ matrix.clang-version }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
        -DCMAKE_C_STANDARD=23
        
  - name: Build and Test
    run: |
      cmake --build build
      ctest --test-dir build --output-on-failure
```

### 3. Performance Analysis with LLVM Tools

**ANALYZE** performance using LLVM profiling:

```bash
# Profile-guided optimization
clang -fprofile-instr-generate -fcoverage-mapping
./asthra_compiler test_program.as
llvm-profdata merge default.profraw -o default.profdata
clang -fprofile-instr-use=default.profdata -O3

# Coverage analysis
llvm-cov report ./asthra_compiler -instr-profile=default.profdata
llvm-cov show ./asthra_compiler -instr-profile=default.profdata
```

## Success Criteria (LLVM-Only)

### 1. Coverage Metrics

**ACHIEVE** comprehensive test coverage:

- 100% of public API functions tested
- 90%+ line coverage for core components  
- All LLVM IR generation paths tested
- All C23 features properly utilized

### 2. Performance Benchmarks

**MAINTAIN** LLVM-optimized performance standards:

- LLVM IR generation within performance targets
- Optimization passes improve code quality measurably
- No performance regressions in LLVM pipeline
- Memory usage optimizations maintained

### 3. Quality Metrics (Clang Tools)

**ENSURE** high code quality with Clang tooling:

- Zero memory leaks in Clang AddressSanitizer
- Zero race conditions in Clang ThreadSanitizer
- Zero undefined behavior in UBSanitizer
- All Clang Static Analyzer warnings addressed
- 100% test pass rate on all Clang versions 16+

---

**Remember**: With C23 and LLVM-only approach, we can leverage the most modern C features and the most advanced compiler infrastructure for optimal performance, safety, and maintainability.
