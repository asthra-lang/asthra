package examples;

// Multi-line String Literals Examples
// Complete demonstration of v1.23 multi-line string capabilities
// Showcases practical use cases for systems programming and AI generation

pub fn main(none) -> i32 {
    
    // =================================================================
    // PART 1: SINGLE-LINE STRINGS (backward compatibility)
    // =================================================================
    
    let simple_message: string = "Hello, Asthra!";
    let file_path: string = "C:\\Program Files\\MyApp\\config.json";
    let formatted_output: string = "User: john@example.com\nStatus: active\n";
    
    // =================================================================
    // PART 2: RAW MULTI-LINE STRINGS (r""" syntax)
    // =================================================================
    // Perfect for templates, configuration, and scripts
    
    // SQL Query Construction
    let user_query: string = r"""
        SELECT u.id, u.username, u.email, p.first_name, p.last_name
        FROM users u
        LEFT JOIN profiles p ON u.id = p.user_id
        WHERE u.active = true
        ORDER BY u.created_at DESC
    """;
    
    // Shell Script Generation
    let install_script: string = r"""
        #!/bin/bash
        set -euo pipefail
        
        echo "Installing application..."
        mkdir -p /opt/myapp
        cp -r ./dist/* /opt/myapp/
        chmod +x /opt/myapp/bin/myapp
        
        systemctl enable myapp
        systemctl start myapp
        echo "Installation complete!"
    """;
    
    // Configuration Templates
    let nginx_config: string = r"""
        server {
            listen 80;
            server_name example.com;
            location / {
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
        }
    """;
    
    // Docker Configuration
    let dockerfile: string = r"""
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["node", "dist/server.js"]
    """;
    
    // =================================================================
    // PART 3: PROCESSED MULTI-LINE STRINGS (""" syntax)
    // =================================================================
    // Support escape sequences while maintaining structure
    
    // Application Help Documentation
    let help_text: string = """
        Usage: myapp [OPTIONS] <command>
        
        Commands:
            start       Start the application server
            stop        Stop the application server
            status      Show current status
        
        Options:
            -h, --help          Show this help message
            -v, --verbose       Enable verbose output
            -c, --config FILE   Use custom configuration file
        
        Examples:
            myapp start --port 3000
            myapp config set database.host "localhost"
        """;
    
    // Error Report Template
    let error_template: string = """
        ===============================================
        ERROR REPORT - Application Failure
        ===============================================
        
        Timestamp: {timestamp}
        Component: {component}
        Error Code: {error_code}
        Message: {error_message}
        
        Stack Trace:
        {stack_trace}
        
        Please contact support with this information.
        ===============================================
    """;
    
    return 0;
}

// =================================================================
// ADDITIONAL HELPER FUNCTIONS
// =================================================================

// Template Generation Function
pub fn generate_nginx_config(server_name: string, backend_port: i32) -> string {
    return r"""
        server {
            listen 80;
            server_name {server_name};
            
            location / {
                proxy_pass http://127.0.0.1:{backend_port};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
        }
    """;
}

// SQL Query Builder
pub fn build_user_report_query(start_date: string, end_date: string) -> string {
    return r"""
        SELECT 
            u.id,
            u.username,
            u.email,
            COUNT(l.id) as login_count,
            MAX(l.created_at) as last_login
        FROM users u
        LEFT JOIN login_logs l ON u.id = l.user_id
        WHERE l.created_at BETWEEN '{start_date}' AND '{end_date}'
        GROUP BY u.id, u.username, u.email
        ORDER BY login_count DESC, last_login DESC
    """;
}

// =================================================================
// PART 4: PRACTICAL USAGE EXAMPLES
// =================================================================

// Web Server Configuration Generator
pub const nginx_load_balancer: string = r"""
    upstream asthra_backend {
        least_conn;
        server 10.0.1.10:8080 max_fails=3 fail_timeout=30s;
        server 10.0.1.11:8080 max_fails=3 fail_timeout=30s;
        server 10.0.1.12:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    server {
        listen 80;
        listen [::]:80;
        server_name api.asthra-app.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.asthra-app.com;
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/asthra-app.com.crt;
        ssl_certificate_key /etc/ssl/private/asthra-app.com.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req zone=api burst=20 nodelay;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types application/json application/javascript text/css text/javascript;
        
        # Proxy configuration
        location / {
            proxy_pass http://asthra_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://asthra_backend/health;
            access_log off;
        }
        
        # Static file serving (if needed)
        location /static/ {
            alias /var/www/asthra-static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }
""";
