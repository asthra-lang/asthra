package main;

// Define a user struct with explicit visibility
pub struct User {
    pub name: string,
    pub age: i32,
    email: string,  // Private field
}

// Function with Result type for error handling
pub fn divide(a: f64, b: f64) -> Result<f64, string> {
    if b == 0.0 {
        return Result.Err("Cannot divide by zero");
    }
    return Result.Ok(a / b);
}

// Main function with proper signature
pub fn main() -> Result<i32, string> {
    let user: User = User {
        name: "Alice",
        age: 25,
        email: "alice@example.com",
    };
    
    // Pattern matching with Result type
    let result: Result<f64, string> = divide(10.0, 2.0);
    match result {
        Result.Ok(value) => {
            return Result.Ok(0);
        },
        Result.Err(error) => {
            return Result.Err(error);
        },
    }
}
