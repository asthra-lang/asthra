{
  "summary": {
    "total_violations": 1246,
    "total_files_scanned": 145,
    "files_with_violations": 145,
    "violation_rate": "100.0%"
  },
  "by_type": {
    "empty_params": 346,
    "string_interpolation": 93,
    "auto_type": 800,
    "return_void": 6,
    "empty_struct_void": 1
  },
  "by_priority": {
    "HIGH": 347,
    "CRITICAL": 93,
    "MEDIUM": 800,
    "LOW": 6
  },
  "by_file": {
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_19.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_17.asthra": 2,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_4.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_8.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_13.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_6.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_11.asthra": 3,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_14.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_1.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_16.asthra": 2,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_12.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_9.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_10.asthra": 1,
    "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_7.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_10.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_2.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_12.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_16.asthra": 3,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_14.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_8.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_11.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_13.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_3.asthra": 1,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_7.asthra": 3,
    "temp/manual_validation/advanced-topics/advanced-topics.md_example_15.asthra": 1,
    "temp/manual_validation/security/security.md_example_5.asthra": 1,
    "temp/manual_validation/security/security.md_example_11.asthra": 1,
    "temp/manual_validation/security/security.md_example_7.asthra": 2,
    "temp/manual_validation/security/security.md_example_14.asthra": 2,
    "temp/manual_validation/security/security.md_example_18.asthra": 1,
    "temp/manual_validation/security/security.md_example_10.asthra": 1,
    "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_25.asthra": 2,
    "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_23.asthra": 2,
    "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_24.asthra": 1,
    "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_22.asthra": 1,
    "temp/manual_validation/introduction/introduction.md_example_4.asthra": 2,
    "temp/manual_validation/introduction/introduction.md_example_6.asthra": 1,
    "temp/manual_validation/building-projects/building-projects.md_example_2.asthra": 3,
    "temp/manual_validation/building-projects/building-projects.md_example_4.asthra": 1,
    "temp/manual_validation/building-projects/building-projects.md_example_3.asthra": 2,
    "temp/manual_validation/building-projects/building-projects.md_example_1.asthra": 2,
    "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_2.asthra": 3,
    "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_17.asthra": 1,
    "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_8.asthra": 1,
    "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_16.asthra": 1,
    "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_3.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_7.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_17.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_21.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_5.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_3.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_20.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_14.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_18.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_10.asthra": 1,
    "temp/manual_validation/ffi-interop/ffi-interop.md_example_2.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_17.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_15.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_19.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_11.asthra": 2,
    "temp/manual_validation/object-oriented/object-oriented.md_example_16.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_14.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_18.asthra": 1,
    "temp/manual_validation/object-oriented/object-oriented.md_example_12.asthra": 2,
    "temp/manual_validation/observability/observability.md_example_14.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_7.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_5.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_9.asthra": 4,
    "temp/manual_validation/observability/observability.md_example_12.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_1.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_3.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_10.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_15.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_4.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_8.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_13.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_2.asthra": 1,
    "temp/manual_validation/observability/observability.md_example_11.asthra": 1,
    "temp/manual_validation/annotations/annotations.md_example_20.asthra": 2,
    "temp/manual_validation/annotations/annotations.md_example_6.asthra": 1,
    "temp/manual_validation/annotations/annotations.md_example_15.asthra": 3,
    "temp/manual_validation/memory-management/memory-management.md_example_8.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_11.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_5.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_9.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_7.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_12.asthra": 1,
    "temp/manual_validation/memory-management/memory-management.md_example_10.asthra": 1,
    "internal/runtime/memory_allocator.asthra": 2,
    "docs/examples/generic_structs_example.asthra": 8,
    "docs/examples/optional_elements_phase1_examples.asthra": 3,
    "docs/examples/optional_elements_phase2_examples.asthra": 4,
    "docs/examples/annotations/human_review_examples.asthra": 15,
    "docs/examples/annotations/ffi_annotations.asthra": 4,
    "examples/concurrency_simple.asthra": 1,
    "examples/worker_pool_demo.asthra": 1,
    "examples/struct_methods.asthra": 20,
    "examples/if_with_call.asthra": 2,
    "examples/ffi_complete_example.asthra": 7,
    "examples/type_inference_demo.asthra": 14,
    "examples/test_log_function.asthra": 1,
    "examples/error_context_example.asthra": 23,
    "examples/minimal_if_log.asthra": 1,
    "examples/concurrency_example.asthra": 12,
    "examples/test_initialization_simple.asthra": 1,
    "examples/import_examples.asthra": 2,
    "examples/test_pattern_matching.asthra": 3,
    "examples/simple_if.asthra": 1,
    "examples/test_initialization.asthra": 1,
    "examples/string_escape_sequences.asthra": 3,
    "examples/simple_log_test.asthra": 1,
    "examples/json_examples.asthra": 192,
    "examples/hello_world.asthra": 1,
    "examples/import_alias_examples.asthra": 4,
    "examples/ffi_error_example.asthra": 18,
    "examples/test_types.asthra": 1,
    "examples/advanced_concurrency_example.asthra": 27,
    "examples/concurrency_demo.asthra": 5,
    "examples/ffi_example.asthra": 2,
    "examples/concurrency/tier3_external.asthra": 116,
    "examples/concurrency/migration_guide.asthra": 85,
    "examples/concurrency/tier1_basic.asthra": 64,
    "examples/concurrency/tier2_advanced.asthra": 85,
    "stdlib/fs.asthra": 15,
    "stdlib/crypto.asthra": 19,
    "stdlib/crypto_enhancements.asthra": 4,
    "stdlib/http.asthra": 76,
    "stdlib/io.asthra": 11,
    "stdlib/json.asthra": 2,
    "stdlib/datetime/time.asthra": 2,
    "stdlib/ffi/error.asthra": 1,
    "stdlib/examples/collections_comprehensive.asthra": 48,
    "stdlib/examples/comprehensive_example.asthra": 10,
    "stdlib/examples/fs_example.asthra": 30,
    "stdlib/examples/io_example.asthra": 2,
    "stdlib/examples/http_example.asthra": 38,
    "stdlib/concurrent/coordination.asthra": 1,
    "stdlib/concurrent/patterns.asthra": 22,
    "stdlib/concurrent/channels.asthra": 2,
    "stdlib/asthra/collections_enhanced.asthra": 76,
    "stdlib/asthra/panic.asthra": 10,
    "stdlib/asthra/error.asthra": 1,
    "stdlib/asthra/random.asthra": 11,
    "stdlib/asthra/env.asthra": 13,
    "stdlib/asthra/process.asthra": 7
  },
  "violations": [
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_19.asthra",
      "line_number": 5,
      "line_content": "pub fn go_style() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn go_style(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_17.asthra",
      "line_number": 4,
      "line_content": "pub fn potential_deadlock() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn potential_deadlock(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_17.asthra",
      "line_number": 12,
      "line_content": "pub fn safe_channels() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn safe_channels(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_4.asthra",
      "line_number": 2,
      "line_content": "pub fn robust_parallel_work() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn robust_parallel_work(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_8.asthra",
      "line_number": 5,
      "line_content": "pub fn multi_producer_pattern() -> Result<Vec<WorkResult>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn multi_producer_pattern(none) -> Result<Vec<WorkResult>, string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_13.asthra",
      "line_number": 6,
      "line_content": "pub fn resource_managed_channels() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn resource_managed_channels(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_6.asthra",
      "line_number": 5,
      "line_content": "pub fn tier2_function() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn tier2_function(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_11.asthra",
      "line_number": 4,
      "line_content": "fn tokio_runtime_new() -> *mut TokioRuntime;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tokio_runtime_new(none) -> *mut TokioRuntime;"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_11.asthra",
      "line_number": 9,
      "line_content": "pub fn high_performance_server() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn high_performance_server(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_11.asthra",
      "line_number": 23,
      "line_content": "match tokio_result.map_err(|e| format!(\"Tokio error: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match tokio_result.map_err(|e| format!(\"Tokio error:\" + :? + \", e)) {\""
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_14.asthra",
      "line_number": 3,
      "line_content": "pub fn with_timeout() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn with_timeout(none) -> Result<i32, string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_1.asthra",
      "line_number": 3,
      "line_content": "pub fn main() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn main(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_16.asthra",
      "line_number": 3,
      "line_content": "pub fn missing_annotation() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn missing_annotation(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_16.asthra",
      "line_number": 14,
      "line_content": "pub fn with_annotation() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn with_annotation(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_12.asthra",
      "line_number": 3,
      "line_content": "pub fn well_handled_concurrency() -> Result<Vec<Data>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn well_handled_concurrency(none) -> Result<Vec<Data>, string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_9.asthra",
      "line_number": 5,
      "line_content": "pub fn worker_pool_example() -> Result<Vec<ProcessedData>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn worker_pool_example(none) -> Result<Vec<ProcessedData>, string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_10.asthra",
      "line_number": 5,
      "line_content": "pub fn synchronized_processing() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn synchronized_processing(none) -> Result<(), string> {"
    },
    {
      "file_path": "temp/manual_validation/concurrency_balanced/concurrency_balanced.md_example_7.asthra",
      "line_number": 5,
      "line_content": "pub fn simple_producer_consumer() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn simple_producer_consumer(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_10.asthra",
      "line_number": 23,
      "line_content": "priv fn pqc_key_encapsulation() -> Result<EncapsulationResult, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn pqc_key_encapsulation(none) -> Result<EncapsulationResult, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_2.asthra",
      "line_number": 3,
      "line_content": "priv fn grammar_compliant_function() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn grammar_compliant_function(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_12.asthra",
      "line_number": 3,
      "line_content": "priv fn grammar_test_case() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn grammar_test_case(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_16.asthra",
      "line_number": 3,
      "line_content": "priv fn result_chain_example() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn result_chain_example(none) -> Result<string, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_16.asthra",
      "line_number": 12,
      "line_content": "priv fn advanced_task_coordination() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn advanced_task_coordination(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_16.asthra",
      "line_number": 33,
      "line_content": "priv fn enhanced_ffi_pattern() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn enhanced_ffi_pattern(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_14.asthra",
      "line_number": 2,
      "line_content": "priv fn optimized_string_operations() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn optimized_string_operations(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_8.asthra",
      "line_number": 3,
      "line_content": "priv fn generate_pqc_keypair() -> Result<PQCKeyPair, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn generate_pqc_keypair(none) -> Result<PQCKeyPair, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_11.asthra",
      "line_number": 2,
      "line_content": "priv fn comprehensive_pqc_workflow() -> Result<SecureSession, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn comprehensive_pqc_workflow(none) -> Result<SecureSession, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_13.asthra",
      "line_number": 3,
      "line_content": "priv fn tuple_pattern_matching() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn tuple_pattern_matching(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_3.asthra",
      "line_number": 2,
      "line_content": "priv fn comprehensive_error_handling() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn comprehensive_error_handling(none) -> Result<string, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_7.asthra",
      "line_number": 3,
      "line_content": "priv fn cryptographic_key_exchange() -> Result<SharedSecret, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn cryptographic_key_exchange(none) -> Result<SharedSecret, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_7.asthra",
      "line_number": 9,
      "line_content": "priv fn complex_concurrent_operation() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn complex_concurrent_operation(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_7.asthra",
      "line_number": 17,
      "line_content": "priv fn simple_c_wrapper() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn simple_c_wrapper(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/advanced-topics/advanced-topics.md_example_15.asthra",
      "line_number": 2,
      "line_content": "priv fn advanced_slice_operations() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "priv fn advanced_slice_operations(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_5.asthra",
      "line_number": 2,
      "line_content": "pub fn generate_secure_random() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn generate_secure_random(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_11.asthra",
      "line_number": 2,
      "line_content": "pub fn secure_crypto_operation() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn secure_crypto_operation(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_7.asthra",
      "line_number": 2,
      "line_content": "pub fn generate_session_id() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn generate_session_id(none) -> Result<string, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_7.asthra",
      "line_number": 18,
      "line_content": "pub fn generate_salt() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn generate_salt(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_14.asthra",
      "line_number": 4,
      "line_content": "true => return Result.Err(\"Input too small: {data.len} < \" + min_size + \"\"),",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"true => return Result.Err(\"Input too small:\" + data.len + \"< \" + min_size + \"\"),\""
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_14.asthra",
      "line_number": 7,
      "line_content": "true => return Result.Err(\"Input too large: {data.len} > \" + max_size + \"\"),",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"true => return Result.Err(\"Input too large:\" + data.len + \"> \" + max_size + \"\"),\""
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_18.asthra",
      "line_number": 2,
      "line_content": "pub fn test_security_features() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_security_features(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/security/security.md_example_10.asthra",
      "line_number": 2,
      "line_content": "pub fn handle_sensitive_key() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn handle_sensitive_key(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_25.asthra",
      "line_number": 4,
      "line_content": "pub fn conflicting_annotations() -> void {}",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn conflicting_annotations(none) -> void {}"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_25.asthra",
      "line_number": 8,
      "line_content": "pub fn consistent_annotation() -> void {}",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn consistent_annotation(none) -> void {}"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_23.asthra",
      "line_number": 8,
      "line_content": "fn c_function_owned() -> *mut u8;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn c_function_owned(none) -> *mut u8;"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_23.asthra",
      "line_number": 15,
      "line_content": "pub fn use_c_functions() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn use_c_functions(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_24.asthra",
      "line_number": 9,
      "line_content": "pub fn main() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn main(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/ai_generation_guidelines/ai_generation_guidelines.md_example_22.asthra",
      "line_number": 4,
      "line_content": "pub fn complex_coordination() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn complex_coordination(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/introduction/introduction.md_example_4.asthra",
      "line_number": 4,
      "line_content": "log(\"DEBUG\", \"Processing {data.len} data points\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"DEBUG\", \"Processing\" + data.len + \"data points\");\""
    },
    {
      "file_path": "temp/manual_validation/introduction/introduction.md_example_4.asthra",
      "line_number": 11,
      "line_content": "log(\"PERF\", \"Calculation completed in {timer.elapsed()}ms\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"PERF\", \"Calculation completed in\" + timer.elapsed() + \"ms\");\""
    },
    {
      "file_path": "temp/manual_validation/introduction/introduction.md_example_6.asthra",
      "line_number": 6,
      "line_content": "pub fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn main(none) -> i32 {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_2.asthra",
      "line_number": 4,
      "line_content": "pub fn debug_function() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn debug_function(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_2.asthra",
      "line_number": 9,
      "line_content": "pub fn crypto_function() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn crypto_function(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_2.asthra",
      "line_number": 14,
      "line_content": "pub fn full_feature_function() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn full_feature_function(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_4.asthra",
      "line_number": 2,
      "line_content": "pub fn robust_build_step() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn robust_build_step(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_3.asthra",
      "line_number": 8,
      "line_content": "pub fn test_key_generation() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_key_generation(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_3.asthra",
      "line_number": 23,
      "line_content": "pub fn test_secure_compare() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_secure_compare(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_1.asthra",
      "line_number": 5,
      "line_content": "pub fn pre_build() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn pre_build(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/building-projects/building-projects.md_example_1.asthra",
      "line_number": 18,
      "line_content": "pub fn post_build() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn post_build(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_2.asthra",
      "line_number": 23,
      "line_content": "fn new() -> IntList { /* ... */ }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> IntList { /* ... */ }"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_2.asthra",
      "line_number": 28,
      "line_content": "fn new() -> StringList { /* ... */ }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> StringList { /* ... */ }"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_2.asthra",
      "line_number": 33,
      "line_content": "fn new() -> FloatList { /* ... */ }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> FloatList { /* ... */ }"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_17.asthra",
      "line_number": 4,
      "line_content": "pub fn test_user_cache_integration() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_user_cache_integration(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_8.asthra",
      "line_number": 21,
      "line_content": "pub fn example_ffi_usage() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn example_ffi_usage(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_16.asthra",
      "line_number": 4,
      "line_content": "pub fn test_vec_operations() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_vec_operations(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/generic_structs_migration/generic_structs_migration.md_example_3.asthra",
      "line_number": 11,
      "line_content": "fn new() -> List<T> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> List<T> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_7.asthra",
      "line_number": 3,
      "line_content": "pub fn get_data_from_c() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn get_data_from_c(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_17.asthra",
      "line_number": 3,
      "line_content": "extern \"libc\" fn get_errno() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn get_errno(none) -> i32;"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_21.asthra",
      "line_number": 3,
      "line_content": "pub fn simple_c_call() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn simple_c_call(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_5.asthra",
      "line_number": 2,
      "line_content": "pub fn comprehensive_string_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn comprehensive_string_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_3.asthra",
      "line_number": 4,
      "line_content": "pub fn use_primitive_marshaling() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn use_primitive_marshaling(none) -> i32 {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_20.asthra",
      "line_number": 2,
      "line_content": "pub fn variadic_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn variadic_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_14.asthra",
      "line_number": 6,
      "line_content": "pub fn complex_ownership_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn complex_ownership_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_18.asthra",
      "line_number": 2,
      "line_content": "pub fn robust_c_interaction() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn robust_c_interaction(none) -> Result<string, string> {"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_10.asthra",
      "line_number": 4,
      "line_content": "pub fn create_buffer() -> #[transfer_full] *mut u8 { ... }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_buffer(none) -> #[transfer_full] *mut u8 { ... }"
    },
    {
      "file_path": "temp/manual_validation/ffi-interop/ffi-interop.md_example_2.asthra",
      "line_number": 2,
      "line_content": "pub fn safe_wrapper_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn safe_wrapper_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_17.asthra",
      "line_number": 16,
      "line_content": "pub fn method_resolution_examples() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn method_resolution_examples(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_15.asthra",
      "line_number": 62,
      "line_content": "pub fn file_operations() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn file_operations(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_19.asthra",
      "line_number": 4,
      "line_content": "pub fn create_connection() -> HttpClient { ... }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_connection(none) -> HttpClient { ... }"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_11.asthra",
      "line_number": 7,
      "line_content": "pub fn new() -> StringBuilder {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn new(none) -> StringBuilder {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_11.asthra",
      "line_number": 25,
      "line_content": "pub fn build_message() -> string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn build_message(none) -> string {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_16.asthra",
      "line_number": 21,
      "line_content": "pub fn test_visibility() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn test_visibility(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_14.asthra",
      "line_number": 43,
      "line_content": "pub fn create_database_connections() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_database_connections(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_18.asthra",
      "line_number": 4,
      "line_content": "fn create_default() -> Calculator { ... }",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn create_default(none) -> Calculator { ... }"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_12.asthra",
      "line_number": 74,
      "line_content": "pub fn create_request() -> HttpRequest {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_request(none) -> HttpRequest {"
    },
    {
      "file_path": "temp/manual_validation/object-oriented/object-oriented.md_example_12.asthra",
      "line_number": 78,
      "line_content": ".with_body(\"{\\\"name\\\": \\\"John Doe\\\"}\")",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \".with_body(\" + \\\"name\\\": \\\"John Doe\\\" + \")\""
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_14.asthra",
      "line_number": 2,
      "line_content": "pub fn memory_debugging_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn memory_debugging_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_7.asthra",
      "line_number": 2,
      "line_content": "pub fn replay_enabled_workflow() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn replay_enabled_workflow(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_5.asthra",
      "line_number": 2,
      "line_content": "pub fn structured_logging_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn structured_logging_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_9.asthra",
      "line_number": 2,
      "line_content": "pub fn comprehensive_debugging_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn comprehensive_debugging_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_9.asthra",
      "line_number": 9,
      "line_content": "log(\"DEBUG\", \"Data slice: ptr={data.ptr} len={data.len}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"DEBUG\", \"Data slice: ptr=\" + data.ptr + \"len=\" + data.len + \");\""
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_9.asthra",
      "line_number": 18,
      "line_content": "log(\"DEBUG\", \"Processing successful: {processed.len} bytes output\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"DEBUG\", \"Processing successful:\" + processed.len + \"bytes output\");\""
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_9.asthra",
      "line_number": 31,
      "line_content": "log(\"DEBUG\", \"Input data length: {data.len}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"DEBUG\", \"Input data length:\" + data.len + \");\""
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_12.asthra",
      "line_number": 2,
      "line_content": "pub fn performance_monitoring_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn performance_monitoring_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_1.asthra",
      "line_number": 2,
      "line_content": "pub fn basic_logging_example() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn basic_logging_example(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_3.asthra",
      "line_number": 2,
      "line_content": "pub fn io_comparison_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn io_comparison_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_10.asthra",
      "line_number": 2,
      "line_content": "pub fn ai_diagnostic_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn ai_diagnostic_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_15.asthra",
      "line_number": 2,
      "line_content": "pub fn external_tool_integration() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn external_tool_integration(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_4.asthra",
      "line_number": 2,
      "line_content": "pub fn error_logging_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn error_logging_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_8.asthra",
      "line_number": 2,
      "line_content": "pub fn debug_pattern_matching() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn debug_pattern_matching(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_13.asthra",
      "line_number": 2,
      "line_content": "pub fn concurrent_debugging_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn concurrent_debugging_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_2.asthra",
      "line_number": 2,
      "line_content": "pub fn string_logging_example() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn string_logging_example(none) -> void {"
    },
    {
      "file_path": "temp/manual_validation/observability/observability.md_example_11.asthra",
      "line_number": 2,
      "line_content": "pub fn ai_error_context_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn ai_error_context_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_20.asthra",
      "line_number": 5,
      "line_content": "pub fn secure_function() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn secure_function(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_20.asthra",
      "line_number": 19,
      "line_content": "pub fn crypto_function() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn crypto_function(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_6.asthra",
      "line_number": 21,
      "line_content": "pub fn generate_random_salt() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn generate_random_salt(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_15.asthra",
      "line_number": 3,
      "line_content": "pub fn create_managed_data() -> []u8 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_managed_data(none) -> []u8 {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_15.asthra",
      "line_number": 11,
      "line_content": "pub fn create_c_compatible_data() -> *mut u8 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_c_compatible_data(none) -> *mut u8 {"
    },
    {
      "file_path": "temp/manual_validation/annotations/annotations.md_example_15.asthra",
      "line_number": 19,
      "line_content": "pub fn create_pinned_secure_buffer() -> []u8 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn create_pinned_secure_buffer(none) -> []u8 {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_8.asthra",
      "line_number": 2,
      "line_content": "pub fn slice_management_examples() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn slice_management_examples(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_11.asthra",
      "line_number": 2,
      "line_content": "pub fn secure_memory_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn secure_memory_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_5.asthra",
      "line_number": 3,
      "line_content": "extern \"my_lib\" fn get_fixed_buffer() -> *mut u8;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"my_lib\" fn get_fixed_buffer(none) -> *mut u8;"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_9.asthra",
      "line_number": 3,
      "line_content": "pub fn get_data_from_c() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn get_data_from_c(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_7.asthra",
      "line_number": 8,
      "line_content": "pub fn slice_operations_example() -> Result<usize, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn slice_operations_example(none) -> Result<usize, string> {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_12.asthra",
      "line_number": 2,
      "line_content": "pub fn memory_safety_example() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn memory_safety_example(none) -> Result<void, string> {"
    },
    {
      "file_path": "temp/manual_validation/memory-management/memory-management.md_example_10.asthra",
      "line_number": 2,
      "line_content": "pub fn handle_sensitive_key() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn handle_sensitive_key(none) -> Result<void, string> {"
    },
    {
      "file_path": "internal/runtime/memory_allocator.asthra",
      "line_number": 93,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_timestamp() -> u64;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_timestamp(none) -> u64;"
    },
    {
      "file_path": "internal/runtime/memory_allocator.asthra",
      "line_number": 108,
      "line_content": "fn get_allocation_stats() -> (usize, usize, usize) {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_allocation_stats(none) -> (usize, usize, usize) {"
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 154,
      "line_content": "log(\"Mathematical constants: \u03c0\u2248{x}, e\u2248{y}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Mathematical constants: \u03c0\u2248\" + x + \", e\u2248\" + y + \");\""
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 160,
      "line_content": "log(\"Person: {name} is {age} years old\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Person:\" + name + \"is\" + age + \"years old\");\""
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 168,
      "line_content": "log(\"Active user cache (ID: {id}) contains {user_list.len} users\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Active user cache (ID:\" + id + \") contains\" + user_list.len + \"users\");\""
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 170,
      "line_content": "log(\"Inactive user cache (ID: {id})\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Inactive user cache (ID:\" + id + \")\");\""
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 179,
      "line_content": "log(\"Found number at index 1: {num}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Found number at index 1:\" + num + \");\""
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 187,
      "line_content": "let auto_pair: auto = Pair.new(\"inference\", 42);  // Pair<string, i32> inferred;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let auto_pair: <explicit_type> = Pair.new(\"inference\", 42);  // Pair<string, i32> inferred;"
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 188,
      "line_content": "let auto_container: auto = Container.new(auto_pair, \"metadata\", 999);  // Container<Pair<string, i32>, string>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let auto_container: <explicit_type> = Container.new(auto_pair, \"metadata\", 999);  // Container<Pair<string, i32>, string>;"
    },
    {
      "file_path": "docs/examples/generic_structs_example.asthra",
      "line_number": 191,
      "line_content": "let point_2d: auto = Point2D { x: 10.0, y: 20.0 };",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let point_2d: <explicit_type> = Point2D { x: 10.0, y: 20.0 };"
    },
    {
      "file_path": "docs/examples/optional_elements_phase1_examples.asthra",
      "line_number": 35,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/optional_elements_phase1_examples.asthra",
      "line_number": 40,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/optional_elements_phase1_examples.asthra",
      "line_number": 44,
      "line_content": "priv struct Empty { void }",
      "violation_type": "ViolationType.EMPTY_STRUCT_VOID",
      "priority": "Priority.HIGH",
      "description": "Empty struct should use { none } instead of { void }",
      "suggested_fix": "priv struct Empty { none }"
    },
    {
      "file_path": "docs/examples/optional_elements_phase2_examples.asthra",
      "line_number": 21,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/optional_elements_phase2_examples.asthra",
      "line_number": 26,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/optional_elements_phase2_examples.asthra",
      "line_number": 56,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/optional_elements_phase2_examples.asthra",
      "line_number": 67,
      "line_content": "return void;",
      "violation_type": "ViolationType.RETURN_VOID",
      "priority": "Priority.LOW",
      "description": "Functions returning void should use return; not return void;",
      "suggested_fix": "return;"
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 191,
      "line_content": "log(\"INFO\", \"Operation succeeded after {attempt} retries\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"INFO\", \"Operation succeeded after\" + attempt + \"retries\");\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 199,
      "line_content": "return Result.Err(\"Operation failed after {max_retries} attempts: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"return Result.Err(\"Operation failed after\" + max_retries + \"attempts: \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 207,
      "line_content": "log(\"WARN\", \"Attempt {attempt} failed, retrying in {actual_delay}ms: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"WARN\", \"Attempt\" + attempt + \"failed, retrying in\" + actual_delay + \"ms: \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 303,
      "line_content": "audit_log(\"TRANSACTION_VALIDATION_FAILED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_VALIDATION_FAILED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 313,
      "line_content": "audit_log(\"TRANSACTION_INSUFFICIENT_FUNDS\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_INSUFFICIENT_FUNDS\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 322,
      "line_content": "audit_log(\"TRANSACTION_LIMIT_EXCEEDED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_LIMIT_EXCEEDED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 332,
      "line_content": "audit_log(\"TRANSACTION_FRAUD_DETECTED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_FRAUD_DETECTED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 357,
      "line_content": "audit_log(\"TRANSACTION_DEBIT_FAILED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_DEBIT_FAILED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 371,
      "line_content": "audit_log(\"TRANSACTION_CREDIT_FAILED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_CREDIT_FAILED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 384,
      "line_content": "audit_log(\"TRANSACTION_RECORD_FAILED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_RECORD_FAILED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 392,
      "line_content": "audit_log(\"TRANSACTION_COMMIT_FAILED\", \"Transaction {transaction.id}: \" + error);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_COMMIT_FAILED\", \"Transaction\" + transaction.id + \": \" + error);\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 403,
      "line_content": "audit_log(\"TRANSACTION_SUCCESS\", \"Transaction {transaction.id} completed successfully\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"audit_log(\"TRANSACTION_SUCCESS\", \"Transaction\" + transaction.id + \"completed successfully\");\""
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 492,
      "line_content": "fn generate_cryptographic_salt() -> Result<[]u8, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_cryptographic_salt(none) -> Result<[]u8, string> {"
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 628,
      "line_content": "pub fn new() -> Config {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn new(none) -> Config {"
    },
    {
      "file_path": "docs/examples/annotations/human_review_examples.asthra",
      "line_number": 651,
      "line_content": "pub fn new() -> ProcessedRecord {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn new(none) -> ProcessedRecord {"
    },
    {
      "file_path": "docs/examples/annotations/ffi_annotations.asthra",
      "line_number": 274,
      "line_content": "return Result.Err(\"Secure operation failed with code: {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"return Result.Err(\"Secure operation failed with code:\" + result + \");\""
    },
    {
      "file_path": "docs/examples/annotations/ffi_annotations.asthra",
      "line_number": 423,
      "line_content": "return Result.Err(\"Complex function failed with code: {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"return Result.Err(\"Complex function failed with code:\" + result + \");\""
    },
    {
      "file_path": "docs/examples/annotations/ffi_annotations.asthra",
      "line_number": 478,
      "line_content": "_ => return Result.Err(\"Unknown error code: {result}\")",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"_ => return Result.Err(\"Unknown error code:\" + result + \")\""
    },
    {
      "file_path": "docs/examples/annotations/ffi_annotations.asthra",
      "line_number": 511,
      "line_content": "pub fn new() -> SecurityConfig {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn new(none) -> SecurityConfig {"
    },
    {
      "file_path": "examples/concurrency_simple.asthra",
      "line_number": 8,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/worker_pool_demo.asthra",
      "line_number": 6,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 27,
      "line_content": "fn origin() -> Point {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn origin(none) -> Point {"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 38,
      "line_content": "let dx: auto = self.x - other.x;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dx: <explicit_type> = self.x - other.x;"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 39,
      "line_content": "let dy: auto = self.y - other.y;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dy: <explicit_type> = self.y - other.y;"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 112,
      "line_content": "let origin: auto = Point::origin();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let origin: <explicit_type> = Point::origin();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 113,
      "line_content": "let point1: auto = Point::new(3.0, 4.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let point1: <explicit_type> = Point::new(3.0, 4.0);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 114,
      "line_content": "let point2: auto = Point::new(6.0, 8.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let point2: <explicit_type> = Point::new(6.0, 8.0);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 117,
      "line_content": "let distance1: auto = point1.distance_from_origin();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let distance1: <explicit_type> = point1.distance_from_origin();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 118,
      "line_content": "let distance2: auto = point1.distance_to(point2);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let distance2: <explicit_type> = point1.distance_to(point2);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 119,
      "line_content": "let is_origin: auto = origin.is_origin();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let is_origin: <explicit_type> = origin.is_origin();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 122,
      "line_content": "let transformed_point: auto = point1.translate(1.0, 1.0).scale(2.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let transformed_point: <explicit_type> = point1.translate(1.0, 1.0).scale(2.0);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 125,
      "line_content": "let rect: auto = Rectangle::new(0.0, 0.0, 10.0, 5.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rect: <explicit_type> = Rectangle::new(0.0, 0.0, 10.0, 5.0);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 126,
      "line_content": "let square: auto = Rectangle::square(2.0, 2.0, 4.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let square: <explicit_type> = Rectangle::square(2.0, 2.0, 4.0);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 128,
      "line_content": "let area: auto = rect.area();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let area: <explicit_type> = rect.area();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 129,
      "line_content": "let perimeter: auto = rect.perimeter();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let perimeter: <explicit_type> = rect.perimeter();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 130,
      "line_content": "let corner: auto = rect.bottom_right();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let corner: <explicit_type> = rect.bottom_right();"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 131,
      "line_content": "let contains_point: auto = rect.contains(point1);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let contains_point: <explicit_type> = rect.contains(point1);"
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 134,
      "line_content": "log(\"Point distance from origin: {distance1}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Point distance from origin:\" + distance1 + \");\""
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 135,
      "line_content": "log(\"Distance between points: {distance2}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Distance between points:\" + distance2 + \");\""
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 136,
      "line_content": "log(\"Rectangle area: {area}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Rectangle area:\" + area + \");\""
    },
    {
      "file_path": "examples/struct_methods.asthra",
      "line_number": 137,
      "line_content": "log(\"Rectangle perimeter: {perimeter}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Rectangle perimeter:\" + perimeter + \");\""
    },
    {
      "file_path": "examples/if_with_call.asthra",
      "line_number": 3,
      "line_content": "fn my_function() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn my_function(none) -> void {"
    },
    {
      "file_path": "examples/if_with_call.asthra",
      "line_number": 7,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 65,
      "line_content": "fn demonstrate_string_marshaling() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_string_marshaling(none) -> Result<void, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 99,
      "line_content": "fn demonstrate_slice_marshaling() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_slice_marshaling(none) -> Result<void, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 127,
      "line_content": "fn demonstrate_variadic_functions() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_variadic_functions(none) -> Result<void, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 166,
      "line_content": "fn demonstrate_ownership_transfer() -> Result<void, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_ownership_transfer(none) -> Result<void, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 205,
      "line_content": "fn demonstrate_result_marshaling() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_result_marshaling(none) -> Result<string, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 230,
      "line_content": "fn perform_risky_operation() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn perform_risky_operation(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/ffi_complete_example.asthra",
      "line_number": 241,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 7,
      "line_content": "fn main() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> void {"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 9,
      "line_content": "let integer: auto = 42;        // Should infer i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let integer: <explicit_type> = 42;        // Should infer i32;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 10,
      "line_content": "let float: auto = 3.14;        // Should infer f64;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let float: <explicit_type> = 3.14;        // Should infer f64;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 11,
      "line_content": "let text: auto = \"hello\";      // Should infer string;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let text: <explicit_type> = \"hello\";      // Should infer string;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 12,
      "line_content": "let flag: auto = true;         // Should infer bool;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let flag: <explicit_type> = true;         // Should infer bool;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 13,
      "line_content": "let character: auto = 'A';     // Should infer char;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let character: <explicit_type> = 'A';     // Should infer char;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 16,
      "line_content": "let numbers: auto = [1, 2, 3];           // Should infer []i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let numbers: <explicit_type> = [1, 2, 3];           // Should infer []i32;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 17,
      "line_content": "let names: auto = [\"Alice\", \"Bob\"];      // Should infer []string;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let names: <explicit_type> = [\"Alice\", \"Bob\"];      // Should infer []string;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 18,
      "line_content": "let flags: auto = [true, false, true];   // Should infer []bool;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let flags: <explicit_type> = [true, false, true];   // Should infer []bool;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 21,
      "line_content": "let sum: auto = integer + 10;            // Should infer i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let sum: <explicit_type> = integer + 10;            // Should infer i32;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 22,
      "line_content": "let product: auto = float * 2.0;         // Should infer f64;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let product: <explicit_type> = float * 2.0;         // Should infer f64;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 23,
      "line_content": "let comparison: auto = integer < 100;    // Should infer bool;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let comparison: <explicit_type> = integer < 100;    // Should infer bool;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 36,
      "line_content": "let temp: auto = x * 2;      // Should infer i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let temp: <explicit_type> = x * 2;      // Should infer i32;"
    },
    {
      "file_path": "examples/type_inference_demo.asthra",
      "line_number": 37,
      "line_content": "let result: auto = temp + y; // Should infer i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = temp + y; // Should infer i32;"
    },
    {
      "file_path": "examples/test_log_function.asthra",
      "line_number": 7,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 46,
      "line_content": "fn perform_operation_traditional() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn perform_operation_traditional(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 49,
      "line_content": "let fetch_result: auto = fetch_data(url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fetch_result: <explicit_type> = fetch_data(url);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 50,
      "line_content": "let data: auto = match fetch_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = match fetch_result {;"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 57,
      "line_content": "let parse_result: auto = parse_data(data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let parse_result: <explicit_type> = parse_data(data);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 58,
      "line_content": "let items: auto = match parse_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let items: <explicit_type> = match parse_result {;"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 65,
      "line_content": "let process_result: auto = process_data(items);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let process_result: <explicit_type> = process_data(items);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 77,
      "line_content": "fn perform_operation_with_context() -> Result<i32, error::ErrorWithContext<string>> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn perform_operation_with_context(none) -> Result<i32, error::ErrorWithContext<string>> {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 81,
      "line_content": "let data: auto = fetch_data(url).with_context(\"Failed to fetch data from URL\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = fetch_data(url).with_context(\"Failed to fetch data from URL\");"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 82,
      "line_content": "let items: auto = parse_data(data?).with_context(\"Failed to parse fetched data\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let items: <explicit_type> = parse_data(data?).with_context(\"Failed to parse fetched data\");"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 83,
      "line_content": "let count: auto = process_data(items?).with_context(\"Failed to process parsed items\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let count: <explicit_type> = process_data(items?).with_context(\"Failed to process parsed items\");"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 89,
      "line_content": "fn perform_complex_operation() -> Result<i32, error::ErrorWithContext<string>> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn perform_complex_operation(none) -> Result<i32, error::ErrorWithContext<string>> {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 90,
      "line_content": "let url: auto = \"api\";  // This will fail (too short);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let url: <explicit_type> = \"api\";  // This will fail (too short);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 93,
      "line_content": "let fetch_result: auto = fetch_data(url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fetch_result: <explicit_type> = fetch_data(url);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 96,
      "line_content": "let context: auto = error::new_context_builder(err);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let context: <explicit_type> = error::new_context_builder(err);"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 106,
      "line_content": "let data: auto = fetch_result.unwrap();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = fetch_result.unwrap();"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 111,
      "line_content": "fn multilayer_context_example() -> Result<i32, error::ErrorWithContext<string>> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn multilayer_context_example(none) -> Result<i32, error::ErrorWithContext<string>> {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 115,
      "line_content": "let parsed: auto = parse_data(data).with_context(\"Failed in first parsing step\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let parsed: <explicit_type> = parse_data(data).with_context(\"Failed in first parsing step\");"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 124,
      "line_content": "let enhanced: auto = context.add_context(\"Validation phase encountered an error\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let enhanced: <explicit_type> = context.add_context(\"Validation phase encountered an error\");"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 131,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 134,
      "line_content": "let traditional_result: auto = perform_operation_traditional();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let traditional_result: <explicit_type> = perform_operation_traditional();"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 146,
      "line_content": "let context_result: auto = perform_operation_with_context();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let context_result: <explicit_type> = perform_operation_with_context();"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 162,
      "line_content": "let complex_result: auto = perform_complex_operation();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let complex_result: <explicit_type> = perform_complex_operation();"
    },
    {
      "file_path": "examples/error_context_example.asthra",
      "line_number": 174,
      "line_content": "let multilayer_result: auto = multilayer_context_example();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let multilayer_result: <explicit_type> = multilayer_context_example();"
    },
    {
      "file_path": "examples/minimal_if_log.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 11,
      "line_content": "log(\"Worker {id} starting\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Worker\" + id + \"starting\");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 14,
      "line_content": "let result: auto = id * 2;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = id * 2;"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 16,
      "line_content": "log(\"Worker {id} completed with result {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Worker\" + id + \"completed with result\" + result + \");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 22,
      "line_content": "log(\"Complex worker {name} (id: {id}) starting with multiplier {multiplier}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Complex worker\" + name + \"(id:\" + id + \") starting with multiplier\" + multiplier + \");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 24,
      "line_content": "let result: auto = id * multiplier;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = id * multiplier;"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 26,
      "line_content": "log(\"Complex worker {name} completed with result {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Complex worker\" + name + \"completed with result\" + result + \");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 32,
      "line_content": "log(\"Starting parallel computation with {data.len} elements\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Starting parallel computation with\" + data.len + \"elements\");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 39,
      "line_content": "log(\"All {data.len} tasks spawned\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"All\" + data.len + \"tasks spawned\");\""
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 67,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 70,
      "line_content": "let data: auto = [1, 2, 3, 4, 5];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = [1, 2, 3, 4, 5];"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 76,
      "line_content": "let task_count: auto = parallel_computation(data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_count: <explicit_type> = parallel_computation(data);"
    },
    {
      "file_path": "examples/concurrency_example.asthra",
      "line_number": 77,
      "line_content": "log(\"Spawned {task_count} parallel tasks\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Spawned\" + task_count + \"parallel tasks\");\""
    },
    {
      "file_path": "examples/test_initialization_simple.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/import_examples.asthra",
      "line_number": 54,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/import_examples.asthra",
      "line_number": 60,
      "line_content": "let json_data: mypkg::JsonValue = mypkg::parse_json(\"{\\\"key\\\": \\\"value\\\"}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"let json_data: mypkg::JsonValue = mypkg::parse_json(\" + \\\"key\\\": \\\"value\\\" + \");\""
    },
    {
      "file_path": "examples/test_pattern_matching.asthra",
      "line_number": 10,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/test_pattern_matching.asthra",
      "line_number": 14,
      "line_content": "log(\"Division result: {value}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Division result:\" + value + \");\""
    },
    {
      "file_path": "examples/test_pattern_matching.asthra",
      "line_number": 17,
      "line_content": "log(\"Error: {error}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Error:\" + error + \");\""
    },
    {
      "file_path": "examples/simple_if.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/test_initialization.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/string_escape_sequences.asthra",
      "line_number": 45,
      "line_content": "let json_like: string = \"{\\n\\t\\\"name\\\": \\\"\" + name + \"\\\",\\n\\t\\\"age\\\": \" + string::from_int(age) + \",\\n\\t\\\"department\\\": \\\"\" + department + \"\\\"\\n}\";",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"let json_like: string = \" + \\n\\t\\\"name\\\": \\\"\" + name + \"\\\",\\n\\t\\\"age\\\": \" + string::from_int(age) + \",\\n\\t\\\"department\\\": \\\"\" + department + \"\\\"\\n + \";\""
    },
    {
      "file_path": "examples/string_escape_sequences.asthra",
      "line_number": 92,
      "line_content": "fn get_timestamp() -> string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_timestamp(none) -> string {"
    },
    {
      "file_path": "examples/string_escape_sequences.asthra",
      "line_number": 96,
      "line_content": "fn generate_session_id() -> string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_session_id(none) -> string {"
    },
    {
      "file_path": "examples/simple_log_test.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 14,
      "line_content": "fn example_basic_parsing() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_basic_parsing(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 18,
      "line_content": "let null_result: auto = json::parse(\"null\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let null_result: <explicit_type> = json::parse(\"null\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 29,
      "line_content": "let bool_result: auto = json::parse(\"true\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bool_result: <explicit_type> = json::parse(\"true\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 32,
      "line_content": "let bool_val_result: auto = json::as_bool(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bool_val_result: <explicit_type> = json::as_bool(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 33,
      "line_content": "let bool_val: auto = match bool_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bool_val: <explicit_type> = match bool_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 43,
      "line_content": "let number_result: auto = json::parse(\"42.5\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let number_result: <explicit_type> = json::parse(\"42.5\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 46,
      "line_content": "let num_val_result: auto = json::as_number(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let num_val_result: <explicit_type> = json::as_number(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 47,
      "line_content": "let num_val: auto = match num_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let num_val: <explicit_type> = match num_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 57,
      "line_content": "let string_result: auto = json::parse('\"Hello, JSON!\"');",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let string_result: <explicit_type> = json::parse('\"Hello, JSON!\"');"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 60,
      "line_content": "let str_val_result: auto = json::as_string(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let str_val_result: <explicit_type> = json::as_string(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 61,
      "line_content": "let str_val: auto = match str_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let str_val: <explicit_type> = match str_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 77,
      "line_content": "fn example_complex_structures() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_complex_structures(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 82,
      "line_content": "let array_result: auto = json::parse(array_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let array_result: <explicit_type> = json::parse(array_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 85,
      "line_content": "let array_result: auto = json::as_array(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let array_result: <explicit_type> = json::as_array(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 86,
      "line_content": "let array: auto = match array_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let array: <explicit_type> = match array_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 93,
      "line_content": "let first_element_result: auto = json::array_get(array, 0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_element_result: <explicit_type> = json::array_get(array, 0);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 94,
      "line_content": "let first_element: auto = match first_element_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_element: <explicit_type> = match first_element_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 98,
      "line_content": "let first_num_result: auto = json::as_number(first_element);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_num_result: <explicit_type> = json::as_number(first_element);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 99,
      "line_content": "let first_num: auto = match first_num_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_num: <explicit_type> = match first_num_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 105,
      "line_content": "let fourth_element_result: auto = json::array_get(array, 3);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fourth_element_result: <explicit_type> = json::array_get(array, 3);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 106,
      "line_content": "let fourth_element: auto = match fourth_element_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fourth_element: <explicit_type> = match fourth_element_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 110,
      "line_content": "let fourth_str_result: auto = json::as_string(fourth_element);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fourth_str_result: <explicit_type> = json::as_string(fourth_element);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 111,
      "line_content": "let fourth_str: auto = match fourth_str_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fourth_str: <explicit_type> = match fourth_str_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 121,
      "line_content": "let object_json: auto = '{;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let object_json: <explicit_type> = '{;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 130,
      "line_content": "let object_result: auto = json::parse(object_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let object_result: <explicit_type> = json::parse(object_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 133,
      "line_content": "let obj_result: auto = json::as_object(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj_result: <explicit_type> = json::as_object(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 134,
      "line_content": "let obj: auto = match obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj: <explicit_type> = match obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 141,
      "line_content": "let name_value_result: auto = json::object_get(obj, \"name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value_result: <explicit_type> = json::object_get(obj, \"name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 142,
      "line_content": "let name_value: auto = match name_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value: <explicit_type> = match name_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 146,
      "line_content": "let name_result: auto = json::as_string(name_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_result: <explicit_type> = json::as_string(name_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 147,
      "line_content": "let name: auto = match name_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name: <explicit_type> = match name_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 153,
      "line_content": "let age_value_result: auto = json::object_get(obj, \"age\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_value_result: <explicit_type> = json::object_get(obj, \"age\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 154,
      "line_content": "let age_value: auto = match age_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_value: <explicit_type> = match age_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 158,
      "line_content": "let age_result: auto = json::as_number(age_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_result: <explicit_type> = json::as_number(age_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 159,
      "line_content": "let age: auto = match age_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age: <explicit_type> = match age_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 165,
      "line_content": "let active_value_result: auto = json::object_get(obj, \"active\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let active_value_result: <explicit_type> = json::object_get(obj, \"active\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 166,
      "line_content": "let active_value: auto = match active_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let active_value: <explicit_type> = match active_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 170,
      "line_content": "let active_result: auto = json::as_bool(active_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let active_result: <explicit_type> = json::as_bool(active_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 171,
      "line_content": "let active: auto = match active_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let active: <explicit_type> = match active_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 187,
      "line_content": "fn example_nested_structures() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_nested_structures(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 190,
      "line_content": "let nested_json: auto = '{;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let nested_json: <explicit_type> = '{;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 217,
      "line_content": "let result: auto = json::parse(nested_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = json::parse(nested_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 220,
      "line_content": "let root_obj_result: auto = json::as_object(root_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let root_obj_result: <explicit_type> = json::as_object(root_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 221,
      "line_content": "let root_obj: auto = match root_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let root_obj: <explicit_type> = match root_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 227,
      "line_content": "let user_value_result: auto = json::object_get(root_obj, \"user\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let user_value_result: <explicit_type> = json::object_get(root_obj, \"user\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 228,
      "line_content": "let user_value: auto = match user_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let user_value: <explicit_type> = match user_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 232,
      "line_content": "let user_obj_result: auto = json::as_object(user_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let user_obj_result: <explicit_type> = json::as_object(user_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 233,
      "line_content": "let user_obj: auto = match user_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let user_obj: <explicit_type> = match user_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 238,
      "line_content": "let profile_value_result: auto = json::object_get(user_obj, \"profile\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let profile_value_result: <explicit_type> = json::object_get(user_obj, \"profile\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 239,
      "line_content": "let profile_value: auto = match profile_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let profile_value: <explicit_type> = match profile_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 243,
      "line_content": "let profile_obj_result: auto = json::as_object(profile_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let profile_obj_result: <explicit_type> = json::as_object(profile_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 244,
      "line_content": "let profile_obj: auto = match profile_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let profile_obj: <explicit_type> = match profile_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 249,
      "line_content": "let name_value_result: auto = json::object_get(profile_obj, \"name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value_result: <explicit_type> = json::object_get(profile_obj, \"name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 250,
      "line_content": "let name_value: auto = match name_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value: <explicit_type> = match name_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 254,
      "line_content": "let name_result: auto = json::as_string(name_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_result: <explicit_type> = json::as_string(name_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 255,
      "line_content": "let name: auto = match name_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name: <explicit_type> = match name_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 262,
      "line_content": "let prefs_value_result: auto = json::object_get(profile_obj, \"preferences\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prefs_value_result: <explicit_type> = json::object_get(profile_obj, \"preferences\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 263,
      "line_content": "let prefs_value: auto = match prefs_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prefs_value: <explicit_type> = match prefs_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 267,
      "line_content": "let prefs_obj_result: auto = json::as_object(prefs_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prefs_obj_result: <explicit_type> = json::as_object(prefs_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 268,
      "line_content": "let prefs_obj: auto = match prefs_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prefs_obj: <explicit_type> = match prefs_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 273,
      "line_content": "let theme_value_result: auto = json::object_get(prefs_obj, \"theme\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let theme_value_result: <explicit_type> = json::object_get(prefs_obj, \"theme\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 274,
      "line_content": "let theme_value: auto = match theme_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let theme_value: <explicit_type> = match theme_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 278,
      "line_content": "let theme_result: auto = json::as_string(theme_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let theme_result: <explicit_type> = json::as_string(theme_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 279,
      "line_content": "let theme: auto = match theme_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let theme: <explicit_type> = match theme_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 286,
      "line_content": "let roles_value_result: auto = json::object_get(user_obj, \"roles\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let roles_value_result: <explicit_type> = json::object_get(user_obj, \"roles\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 287,
      "line_content": "let roles_value: auto = match roles_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let roles_value: <explicit_type> = match roles_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 291,
      "line_content": "let roles_array_result: auto = json::as_array(roles_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let roles_array_result: <explicit_type> = json::as_array(roles_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 292,
      "line_content": "let roles_array: auto = match roles_array_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let roles_array: <explicit_type> = match roles_array_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 298,
      "line_content": "let first_role_value_result: auto = json::array_get(roles_array, 0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_role_value_result: <explicit_type> = json::array_get(roles_array, 0);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 299,
      "line_content": "let first_role_value: auto = match first_role_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_role_value: <explicit_type> = match first_role_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 303,
      "line_content": "let first_role_result: auto = json::as_string(first_role_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_role_result: <explicit_type> = json::as_string(first_role_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 304,
      "line_content": "let first_role: auto = match first_role_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let first_role: <explicit_type> = match first_role_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 320,
      "line_content": "fn example_serialization() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_serialization(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 329,
      "line_content": "let simple_value: auto = json::JSONValue.Object(simple_obj);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let simple_value: <explicit_type> = json::JSONValue.Object(simple_obj);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 330,
      "line_content": "let simple_json_result: auto = json::stringify(simple_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let simple_json_result: <explicit_type> = json::stringify(simple_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 331,
      "line_content": "let simple_json: auto = match simple_json_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let simple_json: <explicit_type> = match simple_json_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 366,
      "line_content": "let complex_value: auto = json::JSONValue.Object(user);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let complex_value: <explicit_type> = json::JSONValue.Object(user);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 367,
      "line_content": "let complex_json_result: auto = json::stringify(complex_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let complex_json_result: <explicit_type> = json::stringify(complex_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 368,
      "line_content": "let complex_json: auto = match complex_json_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let complex_json: <explicit_type> = match complex_json_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 381,
      "line_content": "fn example_pretty_printing() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_pretty_printing(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 404,
      "line_content": "let data_value: auto = json::JSONValue.Object(data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data_value: <explicit_type> = json::JSONValue.Object(data);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 407,
      "line_content": "let pretty_config: auto = json::JSONSerializeConfig {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pretty_config: <explicit_type> = json::JSONSerializeConfig {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 415,
      "line_content": "let pretty_json_result: auto = json::stringify_with_config(data_value, pretty_config);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pretty_json_result: <explicit_type> = json::stringify_with_config(data_value, pretty_config);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 416,
      "line_content": "let pretty_json: auto = match pretty_json_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pretty_json: <explicit_type> = match pretty_json_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 430,
      "line_content": "fn example_error_handling() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_error_handling(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 446,
      "line_content": "let test_json: auto = test_cases[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let test_json: <explicit_type> = test_cases[i];"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 449,
      "line_content": "let result: auto = json::parse(test_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = json::parse(test_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 487,
      "line_content": "fn example_custom_configuration() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_custom_configuration(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 491,
      "line_content": "let relaxed_config: auto = json::JSONConfig {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let relaxed_config: <explicit_type> = json::JSONConfig {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 501,
      "line_content": "let config_json: auto = '{;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let config_json: <explicit_type> = '{;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 520,
      "line_content": "let result: auto = json::parse_with_config(config_json, relaxed_config);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = json::parse_with_config(config_json, relaxed_config);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 524,
      "line_content": "let obj_result: auto = json::as_object(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj_result: <explicit_type> = json::as_object(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 525,
      "line_content": "let obj: auto = match obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj: <explicit_type> = match obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 531,
      "line_content": "let db_value_result: auto = json::object_get(obj, \"database\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let db_value_result: <explicit_type> = json::object_get(obj, \"database\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 532,
      "line_content": "let db_value: auto = match db_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let db_value: <explicit_type> = match db_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 536,
      "line_content": "let db_obj_result: auto = json::as_object(db_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let db_obj_result: <explicit_type> = json::as_object(db_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 537,
      "line_content": "let db_obj: auto = match db_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let db_obj: <explicit_type> = match db_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 542,
      "line_content": "let host_value_result: auto = json::object_get(db_obj, \"host\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host_value_result: <explicit_type> = json::object_get(db_obj, \"host\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 543,
      "line_content": "let host_value: auto = match host_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host_value: <explicit_type> = match host_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 547,
      "line_content": "let host_result: auto = json::as_string(host_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host_result: <explicit_type> = json::as_string(host_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 548,
      "line_content": "let host: auto = match host_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host: <explicit_type> = match host_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 554,
      "line_content": "let port_value_result: auto = json::object_get(db_obj, \"port\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port_value_result: <explicit_type> = json::object_get(db_obj, \"port\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 555,
      "line_content": "let port_value: auto = match port_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port_value: <explicit_type> = match port_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 559,
      "line_content": "let port_result: auto = json::as_number(port_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port_result: <explicit_type> = json::as_number(port_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 560,
      "line_content": "let port: auto = match port_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port: <explicit_type> = match port_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 576,
      "line_content": "fn example_type_safety() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_type_safety(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 579,
      "line_content": "let mixed_json: auto = '{;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let mixed_json: <explicit_type> = '{;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 588,
      "line_content": "let result: auto = json::parse(mixed_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = json::parse(mixed_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 591,
      "line_content": "let obj_result: auto = json::as_object(value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj_result: <explicit_type> = json::as_object(value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 592,
      "line_content": "let obj: auto = match obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let obj: <explicit_type> = match obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 598,
      "line_content": "let string_value_result: auto = json::object_get(obj, \"string_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let string_value_result: <explicit_type> = json::object_get(obj, \"string_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 599,
      "line_content": "let string_value: auto = match string_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let string_value: <explicit_type> = match string_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 604,
      "line_content": "let str_val_result: auto = json::as_string(string_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let str_val_result: <explicit_type> = json::as_string(string_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 605,
      "line_content": "let str_val: auto = match str_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let str_val: <explicit_type> = match str_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 612,
      "line_content": "let number_value_result: auto = json::object_get(obj, \"number_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let number_value_result: <explicit_type> = json::object_get(obj, \"number_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 613,
      "line_content": "let number_value: auto = match number_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let number_value: <explicit_type> = match number_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 618,
      "line_content": "let num_val_result: auto = json::as_number(number_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let num_val_result: <explicit_type> = json::as_number(number_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 619,
      "line_content": "let num_val: auto = match num_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let num_val: <explicit_type> = match num_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 626,
      "line_content": "let boolean_value_result: auto = json::object_get(obj, \"boolean_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let boolean_value_result: <explicit_type> = json::object_get(obj, \"boolean_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 627,
      "line_content": "let boolean_value: auto = match boolean_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let boolean_value: <explicit_type> = match boolean_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 632,
      "line_content": "let bool_val_result: auto = json::as_bool(boolean_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bool_val_result: <explicit_type> = json::as_bool(boolean_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 633,
      "line_content": "let bool_val: auto = match bool_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bool_val: <explicit_type> = match bool_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 640,
      "line_content": "let null_value_result: auto = json::object_get(obj, \"null_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let null_value_result: <explicit_type> = json::object_get(obj, \"null_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 641,
      "line_content": "let null_value: auto = match null_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let null_value: <explicit_type> = match null_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 649,
      "line_content": "let array_value_result: auto = json::object_get(obj, \"array_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let array_value_result: <explicit_type> = json::object_get(obj, \"array_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 650,
      "line_content": "let array_value: auto = match array_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let array_value: <explicit_type> = match array_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 655,
      "line_content": "let arr_result: auto = json::as_array(array_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let arr_result: <explicit_type> = json::as_array(array_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 656,
      "line_content": "let arr: auto = match arr_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let arr: <explicit_type> = match arr_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 663,
      "line_content": "let object_value_result: auto = json::object_get(obj, \"object_field\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let object_value_result: <explicit_type> = json::object_get(obj, \"object_field\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 664,
      "line_content": "let object_value: auto = match object_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let object_value: <explicit_type> = match object_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 669,
      "line_content": "let nested_obj_result: auto = json::as_object(object_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let nested_obj_result: <explicit_type> = json::as_object(object_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 670,
      "line_content": "let nested_obj: auto = match nested_obj_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let nested_obj: <explicit_type> = match nested_obj_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 678,
      "line_content": "let type_mismatch_result: auto = json::as_number(string_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let type_mismatch_result: <explicit_type> = json::as_number(string_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 699,
      "line_content": "fn example_manipulation() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_manipulation(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 717,
      "line_content": "let modified_value_result: auto = json::array_get(dynamic_array, 1);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let modified_value_result: <explicit_type> = json::array_get(dynamic_array, 1);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 718,
      "line_content": "let modified_value: auto = match modified_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let modified_value: <explicit_type> = match modified_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 722,
      "line_content": "let modified_num_result: auto = json::as_number(modified_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let modified_num_result: <explicit_type> = json::as_number(modified_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 723,
      "line_content": "let modified_num: auto = match modified_num_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let modified_num: <explicit_type> = match modified_num_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 748,
      "line_content": "let updated_count_result: auto = json::object_get(dynamic_object, \"count\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let updated_count_result: <explicit_type> = json::object_get(dynamic_object, \"count\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 749,
      "line_content": "let updated_count: auto = match updated_count_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let updated_count: <explicit_type> = match updated_count_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 753,
      "line_content": "let count_val_result: auto = json::as_number(updated_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let count_val_result: <explicit_type> = json::as_number(updated_count);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 754,
      "line_content": "let count_val: auto = match count_val_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let count_val: <explicit_type> = match count_val_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 767,
      "line_content": "let final_value: auto = json::JSONValue.Object(dynamic_object);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_value: <explicit_type> = json::JSONValue.Object(dynamic_object);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 768,
      "line_content": "let final_json_result: auto = json::stringify(final_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_json_result: <explicit_type> = json::stringify(final_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 769,
      "line_content": "let final_json: auto = match final_json_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_json: <explicit_type> = match final_json_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 782,
      "line_content": "fn example_json_path_queries() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_json_path_queries(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 785,
      "line_content": "let complex_json: auto = '{;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let complex_json: <explicit_type> = '{;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 811,
      "line_content": "let root_result: auto = json::parse(complex_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let root_result: <explicit_type> = json::parse(complex_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 812,
      "line_content": "let root: auto = match root_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let root: <explicit_type> = match root_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 818,
      "line_content": "let company_name_result: auto = json::json_path_get(root, \"company.name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let company_name_result: <explicit_type> = json::json_path_get(root, \"company.name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 821,
      "line_content": "let name_result: auto = json::as_string(name_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_result: <explicit_type> = json::as_string(name_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 822,
      "line_content": "let name: auto = match name_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name: <explicit_type> = match name_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 832,
      "line_content": "let dept_name_result: auto = json::json_path_get(root, \"company.departments.0.name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dept_name_result: <explicit_type> = json::json_path_get(root, \"company.departments.0.name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 835,
      "line_content": "let dept_name_result: auto = json::as_string(dept_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dept_name_result: <explicit_type> = json::as_string(dept_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 836,
      "line_content": "let dept_name: auto = match dept_name_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dept_name: <explicit_type> = match dept_name_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 846,
      "line_content": "let employee_result: auto = json::json_path_get(root, \"company.departments.0.employees.0.name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let employee_result: <explicit_type> = json::json_path_get(root, \"company.departments.0.employees.0.name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 849,
      "line_content": "let emp_name_result: auto = json::as_string(emp_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let emp_name_result: <explicit_type> = json::as_string(emp_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 850,
      "line_content": "let emp_name: auto = match emp_name_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let emp_name: <explicit_type> = match emp_name_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 860,
      "line_content": "let founded_result: auto = json::json_path_get(root, \"company.metadata.founded\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let founded_result: <explicit_type> = json::json_path_get(root, \"company.metadata.founded\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 863,
      "line_content": "let founded_year_result: auto = json::as_number(founded_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let founded_year_result: <explicit_type> = json::as_number(founded_value);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 864,
      "line_content": "let founded_year: auto = match founded_year_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let founded_year: <explicit_type> = match founded_year_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 880,
      "line_content": "fn example_schema_validation() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_schema_validation(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 884,
      "line_content": "let name_schema: auto = json::JSONSchema {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_schema: <explicit_type> = json::JSONSchema {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 894,
      "line_content": "let age_schema: auto = json::JSONSchema {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_schema: <explicit_type> = json::JSONSchema {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 906,
      "line_content": "let valid_user_result: auto = json::parse(valid_user_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let valid_user_result: <explicit_type> = json::parse(valid_user_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 907,
      "line_content": "let valid_user: auto = match valid_user_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let valid_user: <explicit_type> = match valid_user_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 913,
      "line_content": "let name_value_result: auto = json::json_path_get(valid_user, \"name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value_result: <explicit_type> = json::json_path_get(valid_user, \"name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 914,
      "line_content": "let name_value: auto = match name_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_value: <explicit_type> = match name_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 918,
      "line_content": "let name_valid_result: auto = json::validate_schema(name_value, name_schema);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_valid_result: <explicit_type> = json::validate_schema(name_value, name_schema);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 919,
      "line_content": "let name_valid: auto = match name_valid_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_valid: <explicit_type> = match name_valid_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 930,
      "line_content": "let age_value_result: auto = json::json_path_get(valid_user, \"age\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_value_result: <explicit_type> = json::json_path_get(valid_user, \"age\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 931,
      "line_content": "let age_value: auto = match age_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_value: <explicit_type> = match age_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 935,
      "line_content": "let age_valid_result: auto = json::validate_schema(age_value, age_schema);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_valid_result: <explicit_type> = json::validate_schema(age_value, age_schema);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 936,
      "line_content": "let age_valid: auto = match age_valid_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let age_valid: <explicit_type> = match age_valid_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 948,
      "line_content": "let invalid_user_result: auto = json::parse(invalid_user_json);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_user_result: <explicit_type> = json::parse(invalid_user_json);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 949,
      "line_content": "let invalid_user: auto = match invalid_user_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_user: <explicit_type> = match invalid_user_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 954,
      "line_content": "let invalid_name_value_result: auto = json::json_path_get(invalid_user, \"name\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_name_value_result: <explicit_type> = json::json_path_get(invalid_user, \"name\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 955,
      "line_content": "let invalid_name_value: auto = match invalid_name_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_name_value: <explicit_type> = match invalid_name_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 959,
      "line_content": "let invalid_name_valid_result: auto = json::validate_schema(invalid_name_value, name_schema);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_name_valid_result: <explicit_type> = json::validate_schema(invalid_name_value, name_schema);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 960,
      "line_content": "let invalid_name_valid: auto = match invalid_name_valid_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_name_valid: <explicit_type> = match invalid_name_valid_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 968,
      "line_content": "let invalid_age_value_result: auto = json::json_path_get(invalid_user, \"age\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_age_value_result: <explicit_type> = json::json_path_get(invalid_user, \"age\");"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 969,
      "line_content": "let invalid_age_value: auto = match invalid_age_value_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_age_value: <explicit_type> = match invalid_age_value_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 973,
      "line_content": "let invalid_age_valid_result: auto = json::validate_schema(invalid_age_value, age_schema);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_age_valid_result: <explicit_type> = json::validate_schema(invalid_age_value, age_schema);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 974,
      "line_content": "let invalid_age_valid: auto = match invalid_age_valid_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_age_valid: <explicit_type> = match invalid_age_valid_result {;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 989,
      "line_content": "fn example_streaming_parser() -> Result<void, json::JSONError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_streaming_parser(none) -> Result<void, json::JSONError> {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 992,
      "line_content": "let config: auto = json::default_config();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let config: <explicit_type> = json::default_config();"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 996,
      "line_content": "let chunks: auto = [;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunks: <explicit_type> = [;"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 1005,
      "line_content": "let chunk_bytes: auto = string::to_utf8(chunks[i]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_bytes: <explicit_type> = string::to_utf8(chunks[i]);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 1006,
      "line_content": "let feed_result: auto = json::stream_parser_feed(&mut parser, chunk_bytes);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let feed_result: <explicit_type> = json::stream_parser_feed(&mut parser, chunk_bytes);"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 1026,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 1050,
      "line_content": "let example_fn: auto = examples[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let example_fn: <explicit_type> = examples[i];"
    },
    {
      "file_path": "examples/json_examples.asthra",
      "line_number": 1051,
      "line_content": "let result: auto = example_fn();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = example_fn();"
    },
    {
      "file_path": "examples/hello_world.asthra",
      "line_number": 6,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/import_alias_examples.asthra",
      "line_number": 34,
      "line_content": "fn demonstrate_current_limitations() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_current_limitations(none) -> i32 {"
    },
    {
      "file_path": "examples/import_alias_examples.asthra",
      "line_number": 64,
      "line_content": "fn working_example() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn working_example(none) -> i32 {"
    },
    {
      "file_path": "examples/import_alias_examples.asthra",
      "line_number": 98,
      "line_content": "fn future_working_example() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn future_working_example(none) -> i32 {"
    },
    {
      "file_path": "examples/import_alias_examples.asthra",
      "line_number": 144,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 12,
      "line_content": "let result: auto = libc::safe_open(filename, libc::O_RDONLY, 0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = libc::safe_open(filename, libc::O_RDONLY, 0);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 42,
      "line_content": "let result: auto = libc::safe_mkdir(dirname, 0o755);  // rwxr-xr-x permissions;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = libc::safe_mkdir(dirname, 0o755);  // rwxr-xr-x permissions;"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 63,
      "line_content": "let buffer: auto = [0u8; 1024];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let buffer: <explicit_type> = [0u8; 1024];"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 66,
      "line_content": "let read_operation: auto = fn() -> Result<usize, error::FFIError> {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let read_operation: <explicit_type> = fn() -> Result<usize, error::FFIError> {;"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 67,
      "line_content": "let result: auto = libc::safe_read(fd, buffer);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = libc::safe_read(fd, buffer);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 75,
      "line_content": "let result: auto = error::retry(read_operation, 3);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = error::retry(read_operation, 3);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 85,
      "line_content": "let data: auto = string::from_bytes(buffer[0:bytes_read]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = string::from_bytes(buffer[0:bytes_read]);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 96,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 102,
      "line_content": "let _: auto = try_open_file(\"non_existent_file.txt\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let _: <explicit_type> = try_open_file(\"non_existent_file.txt\");"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 109,
      "line_content": "let fd_result: auto = libc::safe_open(filename, libc::O_CREAT | libc::O_WRONLY | libc::O_TRUNC, 0o644);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fd_result: <explicit_type> = libc::safe_open(filename, libc::O_CREAT | libc::O_WRONLY | libc::O_TRUNC, 0o644);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 115,
      "line_content": "let write_result: auto = libc::safe_write(fd, data.bytes());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let write_result: <explicit_type> = libc::safe_write(fd, data.bytes());"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 127,
      "line_content": "let _: auto = libc::safe_close(fd);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let _: <explicit_type> = libc::safe_close(fd);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 130,
      "line_content": "let read_fd_result: auto = try_open_file(filename);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let read_fd_result: <explicit_type> = try_open_file(filename);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 135,
      "line_content": "let read_result: auto = retry_read_example(read_fd);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let read_result: <explicit_type> = retry_read_example(read_fd);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 147,
      "line_content": "let _: auto = libc::safe_close(read_fd);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let _: <explicit_type> = libc::safe_close(read_fd);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 155,
      "line_content": "let unlink_result: auto = libc::safe_unlink(filename);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let unlink_result: <explicit_type> = libc::safe_unlink(filename);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 175,
      "line_content": "let dir_result: auto = try_create_directory(dirname);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dir_result: <explicit_type> = try_create_directory(dirname);"
    },
    {
      "file_path": "examples/ffi_error_example.asthra",
      "line_number": 178,
      "line_content": "let rmdir_result: auto = libc::safe_rmdir(dirname);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rmdir_result: <explicit_type> = libc::safe_rmdir(dirname);"
    },
    {
      "file_path": "examples/test_types.asthra",
      "line_number": 3,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 16,
      "line_content": "fn demonstrate_task_handles() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_task_handles(none) -> void {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 31,
      "line_content": "log(\"Fibonacci(10) = {result1}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Fibonacci(10) =\" + result1 + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 32,
      "line_content": "log(\"Fibonacci(15) = {result2}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Fibonacci(15) =\" + result2 + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 33,
      "line_content": "log(\"Fibonacci(20) = {result3}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Fibonacci(20) =\" + result3 + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 38,
      "line_content": "log(\"Producer starting: {start} to {start + count}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Producer starting:\" + start + \"to\" + start + count + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 42,
      "line_content": "log(\"Sent: {i}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Sent:\" + i + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 49,
      "line_content": "log(\"Consumer {consumer_id} starting\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Consumer\" + consumer_id + \"starting\");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 53,
      "line_content": "log(\"Consumer {consumer_id} received: {value}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Consumer\" + consumer_id + \"received:\" + value + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 56,
      "line_content": "log(\"Consumer {consumer_id} finished\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Consumer\" + consumer_id + \"finished\");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 59,
      "line_content": "fn demonstrate_channels() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_channels(none) -> void {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 104,
      "line_content": "log(\"String producer sent: {msg}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"String producer sent:\" + msg + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 111,
      "line_content": "log(\"Number producer sent: {i * 10}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Number producer sent:\" + i * 10 + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 115,
      "line_content": "fn demonstrate_select() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_select(none) -> void {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 142,
      "line_content": "log(\"Result: {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Result:\" + result + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 156,
      "line_content": "log(\"Stage 1: {value} -> {processed}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Stage 1:\" + value + \"->\" + processed + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 169,
      "line_content": "log(\"Stage 2: {value} -> {processed}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Stage 2:\" + value + \"->\" + processed + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 182,
      "line_content": "log(\"Stage 3: {value} -> {processed}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Stage 3:\" + value + \"->\" + processed + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 188,
      "line_content": "fn demonstrate_pipeline() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_pipeline(none) -> void {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 221,
      "line_content": "log(\"Fed into pipeline: {value}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Fed into pipeline:\" + value + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 232,
      "line_content": "log(\"Pipeline output: {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Pipeline output:\" + result + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 240,
      "line_content": "log(\"Worker {worker_id} starting\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Worker\" + worker_id + \"starting\");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 246,
      "line_content": "log(\"Worker {worker_id}: {work_item} -> {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Worker\" + worker_id + \":\" + work_item + \"->\" + result + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 249,
      "line_content": "log(\"Worker {worker_id} finished\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Worker\" + worker_id + \"finished\");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 252,
      "line_content": "fn demonstrate_fan_out_fan_in() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_fan_out_fan_in(none) -> void {"
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 282,
      "line_content": "log(\"Queued work item: {i}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Queued work item:\" + i + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 293,
      "line_content": "log(\"Collected result: {result}\");",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"log(\"Collected result:\" + result + \");\""
    },
    {
      "file_path": "examples/advanced_concurrency_example.asthra",
      "line_number": 300,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_demo.asthra",
      "line_number": 3,
      "line_content": "fn worker_a() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn worker_a(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_demo.asthra",
      "line_number": 9,
      "line_content": "fn worker_b() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn worker_b(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_demo.asthra",
      "line_number": 15,
      "line_content": "fn worker_c() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn worker_c(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_demo.asthra",
      "line_number": 21,
      "line_content": "fn background_logger() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn background_logger(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency_demo.asthra",
      "line_number": 27,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/ffi_example.asthra",
      "line_number": 25,
      "line_content": "fn demonstrate_ffi() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_ffi(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/ffi_example.asthra",
      "line_number": 51,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 10,
      "line_content": "fn tokio_runtime_new() -> *mut TokioRuntime;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tokio_runtime_new(none) -> *mut TokioRuntime;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 36,
      "line_content": "fn example_tokio_high_performance() -> Result<PerformanceMetrics, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_tokio_high_performance(none) -> Result<PerformanceMetrics, string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 39,
      "line_content": "let runtime: auto = tokio_runtime_new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let runtime: <explicit_type> = tokio_runtime_new();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 49,
      "line_content": "let handle: auto = tokio_spawn(runtime, move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = tokio_spawn(runtime, move || {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 57,
      "line_content": "let start_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 60,
      "line_content": "let results: auto = tokio_await_all(runtime, handles);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = tokio_await_all(runtime, handles);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 61,
      "line_content": "match .map_err(|e| format!(\"Tokio await failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Tokio await failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 66,
      "line_content": "let end_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 67,
      "line_content": "let total_time: auto = end_time - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_time: <explicit_type> = end_time - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 72,
      "line_content": "let metrics: auto = PerformanceMetrics {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let metrics: <explicit_type> = PerformanceMetrics {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 80,
      "line_content": "println(\"Tokio performance: {} tasks in {} ms ({:.2} tasks/sec)\",",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"Tokio performance: {} tasks in {} ms (\" + :.2 + \"tasks/sec)\",\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 119,
      "line_content": "fn example_rayon_parallel_processing() -> Result<ProcessingResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_rayon_parallel_processing(none) -> Result<ProcessingResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 123,
      "line_content": "let pool: auto = rayon_init_thread_pool(thread_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = rayon_init_thread_pool(thread_count);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 127,
      "line_content": "let data: auto = generate_large_dataset(data_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = generate_large_dataset(data_size);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 131,
      "line_content": "let start_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 134,
      "line_content": "let mapped_data: auto = rayon_par_iter_map(pool, data.clone(), |x| x * x);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let mapped_data: <explicit_type> = rayon_par_iter_map(pool, data.clone(), |x| x * x);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 135,
      "line_content": "let map_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let map_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 138,
      "line_content": "let filtered_data: auto = rayon_par_iter_filter_map(pool, mapped_data, |x| {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let filtered_data: <explicit_type> = rayon_par_iter_filter_map(pool, mapped_data, |x| {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 145,
      "line_content": "let filter_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let filter_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 148,
      "line_content": "let sum: auto = rayon_par_iter_reduce(pool, filtered_data.clone(), 0, |a, b| a + b);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let sum: <explicit_type> = rayon_par_iter_reduce(pool, filtered_data.clone(), 0, |a, b| a + b);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 149,
      "line_content": "let reduce_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let reduce_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 154,
      "line_content": "let results: auto = ProcessingResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = ProcessingResults {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 167,
      "line_content": "println(\"Performance: {:.2} elements/ms\", results.throughput_elements_per_ms);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"Performance:\" + :.2 + \"elements/ms\", results.throughput_elements_per_ms);\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 197,
      "line_content": "fn actix_system_new() -> ActixSystem;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn actix_system_new(none) -> ActixSystem;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 217,
      "line_content": "fn example_actor_system() -> Result<ActorSystemResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_actor_system(none) -> Result<ActorSystemResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 220,
      "line_content": "let system: auto = actix_system_new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let system: <explicit_type> = actix_system_new();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 223,
      "line_content": "let worker_actors: auto = create_worker_actors(system, 5);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let worker_actors: <explicit_type> = create_worker_actors(system, 5);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 224,
      "line_content": "let coordinator_actor: auto = create_coordinator_actor(system);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let coordinator_actor: <explicit_type> = create_coordinator_actor(system);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 225,
      "line_content": "let monitor_actor: auto = create_monitor_actor(system);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let monitor_actor: <explicit_type> = create_monitor_actor(system);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 229,
      "line_content": "let start_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 232,
      "line_content": "let work_items: auto = generate_work_messages(100);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let work_items: <explicit_type> = generate_work_messages(100);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 236,
      "line_content": "let target_actor: auto = worker_actors[index % worker_actors.len()];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let target_actor: <explicit_type> = worker_actors[index % worker_actors.len()];"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 237,
      "line_content": "let future: auto = actix_send_message(target_actor, work_item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let future: <explicit_type> = actix_send_message(target_actor, work_item);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 242,
      "line_content": "let monitor_message: auto = create_monitor_message(\"track_progress\", work_items.len());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let monitor_message: <explicit_type> = create_monitor_message(\"track_progress\", work_items.len());"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 246,
      "line_content": "let coordination_message: auto = create_coordination_message(\"await_completion\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let coordination_message: <explicit_type> = create_coordination_message(\"await_completion\");"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 247,
      "line_content": "let completion_future: auto = actix_send_message(coordinator_actor, coordination_message);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let completion_future: <explicit_type> = actix_send_message(coordinator_actor, coordination_message);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 250,
      "line_content": "let processing_time: auto = simulate_actor_processing_time(work_items.len());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processing_time: <explicit_type> = simulate_actor_processing_time(work_items.len());"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 252,
      "line_content": "let end_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 257,
      "line_content": "let results: auto = ActorSystemResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = ActorSystemResults {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 282,
      "line_content": "let worker: auto = create_worker_actor(i);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let worker: <explicit_type> = create_worker_actor(i);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 283,
      "line_content": "let addr: auto = actix_spawn_actor(system, worker);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let addr: <explicit_type> = actix_spawn_actor(system, worker);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 296,
      "line_content": "let coordinator: auto = create_actor_with_role(\"coordinator\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let coordinator: <explicit_type> = create_actor_with_role(\"coordinator\");"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 301,
      "line_content": "let monitor: auto = create_actor_with_role(\"monitor\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let monitor: <explicit_type> = create_actor_with_role(\"monitor\");"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 308,
      "line_content": "let message: auto = create_work_message(i, format!(\"work_data_{}\", i));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let message: <explicit_type> = create_work_message(i, format!(\"work_data_{}\", i));"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 320,
      "line_content": "fn MPI_Init() -> Result<(), MPIError>;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn MPI_Init(none) -> Result<(), MPIError>;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 321,
      "line_content": "fn MPI_Finalize() -> Result<(), MPIError>;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn MPI_Finalize(none) -> Result<(), MPIError>;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 345,
      "line_content": "fn example_distributed_computing() -> Result<DistributedResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_distributed_computing(none) -> Result<DistributedResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 349,
      "line_content": "match MPI_Init().map_err(|e| format!(\"MPI initialization failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match MPI_Init().map_err(|e| format!(\"MPI initialization failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 354,
      "line_content": "let rank: auto = MPI_Comm_rank(MPI_COMM_WORLD);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rank: <explicit_type> = MPI_Comm_rank(MPI_COMM_WORLD);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 355,
      "line_content": "match .map_err(|e| format!(\"Failed to get MPI rank: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to get MPI rank:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 359,
      "line_content": "let size: auto = MPI_Comm_size(MPI_COMM_WORLD);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let size: <explicit_type> = MPI_Comm_size(MPI_COMM_WORLD);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 360,
      "line_content": "match .map_err(|e| format!(\"Failed to get MPI size: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to get MPI size:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 367,
      "line_content": "let start_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 370,
      "line_content": "let results: auto = if rank == 0 {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = if rank == 0 {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 381,
      "line_content": "let end_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 384,
      "line_content": "match MPI_Finalize().map_err(|e| format!(\"MPI finalization failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match MPI_Finalize().map_err(|e| format!(\"MPI finalization failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 389,
      "line_content": "let distributed_results: auto = DistributedResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let distributed_results: <explicit_type> = DistributedResults {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 425,
      "line_content": "let work_size_ptr: auto = &work_size as *const i32 as *mut void;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let work_size_ptr: <explicit_type> = &work_size as *const i32 as *mut void;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 427,
      "line_content": "match .map_err(|e| format!(\"Broadcast failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Broadcast failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 433,
      "line_content": "let local_result: auto = distributed_computation_chunk(0, work_size / size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let local_result: <explicit_type> = distributed_computation_chunk(0, work_size / size);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 439,
      "line_content": "let worker_result_ptr: auto = &mut worker_result as *mut i32 as *mut void;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let worker_result_ptr: <explicit_type> = &mut worker_result as *mut i32 as *mut void;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 442,
      "line_content": "match .map_err(|e| format!(\"Receive from worker {} failed: {:?}\", worker_rank, e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Receive from worker {} failed:\" + :? + \", worker_rank, e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 462,
      "line_content": "let work_size_ptr: auto = &mut work_size as *mut i32 as *mut void;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let work_size_ptr: <explicit_type> = &mut work_size as *mut i32 as *mut void;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 464,
      "line_content": "match .map_err(|e| format!(\"Broadcast receive failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Broadcast receive failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 470,
      "line_content": "let chunk_size: auto = work_size / size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_size: <explicit_type> = work_size / size;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 471,
      "line_content": "let start_index: auto = rank * chunk_size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_index: <explicit_type> = rank * chunk_size;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 472,
      "line_content": "let local_result: auto = distributed_computation_chunk(start_index, chunk_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let local_result: <explicit_type> = distributed_computation_chunk(start_index, chunk_size);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 475,
      "line_content": "let local_result_ptr: auto = &local_result as *const i32 as *mut void;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let local_result_ptr: <explicit_type> = &local_result as *const i32 as *mut void;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 477,
      "line_content": "match .map_err(|e| format!(\"Send to master failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Send to master failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 518,
      "line_content": "fn cuda_device_count() -> Result<i32, CudaError>;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn cuda_device_count(none) -> Result<i32, CudaError>;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 525,
      "line_content": "fn cuda_device_synchronize() -> Result<(), CudaError>;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn cuda_device_synchronize(none) -> Result<(), CudaError>;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 536,
      "line_content": "fn example_gpu_computing() -> Result<GPUResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_gpu_computing(none) -> Result<GPUResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 540,
      "line_content": "let device_count: auto = cuda_device_count();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let device_count: <explicit_type> = cuda_device_count();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 541,
      "line_content": "match .map_err(|e| format!(\"Failed to get CUDA device count: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to get CUDA device count:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 554,
      "line_content": "match .map_err(|e| format!(\"Failed to set CUDA device: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to set CUDA device:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 560,
      "line_content": "let data_bytes: auto = data_size * 4; // 4 bytes per i32;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data_bytes: <explicit_type> = data_size * 4; // 4 bytes per i32;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 563,
      "line_content": "let host_input: auto = generate_gpu_input_data(data_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host_input: <explicit_type> = generate_gpu_input_data(data_size);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 567,
      "line_content": "let device_input: auto = cuda_malloc(data_bytes as usize);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let device_input: <explicit_type> = cuda_malloc(data_bytes as usize);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 568,
      "line_content": "match .map_err(|e| format!(\"Failed to allocate device input memory: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to allocate device input memory:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 572,
      "line_content": "let device_output: auto = cuda_malloc(data_bytes as usize);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let device_output: <explicit_type> = cuda_malloc(data_bytes as usize);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 573,
      "line_content": "match .map_err(|e| format!(\"Failed to allocate device output memory: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Failed to allocate device output memory:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 578,
      "line_content": "let start_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 585,
      "line_content": "match ).map_err(|e| format!(\"Failed to copy data to device: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match ).map_err(|e| format!(\"Failed to copy data to device:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 590,
      "line_content": "let copy_to_device_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let copy_to_device_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 593,
      "line_content": "let kernel: auto = load_vector_add_kernel();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let kernel: <explicit_type> = load_vector_add_kernel();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 595,
      "line_content": "let grid_size: auto = (data_size + block_size - 1) / block_size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let grid_size: <explicit_type> = (data_size + block_size - 1) / block_size;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 602,
      "line_content": "match ).map_err(|e| format!(\"Failed to launch kernel: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match ).map_err(|e| format!(\"Failed to launch kernel:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 609,
      "line_content": "match .map_err(|e| format!(\"Kernel execution failed: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match .map_err(|e| format!(\"Kernel execution failed:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 614,
      "line_content": "let kernel_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let kernel_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 621,
      "line_content": "match ).map_err(|e| format!(\"Failed to copy data from device: {:?}\", e)) {",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"match ).map_err(|e| format!(\"Failed to copy data from device:\" + :? + \", e)) {\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 626,
      "line_content": "let copy_from_device_time: auto = get_system_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let copy_from_device_time: <explicit_type> = get_system_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 632,
      "line_content": "let total_time: auto = copy_from_device_time - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_time: <explicit_type> = copy_from_device_time - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 633,
      "line_content": "let kernel_only_time: auto = kernel_time - copy_to_device_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let kernel_only_time: <explicit_type> = kernel_time - copy_to_device_time;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 636,
      "line_content": "let validation_passed: auto = validate_gpu_results(&host_input, &host_output);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let validation_passed: <explicit_type> = validate_gpu_results(&host_input, &host_output);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 638,
      "line_content": "let results: auto = GPUResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = GPUResults {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 648,
      "line_content": "println(\"GPU computation completed: {} elements in {} ms ({:.2} elements/ms)\",",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"GPU computation completed: {} elements in {} ms (\" + :.2 + \"elements/ms)\",\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 650,
      "line_content": "println(\"Memory bandwidth: {:.2} GB/s\", results.memory_bandwidth_gb_per_s);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"Memory bandwidth:\" + :.2 + \"GB/s\", results.memory_bandwidth_gb_per_s);\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 673,
      "line_content": "fn load_vector_add_kernel() -> CudaKernel {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn load_vector_add_kernel(none) -> CudaKernel {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 685,
      "line_content": "let expected: auto = inp * 2; // Assuming kernel doubles the input;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let expected: <explicit_type> = inp * 2; // Assuming kernel doubles the input;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 696,
      "line_content": "let bytes_per_second: auto = (bytes_transferred as f64) / (time_ms as f64 / 1000.0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bytes_per_second: <explicit_type> = (bytes_transferred as f64) / (time_ms as f64 / 1000.0);"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 704,
      "line_content": "fn get_system_time_ms() -> i64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_system_time_ms(none) -> i64 {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 748,
      "line_content": "fn main() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 755,
      "line_content": "let tokio_results_result: auto = example_tokio_high_performance();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tokio_results_result: <explicit_type> = example_tokio_high_performance();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 756,
      "line_content": "let tokio_results: auto = match tokio_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tokio_results: <explicit_type> = match tokio_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 760,
      "line_content": "println!(\"Tokio achieved {:.2} tasks/second\", tokio_results.tasks_per_second);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println!(\"Tokio achieved\" + :.2 + \"tasks/second\", tokio_results.tasks_per_second);\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 764,
      "line_content": "let rayon_results_result: auto = example_rayon_parallel_processing();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rayon_results_result: <explicit_type> = example_rayon_parallel_processing();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 765,
      "line_content": "let rayon_results: auto = match rayon_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rayon_results: <explicit_type> = match rayon_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 769,
      "line_content": "println!(\"Rayon processed {:.2} elements/ms\", rayon_results.throughput_elements_per_ms);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println!(\"Rayon processed\" + :.2 + \"elements/ms\", rayon_results.throughput_elements_per_ms);\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 773,
      "line_content": "let actor_results_result: auto = example_actor_system();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let actor_results_result: <explicit_type> = example_actor_system();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 774,
      "line_content": "let actor_results: auto = match actor_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let actor_results: <explicit_type> = match actor_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 778,
      "line_content": "println!(\"Actor system achieved {:.2} messages/second\", actor_results.messages_per_second);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println!(\"Actor system achieved\" + :.2 + \"messages/second\", actor_results.messages_per_second);\""
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 782,
      "line_content": "let distributed_results_result: auto = example_distributed_computing();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let distributed_results_result: <explicit_type> = example_distributed_computing();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 783,
      "line_content": "let distributed_results: auto = match distributed_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let distributed_results: <explicit_type> = match distributed_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 792,
      "line_content": "let gpu_results_result: auto = example_gpu_computing();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let gpu_results_result: <explicit_type> = example_gpu_computing();"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 793,
      "line_content": "let gpu_results: auto = match gpu_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let gpu_results: <explicit_type> = match gpu_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier3_external.asthra",
      "line_number": 797,
      "line_content": "println!(\"GPU computation achieved {:.2} GB/s memory bandwidth\",",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println!(\"GPU computation achieved\" + :.2 + \"GB/s memory bandwidth\",\""
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 13,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 37,
      "line_content": "let pool_result: auto = patterns.WorkerPool::<i32>::new(4);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_result: <explicit_type> = patterns.WorkerPool::<i32>::new(4);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 38,
      "line_content": "let pool: auto = match pool_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = match pool_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 83,
      "line_content": "fn tier1_producer_consumer() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tier1_producer_consumer(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 85,
      "line_content": "let data: auto = produce_all_data();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = produce_all_data();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 90,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 99,
      "line_content": "fn produce_all_data() -> Vec<i32> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn produce_all_data(none) -> Vec<i32> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 115,
      "line_content": "fn tier2_producer_consumer() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tier2_producer_consumer(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 116,
      "line_content": "let channel_pair_result: auto = channels.channel_pair<i32>(10);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_pair_result: <explicit_type> = channels.channel_pair<i32>(10);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 123,
      "line_content": "let producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 138,
      "line_content": "let consumer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 143,
      "line_content": "let processed_result: auto = consume_item_advanced(item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processed_result: <explicit_type> = consume_item_advanced(item);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 144,
      "line_content": "let processed: auto = match processed_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processed: <explicit_type> = match processed_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 162,
      "line_content": "let results_result: auto = await consumer;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results_result: <explicit_type> = await consumer;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 163,
      "line_content": "let results: auto = match results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = match results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 192,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 196,
      "line_content": "let result_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 197,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 209,
      "line_content": "let channel_pair_result: auto = channels.channel_pair<i32>(1);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_pair_result: <explicit_type> = channels.channel_pair<i32>(1);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 216,
      "line_content": "let result_result: auto = process_data_go_style(data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = process_data_go_style(data);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 217,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 300,
      "line_content": "fn rust_to_asthra_tier1() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn rust_to_asthra_tier1(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 301,
      "line_content": "let handle: auto = spawn_with_handle expensive_computation();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle expensive_computation();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 302,
      "line_content": "let result_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 303,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 319,
      "line_content": "fn rust_async_to_asthra() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn rust_async_to_asthra(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 320,
      "line_content": "let step1_handle: auto = spawn_with_handle async_step1();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step1_handle: <explicit_type> = spawn_with_handle async_step1();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 321,
      "line_content": "let step1_result_result: auto = await step1_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step1_result_result: <explicit_type> = await step1_handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 322,
      "line_content": "let step1_result: auto = match step1_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step1_result: <explicit_type> = match step1_result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 327,
      "line_content": "let step2_handle: auto = spawn_with_handle async_step2(step1_result);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step2_handle: <explicit_type> = spawn_with_handle async_step2(step1_result);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 328,
      "line_content": "let step2_result_result: auto = await step2_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step2_result_result: <explicit_type> = await step2_handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 329,
      "line_content": "let step2_result: auto = match step2_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step2_result: <explicit_type> = match step2_result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 334,
      "line_content": "let step3_handle: auto = spawn_with_handle async_step3(step2_result);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step3_handle: <explicit_type> = spawn_with_handle async_step3(step2_result);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 335,
      "line_content": "let step3_result_result: auto = await step3_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step3_result_result: <explicit_type> = await step3_handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 336,
      "line_content": "let step3_result: auto = match step3_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let step3_result: <explicit_type> = match step3_result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 344,
      "line_content": "fn expensive_computation() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn expensive_computation(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 353,
      "line_content": "fn async_step1() -> Result<i32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn async_step1(none) -> Result<i32, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 383,
      "line_content": "fn java_executor_to_asthra() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn java_executor_to_asthra(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 384,
      "line_content": "let pool_result: auto = patterns.WorkerPool::<i32>::new(4);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_result: <explicit_type> = patterns.WorkerPool::<i32>::new(4);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 385,
      "line_content": "let pool: auto = match pool_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = match pool_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 431,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 447,
      "line_content": "let cpu_count: auto = get_cpu_count();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let cpu_count: <explicit_type> = get_cpu_count();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 448,
      "line_content": "let chunk_size: auto = max(1, data.len() / cpu_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_size: <explicit_type> = max(1, data.len() / cpu_count);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 454,
      "line_content": "let chunk_end: auto = min(chunk_start + chunk_size, data.len());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_end: <explicit_type> = min(chunk_start + chunk_size, data.len());"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 455,
      "line_content": "let chunk_data: auto = data[chunk_start..chunk_end].to_vec();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_data: <explicit_type> = data[chunk_start..chunk_end].to_vec();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 457,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 465,
      "line_content": "let chunk_results_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_results_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 466,
      "line_content": "let chunk_results: auto = match chunk_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_results: <explicit_type> = match chunk_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 489,
      "line_content": "let pool_result: auto = patterns.WorkerPool::<i32>::new(get_cpu_count());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_result: <explicit_type> = patterns.WorkerPool::<i32>::new(get_cpu_count());"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 490,
      "line_content": "let pool: auto = match pool_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = match pool_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 535,
      "line_content": "fn basic_error_handling() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn basic_error_handling(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 539,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 554,
      "line_content": "fn robust_error_handling() -> Result<ProcessingReport, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn robust_error_handling(none) -> Result<ProcessingReport, string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 558,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 580,
      "line_content": "let report: auto = ProcessingReport {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let report: <explicit_type> = ProcessingReport {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 589,
      "line_content": "Result.Err(format!(\"Too many failures: only {:.1}% success rate\", report.success_rate * 100.0))",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"Result.Err(format!(\"Too many failures: only\" + :.1 + \"% success rate\", report.success_rate * 100.0))\""
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 649,
      "line_content": "fn tier2_performance_limit() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tier2_performance_limit(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 661,
      "line_content": "fn tokio_runtime_new() -> *mut TokioRuntime;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tokio_runtime_new(none) -> *mut TokioRuntime;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 669,
      "line_content": "fn tier3_high_performance() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn tier3_high_performance(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 676,
      "line_content": "let runtime: auto = tokio_runtime_new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let runtime: <explicit_type> = tokio_runtime_new();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 686,
      "line_content": "fn get_cpu_count() -> usize {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_cpu_count(none) -> usize {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 702,
      "line_content": "fn main() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 706,
      "line_content": "let test_data: auto = vec![1, 2, 3, 4, 5];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let test_data: <explicit_type> = vec![1, 2, 3, 4, 5];"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 708,
      "line_content": "let tier1_results_result: auto = tier1_simple_processing(test_data.clone());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier1_results_result: <explicit_type> = tier1_simple_processing(test_data.clone());"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 709,
      "line_content": "let tier1_results: auto = match tier1_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier1_results: <explicit_type> = match tier1_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 715,
      "line_content": "let tier2_results_result: auto = tier2_managed_processing(test_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier2_results_result: <explicit_type> = tier2_managed_processing(test_data);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 716,
      "line_content": "let tier2_results: auto = match tier2_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier2_results: <explicit_type> = match tier2_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 723,
      "line_content": "let tier1_pc_results_result: auto = tier1_producer_consumer();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier1_pc_results_result: <explicit_type> = tier1_producer_consumer();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 724,
      "line_content": "let tier1_pc_results: auto = match tier1_pc_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier1_pc_results: <explicit_type> = match tier1_pc_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 730,
      "line_content": "let tier2_pc_results_result: auto = tier2_producer_consumer();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier2_pc_results_result: <explicit_type> = tier2_producer_consumer();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 731,
      "line_content": "let tier2_pc_results: auto = match tier2_pc_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let tier2_pc_results: <explicit_type> = match tier2_pc_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 738,
      "line_content": "let go_result_result: auto = go_to_asthra_tier1(100);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let go_result_result: <explicit_type> = go_to_asthra_tier1(100);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 739,
      "line_content": "let go_result: auto = match go_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let go_result: <explicit_type> = match go_result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 745,
      "line_content": "let rust_result_result: auto = rust_to_asthra_tier1();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rust_result_result: <explicit_type> = rust_to_asthra_tier1();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 746,
      "line_content": "let rust_result: auto = match rust_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let rust_result: <explicit_type> = match rust_result_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 752,
      "line_content": "let java_results_result: auto = java_executor_to_asthra();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let java_results_result: <explicit_type> = java_executor_to_asthra();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 753,
      "line_content": "let java_results: auto = match java_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let java_results: <explicit_type> = match java_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 760,
      "line_content": "let test_data_large: auto = (0..100).collect();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let test_data_large: <explicit_type> = (0..100).collect();"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 762,
      "line_content": "let naive_results_result: auto = naive_parallel(test_data_large.clone());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let naive_results_result: <explicit_type> = naive_parallel(test_data_large.clone());"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 763,
      "line_content": "let naive_results: auto = match naive_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let naive_results: <explicit_type> = match naive_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 769,
      "line_content": "let optimized_results_result: auto = optimized_chunked(test_data_large.clone());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let optimized_results_result: <explicit_type> = optimized_chunked(test_data_large.clone());"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 770,
      "line_content": "let optimized_results: auto = match optimized_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let optimized_results: <explicit_type> = match optimized_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 776,
      "line_content": "let pool_results_result: auto = optimized_worker_pool(test_data_large);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_results_result: <explicit_type> = optimized_worker_pool(test_data_large);"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 777,
      "line_content": "let pool_results: auto = match pool_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_results: <explicit_type> = match pool_results_result {;"
    },
    {
      "file_path": "examples/concurrency/migration_guide.asthra",
      "line_number": 786,
      "line_content": "println(\"Robust error handling: {:.1}% success rate ({}/{})\",",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"Robust error handling:\" + :.1 + \"% success rate ({}/{})\",\""
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 50,
      "line_content": "fn example_result_collection() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_result_collection(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 53,
      "line_content": "let handles: auto = [];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handles: <explicit_type> = [];"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 57,
      "line_content": "let handle: auto = spawn_with_handle compute_square(i);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle compute_square(i);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 64,
      "line_content": "let result_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 65,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 80,
      "line_content": "let result: auto = n * n;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = n * n;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 96,
      "line_content": "fn example_parallel_file_processing() -> Result<Vec<FileInfo>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_parallel_file_processing(none) -> Result<Vec<FileInfo>, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 97,
      "line_content": "let filenames: auto = vec![;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let filenames: <explicit_type> = vec![;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 111,
      "line_content": "let handle: auto = spawn_with_handle process_file(filename);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle process_file(filename);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 135,
      "line_content": "let content_result: auto = read_file_content(filename.clone());",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_result: <explicit_type> = read_file_content(filename.clone());"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 136,
      "line_content": "let content: auto = match content_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content: <explicit_type> = match content_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 140,
      "line_content": "let size: auto = content.len();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let size: <explicit_type> = content.len();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 141,
      "line_content": "let checksum_result: auto = calculate_checksum(content);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let checksum_result: <explicit_type> = calculate_checksum(content);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 142,
      "line_content": "let checksum: auto = match checksum_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let checksum: <explicit_type> = match checksum_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 160,
      "line_content": "let content: auto = format!(\"Content of {}\", filename);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content: <explicit_type> = format!(\"Content of {}\", filename);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 167,
      "line_content": "let hash: auto = content.len() * 31; // Simple hash;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let hash: <explicit_type> = content.len() * 31; // Simple hash;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 175,
      "line_content": "fn example_sequential_dependencies() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_sequential_dependencies(none) -> Result<string, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 179,
      "line_content": "let prep_handle: auto = spawn_with_handle prepare_data();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prep_handle: <explicit_type> = spawn_with_handle prepare_data();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 180,
      "line_content": "let prepared_data_result: auto = await prep_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prepared_data_result: <explicit_type> = await prep_handle;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 181,
      "line_content": "let prepared_data: auto = match prepared_data_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let prepared_data: <explicit_type> = match prepared_data_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 188,
      "line_content": "let process_handle: auto = spawn_with_handle process_data(prepared_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let process_handle: <explicit_type> = spawn_with_handle process_data(prepared_data);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 189,
      "line_content": "let processed_data_result: auto = await process_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processed_data_result: <explicit_type> = await process_handle;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 190,
      "line_content": "let processed_data: auto = match processed_data_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processed_data: <explicit_type> = match processed_data_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 197,
      "line_content": "let finalize_handle: auto = spawn_with_handle finalize_data(processed_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let finalize_handle: <explicit_type> = spawn_with_handle finalize_data(processed_data);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 198,
      "line_content": "let final_result_result: auto = await finalize_handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_result_result: <explicit_type> = await finalize_handle;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 199,
      "line_content": "let final_result: auto = match final_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_result: <explicit_type> = match final_result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 208,
      "line_content": "fn prepare_data() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn prepare_data(none) -> Result<string, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 247,
      "line_content": "fn example_cpu_bound_computation() -> Result<Vec<i64>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_cpu_bound_computation(none) -> Result<Vec<i64>, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 248,
      "line_content": "let numbers: auto = vec![25, 30, 35, 40, 45, 50];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let numbers: <explicit_type> = vec![25, 30, 35, 40, 45, 50];"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 256,
      "line_content": "let handle: auto = spawn_with_handle compute_fibonacci(number);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle compute_fibonacci(number);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 291,
      "line_content": "let temp: auto = a + b;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let temp: <explicit_type> = a + b;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 336,
      "line_content": "fn example_parallel_matrix_multiply() -> Result<Matrix, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_parallel_matrix_multiply(none) -> Result<Matrix, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 338,
      "line_content": "let matrix_a: auto = Matrix::new(size, size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let matrix_a: <explicit_type> = Matrix::new(size, size);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 339,
      "line_content": "let matrix_b: auto = Matrix::new(size, size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let matrix_b: <explicit_type> = Matrix::new(size, size);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 343,
      "line_content": "let cpu_count: auto = get_cpu_count();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let cpu_count: <explicit_type> = get_cpu_count();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 344,
      "line_content": "let chunk_size: auto = max(1, size / cpu_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_size: <explicit_type> = max(1, size / cpu_count);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 350,
      "line_content": "let end_row: auto = min(start_row + chunk_size, size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_row: <explicit_type> = min(start_row + chunk_size, size);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 351,
      "line_content": "let a_clone: auto = matrix_a.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let a_clone: <explicit_type> = matrix_a.clone();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 352,
      "line_content": "let b_clone: auto = matrix_b.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let b_clone: <explicit_type> = matrix_b.clone();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 354,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 363,
      "line_content": "let chunk_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 364,
      "line_content": "let chunk: auto = match chunk_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let chunk: <explicit_type> = match chunk_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 372,
      "line_content": "let result_result: auto = combine_matrix_chunks(result_chunks, size, size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = combine_matrix_chunks(result_chunks, size, size);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 373,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 415,
      "line_content": "let global_row: auto = chunk.start_row + local_row;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let global_row: <explicit_type> = chunk.start_row + local_row;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 429,
      "line_content": "fn example_robust_error_handling() -> Result<ProcessingSummary, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_robust_error_handling(none) -> Result<ProcessingSummary, string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 430,
      "line_content": "let work_items: auto = generate_work_items(20);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let work_items: <explicit_type> = generate_work_items(20);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 438,
      "line_content": "let handle: auto = spawn_with_handle process_work_item(item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle process_work_item(item);"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 463,
      "line_content": "let summary: auto = ProcessingSummary {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let summary: <explicit_type> = ProcessingSummary {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 557,
      "line_content": "fn get_cpu_count() -> usize {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_cpu_count(none) -> usize {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 578,
      "line_content": "fn main() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 587,
      "line_content": "let results_result: auto = example_result_collection();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results_result: <explicit_type> = example_result_collection();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 588,
      "line_content": "let results: auto = match results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = match results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 596,
      "line_content": "let file_infos_result: auto = example_parallel_file_processing();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let file_infos_result: <explicit_type> = example_parallel_file_processing();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 597,
      "line_content": "let file_infos: auto = match file_infos_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let file_infos: <explicit_type> = match file_infos_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 605,
      "line_content": "let final_result_result: auto = example_sequential_dependencies();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_result_result: <explicit_type> = example_sequential_dependencies();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 606,
      "line_content": "let final_result: auto = match final_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_result: <explicit_type> = match final_result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 614,
      "line_content": "let fibonacci_results_result: auto = example_cpu_bound_computation();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fibonacci_results_result: <explicit_type> = example_cpu_bound_computation();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 615,
      "line_content": "let fibonacci_results: auto = match fibonacci_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fibonacci_results: <explicit_type> = match fibonacci_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 623,
      "line_content": "let matrix_result_result: auto = example_parallel_matrix_multiply();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let matrix_result_result: <explicit_type> = example_parallel_matrix_multiply();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 624,
      "line_content": "let matrix_result: auto = match matrix_result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let matrix_result: <explicit_type> = match matrix_result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 632,
      "line_content": "let summary_result: auto = example_robust_error_handling();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let summary_result: <explicit_type> = example_robust_error_handling();"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 633,
      "line_content": "let summary: auto = match summary_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let summary: <explicit_type> = match summary_result {;"
    },
    {
      "file_path": "examples/concurrency/tier1_basic.asthra",
      "line_number": 637,
      "line_content": "println(\"Processing summary: {:.1}% success rate\", summary.success_rate);",
      "violation_type": "ViolationType.STRING_INTERPOLATION",
      "priority": "Priority.CRITICAL",
      "description": "String interpolation removed in v1.22, use concatenation",
      "suggested_fix": "Convert to concatenation: \"println(\"Processing summary:\" + :.1 + \"% success rate\", summary.success_rate);\""
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 13,
      "line_content": "fn example_basic_channels() -> Result<Vec<i32>, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_basic_channels(none) -> Result<Vec<i32>, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 17,
      "line_content": "let channel_pair_result: auto = channels.channel_pair<i32>(10);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_pair_result: <explicit_type> = channels.channel_pair<i32>(10);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 24,
      "line_content": "let producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 48,
      "line_content": "let consumer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 76,
      "line_content": "let results_result: auto = await consumer;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results_result: <explicit_type> = await consumer;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 77,
      "line_content": "let results: auto = match results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = match results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 91,
      "line_content": "fn example_multi_producer() -> Result<ProcessingReport, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_multi_producer(none) -> Result<ProcessingReport, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 94,
      "line_content": "let channel_pair_result: auto = channels.channel_pair<WorkMessage>(50);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_pair_result: <explicit_type> = channels.channel_pair<WorkMessage>(50);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 104,
      "line_content": "let sender_clone: auto = sender.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let sender_clone: <explicit_type> = sender.clone();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 105,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 112,
      "line_content": "let consumer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 131,
      "line_content": "let report_result: auto = await consumer;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let report_result: <explicit_type> = await consumer;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 132,
      "line_content": "let report: auto = match report_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let report: <explicit_type> = match report_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 157,
      "line_content": "let message: auto = WorkMessage {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let message: <explicit_type> = WorkMessage {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 188,
      "line_content": "let start_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 213,
      "line_content": "let end_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 214,
      "line_content": "let processing_time: auto = end_time - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processing_time: <explicit_type> = end_time - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 230,
      "line_content": "fn example_select_operations() -> Result<SelectionResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_select_operations(none) -> Result<SelectionResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 234,
      "line_content": "let ch_numbers_result: auto = channels.channel<i32>(5);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_numbers_result: <explicit_type> = channels.channel<i32>(5);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 235,
      "line_content": "let ch_numbers: auto = match ch_numbers_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_numbers: <explicit_type> = match ch_numbers_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 239,
      "line_content": "let ch_strings_result: auto = channels.channel<string>(5);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_strings_result: <explicit_type> = channels.channel<string>(5);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 240,
      "line_content": "let ch_strings: auto = match ch_strings_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_strings: <explicit_type> = match ch_strings_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 244,
      "line_content": "let ch_control_result: auto = channels.channel<ControlMessage>(2);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_control_result: <explicit_type> = channels.channel<ControlMessage>(2);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 245,
      "line_content": "let ch_control: auto = match ch_control_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let ch_control: <explicit_type> = match ch_control_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 251,
      "line_content": "let number_producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let number_producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 255,
      "line_content": "let string_producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let string_producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 259,
      "line_content": "let control_producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let control_producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 264,
      "line_content": "let selector: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let selector: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 283,
      "line_content": "let results_result: auto = await selector;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results_result: <explicit_type> = await selector;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 284,
      "line_content": "let results: auto = match results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = match results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 322,
      "line_content": "let strings: auto = vec![\"hello\", \"world\", \"asthra\", \"concurrent\", \"programming\"];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let strings: <explicit_type> = vec![\"hello\", \"world\", \"asthra\", \"concurrent\", \"programming\"];"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 338,
      "line_content": "let messages: auto = vec![ControlMessage.Pause, ControlMessage.Resume, ControlMessage.Stop];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let messages: <explicit_type> = vec![ControlMessage.Pause, ControlMessage.Resume, ControlMessage.Stop];"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 453,
      "line_content": "fn example_worker_pool() -> Result<WorkerPoolResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_worker_pool(none) -> Result<WorkerPoolResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 460,
      "line_content": "let pool_result: auto = patterns.WorkerPool::<TaskResult>::new(pool_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_result: <explicit_type> = patterns.WorkerPool::<TaskResult>::new(pool_size);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 461,
      "line_content": "let pool: auto = match pool_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = match pool_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 468,
      "line_content": "let task: auto = Task {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task: <explicit_type> = Task {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 510,
      "line_content": "let results: auto = WorkerPoolResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = WorkerPoolResults {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 554,
      "line_content": "let start_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 566,
      "line_content": "let end_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let end_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 567,
      "line_content": "let processing_time: auto = end_time - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let processing_time: <explicit_type> = end_time - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 581,
      "line_content": "fn example_barrier_synchronization() -> Result<BarrierResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_barrier_synchronization(none) -> Result<BarrierResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 585,
      "line_content": "let barrier_result: auto = coordination.create_barrier(worker_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let barrier_result: <explicit_type> = coordination.create_barrier(worker_count);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 586,
      "line_content": "let barrier: auto = match barrier_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let barrier: <explicit_type> = match barrier_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 595,
      "line_content": "let barrier_ref: auto = barrier.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let barrier_ref: <explicit_type> = barrier.clone();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 596,
      "line_content": "let handle: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let handle: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 605,
      "line_content": "let result_result: auto = await handle;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_result: <explicit_type> = await handle;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 606,
      "line_content": "let result: auto = match result_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = match result_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 613,
      "line_content": "let results: auto = BarrierResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = BarrierResults {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 636,
      "line_content": "let start_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 642,
      "line_content": "let phase1_start: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase1_start: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 646,
      "line_content": "let phase1_time: auto = get_current_time_ms() - phase1_start;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase1_time: <explicit_type> = get_current_time_ms() - phase1_start;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 659,
      "line_content": "let phase2_start: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase2_start: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 663,
      "line_content": "let phase2_time: auto = get_current_time_ms() - phase2_start;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase2_time: <explicit_type> = get_current_time_ms() - phase2_start;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 676,
      "line_content": "let phase3_start: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase3_start: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 680,
      "line_content": "let phase3_time: auto = get_current_time_ms() - phase3_start;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let phase3_time: <explicit_type> = get_current_time_ms() - phase3_start;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 692,
      "line_content": "let total_time: auto = get_current_time_ms() - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_time: <explicit_type> = get_current_time_ms() - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 725,
      "line_content": "fn example_backpressure_control() -> Result<BackpressureResults, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_backpressure_control(none) -> Result<BackpressureResults, string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 728,
      "line_content": "let buffer_size: auto = 5; // Small buffer to demonstrate backpressure;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let buffer_size: <explicit_type> = 5; // Small buffer to demonstrate backpressure;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 729,
      "line_content": "let channel_pair_result: auto = channels.channel_pair<DataPacket>(buffer_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_pair_result: <explicit_type> = channels.channel_pair<DataPacket>(buffer_size);"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 736,
      "line_content": "let producer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let producer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 741,
      "line_content": "let consumer: auto = spawn_with_handle move || {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer: <explicit_type> = spawn_with_handle move || {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 746,
      "line_content": "let producer_stats_result: auto = await producer;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let producer_stats_result: <explicit_type> = await producer;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 747,
      "line_content": "let producer_stats: auto = match producer_stats_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let producer_stats: <explicit_type> = match producer_stats_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 751,
      "line_content": "let consumer_stats_result: auto = await consumer;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer_stats_result: <explicit_type> = await consumer;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 752,
      "line_content": "let consumer_stats: auto = match consumer_stats_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let consumer_stats: <explicit_type> = match consumer_stats_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 757,
      "line_content": "let results: auto = BackpressureResults {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let results: <explicit_type> = BackpressureResults {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 801,
      "line_content": "let packet: auto = DataPacket {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let packet: <explicit_type> = DataPacket {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 807,
      "line_content": "let send_start: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let send_start: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 811,
      "line_content": "let send_time: auto = get_current_time_ms() - send_start;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let send_time: <explicit_type> = get_current_time_ms() - send_start;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 844,
      "line_content": "let start_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let start_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 867,
      "line_content": "let total_processing_time: auto = get_current_time_ms() - start_time;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_processing_time: <explicit_type> = get_current_time_ms() - start_time;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 915,
      "line_content": "fn get_current_time_ms() -> i64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_current_time_ms(none) -> i64 {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 926,
      "line_content": "fn main() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> Result<(), string> {"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 931,
      "line_content": "let channel_results_result: auto = example_basic_channels();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_results_result: <explicit_type> = example_basic_channels();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 932,
      "line_content": "let channel_results: auto = match channel_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel_results: <explicit_type> = match channel_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 940,
      "line_content": "let multi_results_result: auto = example_multi_producer();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let multi_results_result: <explicit_type> = example_multi_producer();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 941,
      "line_content": "let multi_results: auto = match multi_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let multi_results: <explicit_type> = match multi_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 949,
      "line_content": "let select_results_result: auto = example_select_operations();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let select_results_result: <explicit_type> = example_select_operations();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 950,
      "line_content": "let select_results: auto = match select_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let select_results: <explicit_type> = match select_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 958,
      "line_content": "let pool_results_result: auto = example_worker_pool();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_results_result: <explicit_type> = example_worker_pool();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 959,
      "line_content": "let pool_results: auto = match pool_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool_results: <explicit_type> = match pool_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 968,
      "line_content": "let barrier_results_result: auto = example_barrier_synchronization();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let barrier_results_result: <explicit_type> = example_barrier_synchronization();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 969,
      "line_content": "let barrier_results: auto = match barrier_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let barrier_results: <explicit_type> = match barrier_results_result {;"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 978,
      "line_content": "let backpressure_results_result: auto = example_backpressure_control();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let backpressure_results_result: <explicit_type> = example_backpressure_control();"
    },
    {
      "file_path": "examples/concurrency/tier2_advanced.asthra",
      "line_number": 979,
      "line_content": "let backpressure_results: auto = match backpressure_results_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let backpressure_results: <explicit_type> = match backpressure_results_result {;"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 245,
      "line_content": "let mode: auto = if options.create_new {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let mode: <explicit_type> = if options.create_new {;"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 255,
      "line_content": "let file_result: auto = open(path, mode);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let file_result: <explicit_type> = open(path, mode);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 346,
      "line_content": "let options: auto = CopyOptions {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let options: <explicit_type> = CopyOptions {;"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 479,
      "line_content": "let bytes_result: auto = self.read_to_end();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bytes_result: <explicit_type> = self.read_to_end();"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 483,
      "line_content": "let validation_result: auto = validate_utf8(bytes);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let validation_result: <explicit_type> = validate_utf8(bytes);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 486,
      "line_content": "let content: auto = string_from_bytes(bytes);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content: <explicit_type> = string_from_bytes(bytes);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 532,
      "line_content": "let bytes_read_result: auto = self.read_into_buffer(buffer_ptr, remaining_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bytes_read_result: <explicit_type> = self.read_into_buffer(buffer_ptr, remaining_size);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 555,
      "line_content": "let bytes: auto = string_to_bytes(text);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bytes: <explicit_type> = string_to_bytes(text);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 638,
      "line_content": "let result: auto = close_file_handle(self.handle);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = close_file_handle(self.handle);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 686,
      "line_content": "let parent_result: auto = get_parent_path(path);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let parent_result: <explicit_type> = get_parent_path(path);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 690,
      "line_content": "let parent_result: auto = create_dir_all(parent);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let parent_result: <explicit_type> = create_dir_all(parent);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 733,
      "line_content": "let options: auto = DirOptions {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let options: <explicit_type> = DirOptions {;"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 741,
      "line_content": "let iterator_result: auto = read_dir_with_options(path, options);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let iterator_result: <explicit_type> = read_dir_with_options(path, options);"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 744,
      "line_content": "let entries_result: auto = iterator.collect();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let entries_result: <explicit_type> = iterator.collect();"
    },
    {
      "file_path": "stdlib/fs.asthra",
      "line_number": 815,
      "line_content": "let access_mode: auto = match mode {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let access_mode: <explicit_type> = match mode {;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 114,
      "line_content": "fn generate_aes256_key() -> Result<[]u8, CryptoError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_aes256_key(none) -> Result<[]u8, CryptoError> {"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 119,
      "line_content": "fn generate_chacha20_key() -> Result<[]u8, CryptoError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_chacha20_key(none) -> Result<[]u8, CryptoError> {"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 124,
      "line_content": "fn generate_hmac_key() -> Result<[]u8, CryptoError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_hmac_key(none) -> Result<[]u8, CryptoError> {"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 134,
      "line_content": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 136,
      "line_content": "extern \"libcrypto\" fn EVP_aes_256_gcm() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_aes_256_gcm(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 267,
      "line_content": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 269,
      "line_content": "extern \"libcrypto\" fn EVP_aes_256_gcm() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_aes_256_gcm(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 403,
      "line_content": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 405,
      "line_content": "extern \"libcrypto\" fn EVP_chacha20_poly1305() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_chacha20_poly1305(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 536,
      "line_content": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_CIPHER_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 538,
      "line_content": "extern \"libcrypto\" fn EVP_chacha20_poly1305() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_chacha20_poly1305(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 668,
      "line_content": "extern \"libcrypto\" fn EVP_MD_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_MD_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 670,
      "line_content": "extern \"libcrypto\" fn EVP_sha256() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_sha256(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 729,
      "line_content": "extern \"libcrypto\" fn EVP_MD_CTX_new() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_MD_CTX_new(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 731,
      "line_content": "extern \"libcrypto\" fn EVP_sha512() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_sha512(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 803,
      "line_content": "extern \"libcrypto\" fn EVP_sha256() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_sha256(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 850,
      "line_content": "extern \"libcrypto\" fn EVP_sha512() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_sha512(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 902,
      "line_content": "extern \"libcrypto\" fn EVP_sha256() -> *const void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcrypto\" fn EVP_sha256(none) -> *const void;"
    },
    {
      "file_path": "stdlib/crypto.asthra",
      "line_number": 1043,
      "line_content": "fn generate_salt() -> Result<[]u8, CryptoError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_salt(none) -> Result<[]u8, CryptoError> {"
    },
    {
      "file_path": "stdlib/crypto_enhancements.asthra",
      "line_number": 129,
      "line_content": "fn generate_hybrid_keypair() -> Result<HybridKeyPair, CryptoError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_hybrid_keypair(none) -> Result<HybridKeyPair, CryptoError> {"
    },
    {
      "file_path": "stdlib/crypto_enhancements.asthra",
      "line_number": 268,
      "line_content": "fn get_crypto_metrics() -> CryptoMetrics {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_crypto_metrics(none) -> CryptoMetrics {"
    },
    {
      "file_path": "stdlib/crypto_enhancements.asthra",
      "line_number": 276,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_time_ns() -> u64;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_time_ns(none) -> u64;"
    },
    {
      "file_path": "stdlib/crypto_enhancements.asthra",
      "line_number": 312,
      "line_content": "fn get_default_crypto_config() -> CryptoConfig {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_default_crypto_config(none) -> CryptoConfig {"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 138,
      "line_content": "fn new() -> HTTPClient {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> HTTPClient {"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 179,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 196,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 213,
      "line_content": "let content_type_header: auto = HTTPHeader {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_type_header: <explicit_type> = HTTPHeader {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 218,
      "line_content": "let headers: auto = [content_type_header];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let headers: <explicit_type> = [content_type_header];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 219,
      "line_content": "let body_bytes: auto = str::to_bytes(json_body);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let body_bytes: <explicit_type> = str::to_bytes(json_body);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 221,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 238,
      "line_content": "let form_body: auto = encode_form_data(form_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let form_body: <explicit_type> = encode_form_data(form_data);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 239,
      "line_content": "let content_type_header: auto = HTTPHeader {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_type_header: <explicit_type> = HTTPHeader {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 244,
      "line_content": "let headers: auto = [content_type_header];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let headers: <explicit_type> = [content_type_header];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 246,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 263,
      "line_content": "let content_type_header: auto = HTTPHeader {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_type_header: <explicit_type> = HTTPHeader {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 268,
      "line_content": "let headers: auto = [content_type_header];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let headers: <explicit_type> = [content_type_header];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 270,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 287,
      "line_content": "let request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 305,
      "line_content": "let validation_result: auto = validate_request(request);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let validation_result: <explicit_type> = validate_request(request);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 312,
      "line_content": "let url_result: auto = parse_url(request.url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let url_result: <explicit_type> = parse_url(request.url);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 313,
      "line_content": "let url_components: auto = match url_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let url_components: <explicit_type> = match url_result {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 329,
      "line_content": "let client: auto = HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = HTTPClient::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 335,
      "line_content": "let client: auto = HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = HTTPClient::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 341,
      "line_content": "let client: auto = HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = HTTPClient::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 347,
      "line_content": "let client: auto = HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = HTTPClient::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 353,
      "line_content": "let client: auto = HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = HTTPClient::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 385,
      "line_content": "let host_port_result: auto = parse_host_port(remaining);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let host_port_result: <explicit_type> = parse_host_port(remaining);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 418,
      "line_content": "let slash_pos: auto = str::find(remaining, \"/\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let slash_pos: <explicit_type> = str::find(remaining, \"/\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 430,
      "line_content": "let colon_pos: auto = str::find(host_port, \":\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let colon_pos: <explicit_type> = str::find(host_port, \":\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 439,
      "line_content": "let port_str: auto = str::substring(host_port, colon_pos + 1, str::len(host_port));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port_str: <explicit_type> = str::substring(host_port, colon_pos + 1, str::len(host_port));"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 440,
      "line_content": "let port_result: auto = str::parse_u16(port_str);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let port_result: <explicit_type> = str::parse_u16(port_str);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 456,
      "line_content": "let fragment_pos: auto = str::find(path_query, \"#\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let fragment_pos: <explicit_type> = str::find(path_query, \"#\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 468,
      "line_content": "let query_pos: auto = str::find(path_query_only, \"?\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let query_pos: <explicit_type> = str::find(path_query_only, \"?\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 510,
      "line_content": "let header: auto = request.headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = request.headers[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 558,
      "line_content": "let response_result: auto = execute_http_request(client, request, url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = execute_http_request(client, request, url);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 559,
      "line_content": "let response: auto = match response_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response: <explicit_type> = match response_result {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 566,
      "line_content": "let location_header: auto = find_header(response.headers, \"Location\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let location_header: <explicit_type> = find_header(response.headers, \"Location\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 570,
      "line_content": "let redirect_request: auto = HTTPRequest {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let redirect_request: <explicit_type> = HTTPRequest {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 582,
      "line_content": "let redirect_url_result: auto = parse_url(location);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let redirect_url_result: <explicit_type> = parse_url(location);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 583,
      "line_content": "let redirect_url: auto = match redirect_url_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let redirect_url: <explicit_type> = match redirect_url_result {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 609,
      "line_content": "extern \"libcurl\" fn curl_easy_init() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libcurl\" fn curl_easy_init(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 622,
      "line_content": "let url_cstr: auto = str::to_cstr(request.url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let url_cstr: <explicit_type> = str::to_cstr(request.url);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 626,
      "line_content": "let method_result: auto = set_curl_method(curl_handle, request.method);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let method_result: <explicit_type> = set_curl_method(curl_handle, request.method);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 636,
      "line_content": "let headers_result: auto = set_curl_headers(curl_handle, request.headers);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let headers_result: <explicit_type> = set_curl_headers(curl_handle, request.headers);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 652,
      "line_content": "let timeout_seconds: auto = request.timeout_ms / 1000;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let timeout_seconds: <explicit_type> = request.timeout_ms / 1000;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 662,
      "line_content": "let response_data: auto = ResponseData::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_data: <explicit_type> = ResponseData::new();"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 684,
      "line_content": "let final_url: auto = if final_url_ptr != null {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let final_url: <explicit_type> = if final_url_ptr != null {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 693,
      "line_content": "let response: auto = HTTPResponse {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response: <explicit_type> = HTTPResponse {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 718,
      "line_content": "fn new() -> ResponseData {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn new(none) -> ResponseData {"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 734,
      "line_content": "let total_size: auto = size * nmemb;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_size: <explicit_type> = size * nmemb;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 735,
      "line_content": "let response_data: auto = userdata as *mut ResponseData;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_data: <explicit_type> = userdata as *mut ResponseData;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 756,
      "line_content": "let total_size: auto = size * nitems;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_size: <explicit_type> = size * nitems;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 757,
      "line_content": "let response_data: auto = userdata as *mut ResponseData;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_data: <explicit_type> = userdata as *mut ResponseData;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 760,
      "line_content": "let header_str: auto = str::from_bytes_with_length(buffer, total_size);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_str: <explicit_type> = str::from_bytes_with_length(buffer, total_size);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 764,
      "line_content": "let colon_pos: auto = str::find(header_str, \":\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let colon_pos: <explicit_type> = str::find(header_str, \":\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 766,
      "line_content": "let name: auto = str::trim(str::substring(header_str, 0, colon_pos));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name: <explicit_type> = str::trim(str::substring(header_str, 0, colon_pos));"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 767,
      "line_content": "let value: auto = str::trim(str::substring(header_str, colon_pos + 1, str::len(header_str)));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let value: <explicit_type> = str::trim(str::substring(header_str, colon_pos + 1, str::len(header_str)));"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 769,
      "line_content": "let header: auto = HTTPHeader {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = HTTPHeader {;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 859,
      "line_content": "let header: auto = headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = headers[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 860,
      "line_content": "let header_name_lower: auto = str::to_lowercase(header.name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_name_lower: <explicit_type> = str::to_lowercase(header.name);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 892,
      "line_content": "let name_lower: auto = str::to_lowercase(name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let name_lower: <explicit_type> = str::to_lowercase(name);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 896,
      "line_content": "let header: auto = headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = headers[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 897,
      "line_content": "let header_name_lower: auto = str::to_lowercase(header.name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_name_lower: <explicit_type> = str::to_lowercase(header.name);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 915,
      "line_content": "let field: auto = form_data[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let field: <explicit_type> = form_data[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 921,
      "line_content": "let encoded_name: auto = url_encode(field.name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let encoded_name: <explicit_type> = url_encode(field.name);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 922,
      "line_content": "let encoded_value: auto = url_encode(field.value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let encoded_value: <explicit_type> = url_encode(field.value);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 934,
      "line_content": "let bytes: auto = str::to_bytes(input);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bytes: <explicit_type> = str::to_bytes(input);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 938,
      "line_content": "let byte: auto = bytes[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let byte: <explicit_type> = bytes[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 958,
      "line_content": "let high: auto = (byte >> 4) & 0x0F;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let high: <explicit_type> = (byte >> 4) & 0x0F;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 959,
      "line_content": "let low: auto = byte & 0x0F;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let low: <explicit_type> = byte & 0x0F;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 984,
      "line_content": "let method_str: auto = str::to_cstr(\"DELETE\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let method_str: <explicit_type> = str::to_cstr(\"DELETE\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 993,
      "line_content": "let method_str: auto = str::to_cstr(\"OPTIONS\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let method_str: <explicit_type> = str::to_cstr(\"OPTIONS\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 998,
      "line_content": "let method_str: auto = str::to_cstr(\"PATCH\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let method_str: <explicit_type> = str::to_cstr(\"PATCH\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1019,
      "line_content": "let header: auto = headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = headers[i];"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1020,
      "line_content": "let header_string: auto = header.name + \": \" + header.value;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_string: <explicit_type> = header.name + \": \" + header.value;"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1021,
      "line_content": "let header_cstr: auto = str::to_cstr(header_string);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_cstr: <explicit_type> = str::to_cstr(header_string);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1112,
      "line_content": "let validation_result: auto = validate_utf8(self.body);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let validation_result: <explicit_type> = validate_utf8(self.body);"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1135,
      "line_content": "let content_length_str_result: auto = self.get_header(\"Content-Length\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_length_str_result: <explicit_type> = self.get_header(\"Content-Length\");"
    },
    {
      "file_path": "stdlib/http.asthra",
      "line_number": 1138,
      "line_content": "let parse_result: auto = str::parse_usize(length_str);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let parse_result: <explicit_type> = str::parse_usize(length_str);"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 35,
      "line_content": "fn read_line() -> Result<string, IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn read_line(none) -> Result<string, IOError> {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 71,
      "line_content": "fn read_char() -> Result<char, IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn read_char(none) -> Result<char, IOError> {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 98,
      "line_content": "fn read_all() -> Result<string, IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn read_all(none) -> Result<string, IOError> {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 222,
      "line_content": "fn flush_stdout() -> Result<void, IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn flush_stdout(none) -> Result<void, IOError> {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 299,
      "line_content": "fn flush_stderr() -> Result<void, IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn flush_stderr(none) -> Result<void, IOError> {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 319,
      "line_content": "fn c_stdin() -> *mut void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn c_stdin(none) -> *mut void {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 320,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_stdin() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_stdin(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 328,
      "line_content": "fn c_stdout() -> *mut void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn c_stdout(none) -> *mut void {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 329,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_stdout() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_stdout(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 337,
      "line_content": "fn c_stderr() -> *mut void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn c_stderr(none) -> *mut void {"
    },
    {
      "file_path": "stdlib/io.asthra",
      "line_number": 338,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_stderr() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_stderr(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/json.asthra",
      "line_number": 109,
      "line_content": "fn default_config() -> JSONConfig {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn default_config(none) -> JSONConfig {"
    },
    {
      "file_path": "stdlib/json.asthra",
      "line_number": 121,
      "line_content": "fn default_serialize_config() -> JSONSerializeConfig {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn default_serialize_config(none) -> JSONSerializeConfig {"
    },
    {
      "file_path": "stdlib/datetime/time.asthra",
      "line_number": 190,
      "line_content": "fn instant_now() -> Instant {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn instant_now(none) -> Instant {"
    },
    {
      "file_path": "stdlib/datetime/time.asthra",
      "line_number": 257,
      "line_content": "fn system_time_now() -> SystemTime {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn system_time_now(none) -> SystemTime {"
    },
    {
      "file_path": "stdlib/ffi/error.asthra",
      "line_number": 22,
      "line_content": "fn from_errno() -> FFIError;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn from_errno(none) -> FFIError;"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 15,
      "line_content": "fn demonstrate_enhanced_vectors() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_enhanced_vectors(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 19,
      "line_content": "let config: auto = collections::VecConfig {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let config: <explicit_type> = collections::VecConfig {;"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 29,
      "line_content": "let push_result: auto = collections::vec_push(&mut custom_vec, 42);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = collections::vec_push(&mut custom_vec, 42);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 44,
      "line_content": "let vec_from_slice_result: auto = collections::vec_from_slice(initial_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let vec_from_slice_result: <explicit_type> = collections::vec_from_slice(initial_data);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 50,
      "line_content": "let insert_result: auto = collections::vec_insert(&mut vec, 2, 99);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = collections::vec_insert(&mut vec, 2, 99);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 60,
      "line_content": "let remove_result: auto = collections::vec_remove(&mut vec, 1);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = collections::vec_remove(&mut vec, 1);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 72,
      "line_content": "let swap_remove_result: auto = collections::vec_swap_remove(&mut vec, 0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let swap_remove_result: <explicit_type> = collections::vec_swap_remove(&mut vec, 0);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 83,
      "line_content": "let find_result: auto = collections::vec_find(&vec, &search_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let find_result: <explicit_type> = collections::vec_find(&vec, &search_value);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 96,
      "line_content": "let extend_vec_result: auto = collections::vec_from_slice(extension_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let extend_vec_result: <explicit_type> = collections::vec_from_slice(extension_data);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 99,
      "line_content": "let extend_result: auto = collections::vec_extend(&mut vec, &extend_vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let extend_result: <explicit_type> = collections::vec_extend(&mut vec, &extend_vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 111,
      "line_content": "let shrink_result: auto = collections::vec_shrink_to_fit(&mut vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let shrink_result: <explicit_type> = collections::vec_shrink_to_fit(&mut vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 134,
      "line_content": "fn demonstrate_hash_sets() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_hash_sets(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 144,
      "line_content": "let insert_result: auto = collections::hashset_insert(&mut set, items[i]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = collections::hashset_insert(&mut set, items[i]);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 161,
      "line_content": "let duplicate_result: auto = collections::hashset_insert(&mut set, \"apple\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let duplicate_result: <explicit_type> = collections::hashset_insert(&mut set, \"apple\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 186,
      "line_content": "let remove_result: auto = collections::hashset_remove(&mut set, &\"banana\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = collections::hashset_remove(&mut set, &\"banana\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 202,
      "line_content": "let set_from_slice_result: auto = collections::hashset_from_slice(fruit_array);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let set_from_slice_result: <explicit_type> = collections::hashset_from_slice(fruit_array);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 208,
      "line_content": "let union_result: auto = collections::hashset_union(&mut set, &fruit_set);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let union_result: <explicit_type> = collections::hashset_union(&mut set, &fruit_set);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 230,
      "line_content": "fn demonstrate_enhanced_hashmaps() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_enhanced_hashmaps(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 246,
      "line_content": "let pair: auto = insert_pairs[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pair: <explicit_type> = insert_pairs[i];"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 247,
      "line_content": "let insert_result: auto = collections::hashmap_insert(&mut map, pair.key, pair.value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = collections::hashmap_insert(&mut map, pair.key, pair.value);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 269,
      "line_content": "let get_result: auto = collections::hashmap_get(&map, &\"score\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let get_result: <explicit_type> = collections::hashmap_get(&map, &\"score\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 281,
      "line_content": "let get_or_insert_result: auto = collections::hashmap_get_or_insert(&mut map, \"health\", default_health);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let get_or_insert_result: <explicit_type> = collections::hashmap_get_or_insert(&mut map, \"health\", default_health);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 292,
      "line_content": "let update_result: auto = collections::hashmap_insert(&mut map, \"score\", 150);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let update_result: <explicit_type> = collections::hashmap_insert(&mut map, \"score\", 150);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 313,
      "line_content": "let remove_result: auto = collections::hashmap_remove(&mut map, &\"lives\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = collections::hashmap_remove(&mut map, &\"lives\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 334,
      "line_content": "fn demonstrate_enhanced_linked_lists() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_enhanced_linked_lists(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 339,
      "line_content": "let list_result: auto = collections::list_from_slice(initial_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let list_result: <explicit_type> = collections::list_from_slice(initial_data);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 345,
      "line_content": "let insert_result: auto = collections::list_insert(&mut list, 2, \"inserted\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = collections::list_insert(&mut list, 2, \"inserted\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 358,
      "line_content": "let remove_result: auto = collections::list_remove_at(&mut list, 1);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = collections::list_remove_at(&mut list, 1);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 371,
      "line_content": "let find_result: auto = collections::list_find(&list, &search_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let find_result: <explicit_type> = collections::list_find(&list, &search_value);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 390,
      "line_content": "let push_front_result: auto = collections::list_push_front(&mut list, \"new_first\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_front_result: <explicit_type> = collections::list_push_front(&mut list, \"new_first\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 396,
      "line_content": "let push_back_result: auto = collections::list_push_back(&mut list, \"new_last\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_back_result: <explicit_type> = collections::list_push_back(&mut list, \"new_last\");"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 405,
      "line_content": "let pop_front_result: auto = collections::list_pop_front(&mut list);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pop_front_result: <explicit_type> = collections::list_pop_front(&mut list);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 411,
      "line_content": "let pop_back_result: auto = collections::list_pop_back(&mut list);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pop_back_result: <explicit_type> = collections::list_pop_back(&mut list);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 427,
      "line_content": "fn demonstrate_collection_conversions() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_collection_conversions(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 432,
      "line_content": "let vec_result: auto = collections::vec_from_slice(vector_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let vec_result: <explicit_type> = collections::vec_from_slice(vector_data);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 438,
      "line_content": "let list_result: auto = collections::vec_to_list(&vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let list_result: <explicit_type> = collections::vec_to_list(&vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 444,
      "line_content": "let vec2_result: auto = collections::list_to_vec(&list);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let vec2_result: <explicit_type> = collections::list_to_vec(&list);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 450,
      "line_content": "let slice: auto = collections::vec_as_slice(&vec2);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let slice: <explicit_type> = collections::vec_as_slice(&vec2);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 473,
      "line_content": "fn demonstrate_performance_features() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_performance_features(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 477,
      "line_content": "let performance_config: auto = collections::VecConfig {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let performance_config: <explicit_type> = collections::VecConfig {;"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 489,
      "line_content": "let push_result: auto = collections::vec_push(&mut perf_vec, i as i32);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = collections::vec_push(&mut perf_vec, i as i32);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 504,
      "line_content": "let pop_result: auto = collections::vec_pop(&mut perf_vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pop_result: <explicit_type> = collections::vec_pop(&mut perf_vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 517,
      "line_content": "let shrink_result: auto = collections::vec_shrink_to_fit(&mut perf_vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let shrink_result: <explicit_type> = collections::vec_shrink_to_fit(&mut perf_vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 527,
      "line_content": "let reserve_result: auto = collections::vec_reserve(&mut perf_vec, 50);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let reserve_result: <explicit_type> = collections::vec_reserve(&mut perf_vec, 50);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 542,
      "line_content": "fn demonstrate_error_handling() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_error_handling(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 549,
      "line_content": "let get_result: auto = collections::vec_get(&test_vec, 0);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let get_result: <explicit_type> = collections::vec_get(&test_vec, 0);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 569,
      "line_content": "let pop_result: auto = collections::vec_pop(&mut test_vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pop_result: <explicit_type> = collections::vec_pop(&mut test_vec);"
    },
    {
      "file_path": "stdlib/examples/collections_comprehensive.asthra",
      "line_number": 587,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 19,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 60,
      "line_content": "fn demonstrate_core() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_core(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 103,
      "line_content": "fn demonstrate_environment() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_environment(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 155,
      "line_content": "fn demonstrate_strings() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_strings(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 222,
      "line_content": "fn demonstrate_collections() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_collections(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 303,
      "line_content": "fn demonstrate_filesystem() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_filesystem(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 403,
      "line_content": "fn demonstrate_debugging() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_debugging(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 435,
      "line_content": "fn demonstrate_time() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_time(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 493,
      "line_content": "fn demonstrate_math() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_math(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/comprehensive_example.asthra",
      "line_number": 559,
      "line_content": "fn demonstrate_random() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_random(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 10,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 14,
      "line_content": "let basic_result: auto = demonstrate_basic_file_operations();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let basic_result: <explicit_type> = demonstrate_basic_file_operations();"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 20,
      "line_content": "let error_msg: auto = fs.handle_fs_error(error);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let error_msg: <explicit_type> = fs.handle_fs_error(error);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 27,
      "line_content": "let advanced_result: auto = demonstrate_advanced_file_handling();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let advanced_result: <explicit_type> = demonstrate_advanced_file_handling();"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 33,
      "line_content": "let error_msg: auto = fs.handle_fs_error(error);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let error_msg: <explicit_type> = fs.handle_fs_error(error);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 40,
      "line_content": "let directory_result: auto = demonstrate_directory_operations();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let directory_result: <explicit_type> = demonstrate_directory_operations();"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 46,
      "line_content": "let error_msg: auto = fs.handle_fs_error(error);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let error_msg: <explicit_type> = fs.handle_fs_error(error);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 60,
      "line_content": "fn demonstrate_basic_file_operations() -> Result<void, fs.FSError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_basic_file_operations(none) -> Result<void, fs.FSError> {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 92,
      "line_content": "let copy_options: auto = fs.CopyOptions {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let copy_options: <explicit_type> = fs.CopyOptions {;"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 100,
      "line_content": "let copy_result: auto = fs.copy_with_options(\"test_basic.txt\", \"test_basic_copy.txt\", copy_options);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let copy_result: <explicit_type> = fs.copy_with_options(\"test_basic.txt\", \"test_basic_copy.txt\", copy_options);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 126,
      "line_content": "let append_result: auto = fs.append_string(\"test_basic.txt\", \"\\nAppended line\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let append_result: <explicit_type> = fs.append_string(\"test_basic.txt\", \"\\nAppended line\");"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 151,
      "line_content": "fn demonstrate_advanced_file_handling() -> Result<void, fs.FSError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_advanced_file_handling(none) -> Result<void, fs.FSError> {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 155,
      "line_content": "let open_options: auto = fs.OpenOptions {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let open_options: <explicit_type> = fs.OpenOptions {;"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 165,
      "line_content": "let file_result: auto = fs.open_with_options(\"test_advanced.txt\", open_options);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let file_result: <explicit_type> = fs.open_with_options(\"test_advanced.txt\", open_options);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 199,
      "line_content": "let seek_result: auto = file.seek(fs.SeekFrom.Start(0));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let seek_result: <explicit_type> = file.seek(fs.SeekFrom.Start(0));"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 215,
      "line_content": "let lines: auto = content.split(\"\\n\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let lines: <explicit_type> = content.split(\"\\n\");"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 229,
      "line_content": "let close_result: auto = file.close();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let close_result: <explicit_type> = file.close();"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 299,
      "line_content": "fn demonstrate_directory_operations() -> Result<void, fs.FSError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_directory_operations(none) -> Result<void, fs.FSError> {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 333,
      "line_content": "let entries_result: auto = fs.read_dir(\"test_dir\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let entries_result: <explicit_type> = fs.read_dir(\"test_dir\");"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 338,
      "line_content": "let type_str: auto = format_file_type(entry.file_type);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let type_str: <explicit_type> = format_file_type(entry.file_type);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 348,
      "line_content": "let dir_options: auto = fs.DirOptions {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dir_options: <explicit_type> = fs.DirOptions {;"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 356,
      "line_content": "let iterator_result: auto = fs.read_dir_with_options(\"test_dir\", dir_options);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let iterator_result: <explicit_type> = fs.read_dir_with_options(\"test_dir\", dir_options);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 362,
      "line_content": "let entry_result: auto = iterator.next();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let entry_result: <explicit_type> = iterator.next();"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 365,
      "line_content": "let type_str: auto = format_file_type(entry.file_type);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let type_str: <explicit_type> = format_file_type(entry.file_type);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 366,
      "line_content": "let relative_path: auto = entry.path.replace(\"test_dir/\", \"\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let relative_path: <explicit_type> = entry.path.replace(\"test_dir/\", \"\");"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 421,
      "line_content": "fn demonstrate_error_handling_patterns() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_error_handling_patterns(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 446,
      "line_content": "let dir_result: auto = fs.create_dir(\"test_file.txt\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let dir_result: <explicit_type> = fs.create_dir(\"test_file.txt\");"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 460,
      "line_content": "let safe_result: auto = safe_file_operation(\"test_file.txt\", fn(file: fs.File) -> Result<string, fs.FSError> {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let safe_result: <explicit_type> = safe_file_operation(\"test_file.txt\", fn(file: fs.File) -> Result<string, fs.FSError> {;"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 484,
      "line_content": "let result: auto = operation(file);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = operation(file);"
    },
    {
      "file_path": "stdlib/examples/fs_example.asthra",
      "line_number": 487,
      "line_content": "let close_result: auto = file.close();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let close_result: <explicit_type> = file.close();"
    },
    {
      "file_path": "stdlib/examples/io_example.asthra",
      "line_number": 9,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "stdlib/examples/io_example.asthra",
      "line_number": 218,
      "line_content": "fn demonstrate_error_handling() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn demonstrate_error_handling(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 11,
      "line_content": "fn main() -> i32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn main(none) -> i32 {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 45,
      "line_content": "fn example_simple_get() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_simple_get(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 58,
      "line_content": "let body_result: auto = response.body_as_string();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let body_result: <explicit_type> = response.body_as_string();"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 75,
      "line_content": "fn example_get_with_headers() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_get_with_headers(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 78,
      "line_content": "let client: auto = http::HTTPClient::new();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client: <explicit_type> = http::HTTPClient::new();"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 88,
      "line_content": "let response_result: auto = client.get_with_headers(url, headers);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = client.get_with_headers(url, headers);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 96,
      "line_content": "let content_type_result: auto = response.content_type();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let content_type_result: <explicit_type> = response.content_type();"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 113,
      "line_content": "fn example_post_json() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_post_json(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 119,
      "line_content": "let response_result: auto = http::post_json(url, json_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = http::post_json(url, json_data);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 135,
      "line_content": "let server_result: auto = response.get_header(\"Server\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let server_result: <explicit_type> = response.get_header(\"Server\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 148,
      "line_content": "fn example_post_form() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_post_form(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 160,
      "line_content": "let response_result: auto = http::post_form(url, form_data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = http::post_form(url, form_data);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 176,
      "line_content": "fn example_put_request() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_put_request(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 181,
      "line_content": "let data_bytes: auto = str::to_bytes(data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data_bytes: <explicit_type> = str::to_bytes(data);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 184,
      "line_content": "let response_result: auto = http::put(url, data_bytes, content_type);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = http::put(url, data_bytes, content_type);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 192,
      "line_content": "let header_length_result: auto = response.content_length_header();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_length_result: <explicit_type> = response.content_length_header();"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 214,
      "line_content": "fn example_delete_request() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_delete_request(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 219,
      "line_content": "let response_result: auto = http::delete(url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = http::delete(url);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 230,
      "line_content": "let header: auto = response.headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header: <explicit_type> = response.headers[i];"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 242,
      "line_content": "fn example_custom_client() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_custom_client(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 246,
      "line_content": "let client_result: auto = http::HTTPClient::with_config(;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let client_result: <explicit_type> = http::HTTPClient::with_config(;"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 258,
      "line_content": "let response_result: auto = client.get(url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = client.get(url);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 269,
      "line_content": "let location_result: auto = response.get_header(\"Location\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let location_result: <explicit_type> = response.get_header(\"Location\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 292,
      "line_content": "fn example_error_handling() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_error_handling(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 299,
      "line_content": "let invalid_url_result: auto = http::get(\"not-a-valid-url\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let invalid_url_result: <explicit_type> = http::get(\"not-a-valid-url\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 307,
      "line_content": "let nonexistent_result: auto = http::get(\"https://this-domain-definitely-does-not-exist-12345.com\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let nonexistent_result: <explicit_type> = http::get(\"https://this-domain-definitely-does-not-exist-12345.com\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 315,
      "line_content": "let not_found_result: auto = http::get(\"https://httpbin.org/status/404\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let not_found_result: <explicit_type> = http::get(\"https://httpbin.org/status/404\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 328,
      "line_content": "let server_error_result: auto = http::get(\"https://httpbin.org/status/500\");",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let server_error_result: <explicit_type> = http::get(\"https://httpbin.org/status/500\");"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 341,
      "line_content": "fn example_response_processing() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn example_response_processing(none) -> void {"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 345,
      "line_content": "let response_result: auto = http::get(url);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let response_result: <explicit_type> = http::get(url);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 363,
      "line_content": "let body_result: auto = response.body_as_string();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let body_result: <explicit_type> = response.body_as_string();"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 370,
      "line_content": "let preview_length: auto = if str::len(body) > 500 { 500 } else { str::len(body) };",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let preview_length: <explicit_type> = if str::len(body) > 500 { 500 } else { str::len(body) };"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 371,
      "line_content": "let preview: auto = str::substring(body, 0, preview_length);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let preview: <explicit_type> = str::substring(body, 0, preview_length);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 416,
      "line_content": "let header_name: auto = common_headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_name: <explicit_type> = common_headers[i];"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 417,
      "line_content": "let header_result: auto = response.get_header(header_name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_result: <explicit_type> = response.get_header(header_name);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 453,
      "line_content": "let header_name: auto = security_headers[i];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_name: <explicit_type> = security_headers[i];"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 454,
      "line_content": "let header_result: auto = response.get_header(header_name);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let header_result: <explicit_type> = response.get_header(header_name);"
    },
    {
      "file_path": "stdlib/examples/http_example.asthra",
      "line_number": 483,
      "line_content": "let print_result: auto = io::print_line(message);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let print_result: <explicit_type> = io::print_line(message);"
    },
    {
      "file_path": "stdlib/concurrent/coordination.asthra",
      "line_number": 55,
      "line_content": "pub fn new() -> SelectBuilder<T> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "pub fn new(none) -> SelectBuilder<T> {"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 121,
      "line_content": "let task_channel_result: auto = channel::<Task>(100);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_channel_result: <explicit_type> = channel::<Task>(100);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 122,
      "line_content": "let task_channel: auto = match task_channel_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_channel: <explicit_type> = match task_channel_result {;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 126,
      "line_content": "let result_channel_result: auto = channel::<Result<*mut void, string>>(100);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_channel_result: <explicit_type> = channel::<Result<*mut void, string>>(100);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 127,
      "line_content": "let result_channel: auto = match result_channel_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_channel: <explicit_type> = match result_channel_result {;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 131,
      "line_content": "let shutdown_signal_result: auto = channel::<()>(worker_count);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let shutdown_signal_result: <explicit_type> = channel::<()>(worker_count);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 132,
      "line_content": "let shutdown_signal: auto = match shutdown_signal_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let shutdown_signal: <explicit_type> = match shutdown_signal_result {;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 137,
      "line_content": "let pool: auto = WorkerPool {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let pool: <explicit_type> = WorkerPool {;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 148,
      "line_content": "let task_ch: auto = pool.task_channel.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_ch: <explicit_type> = pool.task_channel.clone();"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 149,
      "line_content": "let result_ch: auto = pool.result_channel.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result_ch: <explicit_type> = pool.result_channel.clone();"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 150,
      "line_content": "let shutdown_ch: auto = pool.shutdown_signal.clone();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let shutdown_ch: <explicit_type> = pool.shutdown_signal.clone();"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 174,
      "line_content": "let task_id: auto = self.next_task_id;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_id: <explicit_type> = self.next_task_id;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 177,
      "line_content": "let task_with_id: auto = Task::new(task.execute_fn, task.cleanup_fn, task.data, task_id);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let task_with_id: <explicit_type> = Task::new(task.execute_fn, task.cleanup_fn, task.data, task_id);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 282,
      "line_content": "let result: auto = task.execute();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let result: <explicit_type> = task.execute();"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 316,
      "line_content": "let func: auto = data as fn() -> Result<*mut void, string>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let func: <explicit_type> = data as fn() -> Result<*mut void, string>;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 335,
      "line_content": "extern fn get_current_time_ms() -> u64;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern fn get_current_time_ms(none) -> u64;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 363,
      "line_content": "let semaphore_result: auto = create_semaphore(max_rate);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let semaphore_result: <explicit_type> = create_semaphore(max_rate);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 364,
      "line_content": "let semaphore: auto = match semaphore_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let semaphore: <explicit_type> = match semaphore_result {;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 384,
      "line_content": "let current_time: auto = get_current_time_ms();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let current_time: <explicit_type> = get_current_time_ms();"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 385,
      "line_content": "let elapsed_seconds: auto = (current_time - self.last_refill) / 1000;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let elapsed_seconds: <explicit_type> = (current_time - self.last_refill) / 1000;"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 388,
      "line_content": "let permits_to_add: auto = elapsed_seconds * (self.refill_rate as u64);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let permits_to_add: <explicit_type> = elapsed_seconds * (self.refill_rate as u64);"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 418,
      "line_content": "* fn worker_pool_example() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "* fn worker_pool_example(none) -> Result<(), string> {"
    },
    {
      "file_path": "stdlib/concurrent/patterns.asthra",
      "line_number": 482,
      "line_content": "* fn rate_limiter_example() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "* fn rate_limiter_example(none) -> Result<(), string> {"
    },
    {
      "file_path": "stdlib/concurrent/channels.asthra",
      "line_number": 227,
      "line_content": "let channel: auto = match channel_result {;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let channel: <explicit_type> = match channel_result {;"
    },
    {
      "file_path": "stdlib/concurrent/channels.asthra",
      "line_number": 344,
      "line_content": "* fn producer_consumer_example() -> Result<(), string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "* fn producer_consumer_example(none) -> Result<(), string> {"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 51,
      "line_content": "fn vec_default_config() -> VecConfig {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn vec_default_config(none) -> VecConfig {"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 62,
      "line_content": "let config: auto = vec_default_config();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let config: <explicit_type> = vec_default_config();"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 109,
      "line_content": "let vec_result: auto = vec_with_capacity(slice.len);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let vec_result: <explicit_type> = vec_with_capacity(slice.len);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 114,
      "line_content": "let push_result: auto = vec_push(&mut vec, slice[i]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = vec_push(&mut vec, slice[i]);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 131,
      "line_content": "let grow_result: auto = vec_grow(vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let grow_result: <explicit_type> = vec_grow(vec);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 155,
      "line_content": "let grow_result: auto = vec_grow(vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let grow_result: <explicit_type> = vec_grow(vec);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 252,
      "line_content": "let find_result: auto = vec_find(vec, item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let find_result: <explicit_type> = vec_find(vec, item);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 262,
      "line_content": "let required_capacity: auto = (*dest).length + (*src).length;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let required_capacity: <explicit_type> = (*dest).length + (*src).length;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 264,
      "line_content": "let reserve_result: auto = vec_reserve(dest, (*src).length);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let reserve_result: <explicit_type> = vec_reserve(dest, (*src).length);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 274,
      "line_content": "let push_result: auto = vec_push(dest, *src_ptr);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = vec_push(dest, *src_ptr);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 300,
      "line_content": "let new_size: auto = (*vec).length * (*vec).element_size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_size: <explicit_type> = (*vec).length * (*vec).element_size;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 301,
      "line_content": "let realloc_result: auto = core.realloc(;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let realloc_result: <explicit_type> = core.realloc(;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 326,
      "line_content": "let load_factor: auto = (*vec).length as f64 / (*vec).capacity as f64;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let load_factor: <explicit_type> = (*vec).length as f64 / (*vec).capacity as f64;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 328,
      "line_content": "let new_capacity: auto = (*vec).capacity / 2;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_capacity: <explicit_type> = (*vec).capacity / 2;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 330,
      "line_content": "let _: auto = vec_resize(vec, new_capacity);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let _: <explicit_type> = vec_resize(vec, new_capacity);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 339,
      "line_content": "let required_capacity: auto = (*vec).length + additional;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let required_capacity: <explicit_type> = (*vec).length + additional;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 361,
      "line_content": "let new_size: auto = new_capacity * (*vec).element_size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_size: <explicit_type> = new_capacity * (*vec).element_size;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 363,
      "line_content": "let realloc_result: auto = core.realloc(;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let realloc_result: <explicit_type> = core.realloc(;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 385,
      "line_content": "let new_capacity: auto = if (*vec).capacity == 0 { ;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_capacity: <explicit_type> = if (*vec).capacity == 0 { ;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 426,
      "line_content": "let insert_result: auto = hashset_insert(&mut set, slice[i]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashset_insert(&mut set, slice[i]);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 440,
      "line_content": "let was_present: auto = hashset_contains(set, &item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let was_present: <explicit_type> = hashset_contains(set, &item);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 442,
      "line_content": "let insert_result: auto = hashmap_insert(&mut (*set).map, item, true);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashmap_insert(&mut (*set).map, item, true);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 460,
      "line_content": "let remove_result: auto = hashmap_remove(&mut (*set).map, item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = hashmap_remove(&mut (*set).map, item);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 506,
      "line_content": "let bucket: auto = (*src).map.buckets + bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = (*src).map.buckets + bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 513,
      "line_content": "let insert_result: auto = hashset_insert(dest, (*current).key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashset_insert(dest, (*current).key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 539,
      "line_content": "let bucket: auto = (*dest).map.buckets + bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = (*dest).map.buckets + bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 547,
      "line_content": "let insert_result: auto = hashset_insert(&mut temp_set, (*current).key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashset_insert(&mut temp_set, (*current).key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 569,
      "line_content": "let bucket: auto = temp_set.map.buckets + bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = temp_set.map.buckets + bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 574,
      "line_content": "let insert_result: auto = hashset_insert(dest, (*current).key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashset_insert(dest, (*current).key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 604,
      "line_content": "let bucket: auto = (*dest).map.buckets + bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = (*dest).map.buckets + bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 612,
      "line_content": "let push_result: auto = vec_push(&mut keys_to_remove, (*current).key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = vec_push(&mut keys_to_remove, (*current).key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 631,
      "line_content": "let key_ptr_result: auto = vec_get(&keys_to_remove, i);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let key_ptr_result: <explicit_type> = vec_get(&keys_to_remove, i);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 634,
      "line_content": "let remove_result: auto = hashset_remove(dest, key_ptr);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let remove_result: <explicit_type> = hashset_remove(dest, key_ptr);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 681,
      "line_content": "let bucket_count: auto = if capacity < 16 { 16 } else { next_power_of_two(capacity) };",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket_count: <explicit_type> = if capacity < 16 { 16 } else { next_power_of_two(capacity) };"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 682,
      "line_content": "let bucket_size: auto = sizeof::<HashBucket<K, V>>();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket_size: <explicit_type> = sizeof::<HashBucket<K, V>>();"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 683,
      "line_content": "let total_size: auto = bucket_count * bucket_size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let total_size: <explicit_type> = bucket_count * bucket_size;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 685,
      "line_content": "let buckets_result: auto = core.alloc(total_size, core.MemoryZone.GC);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let buckets_result: <explicit_type> = core.alloc(total_size, core.MemoryZone.GC);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 688,
      "line_content": "let buckets: auto = ptr as *mut HashBucket<K, V>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let buckets: <explicit_type> = ptr as *mut HashBucket<K, V>;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 694,
      "line_content": "let bucket: auto = buckets + i;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = buckets + i;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 735,
      "line_content": "let resize_result: auto = hashmap_resize(map, (*map).bucket_count * 2);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let resize_result: <explicit_type> = hashmap_resize(map, (*map).bucket_count * 2);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 742,
      "line_content": "let hash: auto = hash_key_with_seed(&key, (*map).hash_seed);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let hash: <explicit_type> = hash_key_with_seed(&key, (*map).hash_seed);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 743,
      "line_content": "let bucket_index: auto = hash % (*map).bucket_count;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket_index: <explicit_type> = hash % (*map).bucket_count;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 744,
      "line_content": "let bucket: auto = (*map).buckets + bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = (*map).buckets + bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 750,
      "line_content": "let old_value: auto = (*current).value;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let old_value: <explicit_type> = (*current).value;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 766,
      "line_content": "let new_bucket_result: auto = core.alloc(sizeof::<HashBucket<K, V>>(), core.MemoryZone.GC);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_bucket_result: <explicit_type> = core.alloc(sizeof::<HashBucket<K, V>>(), core.MemoryZone.GC);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 769,
      "line_content": "let new_bucket: auto = ptr as *mut HashBucket<K, V>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_bucket: <explicit_type> = ptr as *mut HashBucket<K, V>;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 793,
      "line_content": "let get_result: auto = hashmap_get(map, &key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let get_result: <explicit_type> = hashmap_get(map, &key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 797,
      "line_content": "let insert_result: auto = hashmap_insert(map, key, default_value);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let insert_result: <explicit_type> = hashmap_insert(map, key, default_value);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 801,
      "line_content": "let get_result2: auto = hashmap_get(map, &key);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let get_result2: <explicit_type> = hashmap_get(map, &key);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 816,
      "line_content": "let old_buckets: auto = (*map).buckets;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let old_buckets: <explicit_type> = (*map).buckets;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 817,
      "line_content": "let old_bucket_count: auto = (*map).bucket_count;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let old_bucket_count: <explicit_type> = (*map).bucket_count;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 820,
      "line_content": "let new_size: auto = new_bucket_count * sizeof::<HashBucket<K, V>>();",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_size: <explicit_type> = new_bucket_count * sizeof::<HashBucket<K, V>>();"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 821,
      "line_content": "let new_buckets_result: auto = core.alloc(new_size, core.MemoryZone.GC);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_buckets_result: <explicit_type> = core.alloc(new_size, core.MemoryZone.GC);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 825,
      "line_content": "let new_buckets: auto = ptr as *mut HashBucket<K, V>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_buckets: <explicit_type> = ptr as *mut HashBucket<K, V>;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 830,
      "line_content": "let bucket: auto = new_buckets + i;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = new_buckets + i;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 840,
      "line_content": "let old_size: auto = (*map).size;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let old_size: <explicit_type> = (*map).size;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 846,
      "line_content": "let old_bucket: auto = old_buckets + i;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let old_bucket: <explicit_type> = old_buckets + i;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 850,
      "line_content": "let next: auto = (*current).next;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let next: <explicit_type> = (*current).next;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 853,
      "line_content": "let new_bucket_index: auto = (*current).hash_value % new_bucket_count;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_bucket_index: <explicit_type> = (*current).hash_value % new_bucket_count;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 854,
      "line_content": "let new_bucket: auto = new_buckets + new_bucket_index;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_bucket: <explicit_type> = new_buckets + new_bucket_index;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 924,
      "line_content": "let push_result: auto = list_push_back(&mut list, slice[i]);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = list_push_back(&mut list, slice[i]);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 959,
      "line_content": "let node_result: auto = core.alloc(sizeof::<ListNode<T>>(), core.MemoryZone.GC);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let node_result: <explicit_type> = core.alloc(sizeof::<ListNode<T>>(), core.MemoryZone.GC);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 962,
      "line_content": "let new_node: auto = ptr as *mut ListNode<T>;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let new_node: <explicit_type> = ptr as *mut ListNode<T>;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1005,
      "line_content": "let data: auto = (*current).data;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let data: <explicit_type> = (*current).data;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1041,
      "line_content": "let find_result: auto = list_find(list, item);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let find_result: <explicit_type> = list_find(list, item);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1066,
      "line_content": "fn generate_hash_seed() -> u64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn generate_hash_seed(none) -> u64 {"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1067,
      "line_content": "extern \"asthra_runtime\" fn asthra_random_u64() -> u64;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_random_u64(none) -> u64;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1120,
      "line_content": "let vec_result: auto = vec_with_capacity(list_len(list));",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let vec_result: <explicit_type> = vec_with_capacity(list_len(list));"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1126,
      "line_content": "let push_result: auto = vec_push(&mut vec, (*current).data);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = vec_push(&mut vec, (*current).data);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1147,
      "line_content": "let element_ptr: auto = (*vec).data + i;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let element_ptr: <explicit_type> = (*vec).data + i;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1148,
      "line_content": "let push_result: auto = list_push_back(&mut list, *element_ptr);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let push_result: <explicit_type> = list_push_back(&mut list, *element_ptr);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1172,
      "line_content": "let slice: auto = vec_as_slice(vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let slice: <explicit_type> = vec_as_slice(vec);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1183,
      "line_content": "let slice: auto = vec_as_slice(vec);",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let slice: <explicit_type> = vec_as_slice(vec);"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1213,
      "line_content": "let bucket: auto = (*map).buckets + i;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let bucket: <explicit_type> = (*map).buckets + i;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1217,
      "line_content": "let next: auto = (*current).next;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let next: <explicit_type> = (*current).next;"
    },
    {
      "file_path": "stdlib/asthra/collections_enhanced.asthra",
      "line_number": 1239,
      "line_content": "let next: auto = (*current).next;",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let next: <explicit_type> = (*current).next;"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 75,
      "line_content": "fn take_panic_hook() -> Result<PanicHook, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn take_panic_hook(none) -> Result<PanicHook, string> {"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 76,
      "line_content": "extern \"asthra_runtime\" fn asthra_take_panic_hook() -> *mut void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_take_panic_hook(none) -> *mut void;"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 92,
      "line_content": "fn capture_backtrace() -> []StackFrame {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn capture_backtrace(none) -> []StackFrame {"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 93,
      "line_content": "extern \"asthra_runtime\" fn asthra_capture_backtrace() -> CStackTrace;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_capture_backtrace(none) -> CStackTrace;"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 120,
      "line_content": "fn print_backtrace() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn print_backtrace(none) -> void {"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 152,
      "line_content": "extern \"asthra_runtime\" fn asthra_is_debug_build() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_is_debug_build(none) -> i32;"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 192,
      "line_content": "fn is_debug() -> bool {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn is_debug(none) -> bool {"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 193,
      "line_content": "extern \"asthra_runtime\" fn asthra_is_debug_build() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_is_debug_build(none) -> i32;"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 201,
      "line_content": "fn breakpoint() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn breakpoint(none) -> void {"
    },
    {
      "file_path": "stdlib/asthra/panic.asthra",
      "line_number": 202,
      "line_content": "extern \"asthra_runtime\" fn asthra_breakpoint() -> void;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_breakpoint(none) -> void;"
    },
    {
      "file_path": "stdlib/asthra/error.asthra",
      "line_number": 152,
      "line_content": "let context_str: auto = self.contexts[0];",
      "violation_type": "ViolationType.AUTO_TYPE",
      "priority": "Priority.MEDIUM",
      "description": "Auto type annotation should be explicit type",
      "suggested_fix": "let context_str: <explicit_type> = self.contexts[0];"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 25,
      "line_content": "fn rng_new() -> Rng {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn rng_new(none) -> Rng {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 150,
      "line_content": "fn secure_rng_new() -> Result<SecureRng, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn secure_rng_new(none) -> Result<SecureRng, string> {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 217,
      "line_content": "fn init_global_rng() -> void {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn init_global_rng(none) -> void {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 227,
      "line_content": "fn random_u32() -> u32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn random_u32(none) -> u32 {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 234,
      "line_content": "fn random_u64() -> u64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn random_u64(none) -> u64 {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 241,
      "line_content": "fn random_f64() -> f64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn random_f64(none) -> f64 {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 248,
      "line_content": "fn random_f32() -> f32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn random_f32(none) -> f32 {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 276,
      "line_content": "fn random_bool() -> bool {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn random_bool(none) -> bool {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 293,
      "line_content": "fn secure_random_u32() -> Result<u32, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn secure_random_u32(none) -> Result<u32, string> {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 298,
      "line_content": "fn secure_random_u64() -> Result<u64, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn secure_random_u64(none) -> Result<u64, string> {"
    },
    {
      "file_path": "stdlib/asthra/random.asthra",
      "line_number": 565,
      "line_content": "fn get_entropy_seed() -> u64 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn get_entropy_seed(none) -> u64 {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 64,
      "line_content": "fn env_vars() -> []EnvVar {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn env_vars(none) -> []EnvVar {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 65,
      "line_content": "extern \"libc\" fn environ() -> **const u8;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn environ(none) -> **const u8;"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 102,
      "line_content": "fn current_dir() -> Result<string, fs.IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn current_dir(none) -> Result<string, fs.IOError> {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 137,
      "line_content": "fn current_exe() -> Result<string, fs.IOError> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn current_exe(none) -> Result<string, fs.IOError> {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 183,
      "line_content": "fn args() -> []string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn args(none) -> []string {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 184,
      "line_content": "extern \"asthra_runtime\" fn asthra_get_args() -> CStringArray;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"asthra_runtime\" fn asthra_get_args(none) -> CStringArray;"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 206,
      "line_content": "fn home_dir() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn home_dir(none) -> Result<string, string> {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 222,
      "line_content": "fn temp_dir() -> string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn temp_dir(none) -> string {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 243,
      "line_content": "fn username() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn username(none) -> Result<string, string> {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 258,
      "line_content": "fn hostname() -> Result<string, string> {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn hostname(none) -> Result<string, string> {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 286,
      "line_content": "fn is_windows() -> bool {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn is_windows(none) -> bool {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 295,
      "line_content": "fn is_unix() -> bool {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn is_unix(none) -> bool {"
    },
    {
      "file_path": "stdlib/asthra/env.asthra",
      "line_number": 300,
      "line_content": "fn os_name() -> string {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn os_name(none) -> string {"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 110,
      "line_content": "extern \"libc\" fn fork() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn fork(none) -> i32;"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 253,
      "line_content": "fn abort() -> ! {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn abort(none) -> ! {"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 254,
      "line_content": "extern \"libc\" fn abort() -> !;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn abort(none) -> !;"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 261,
      "line_content": "fn id() -> u32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn id(none) -> u32 {"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 262,
      "line_content": "extern \"libc\" fn getpid() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn getpid(none) -> i32;"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 269,
      "line_content": "fn parent_id() -> u32 {",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "fn parent_id(none) -> u32 {"
    },
    {
      "file_path": "stdlib/asthra/process.asthra",
      "line_number": 270,
      "line_content": "extern \"libc\" fn getppid() -> i32;",
      "violation_type": "ViolationType.EMPTY_PARAMS",
      "priority": "Priority.HIGH",
      "description": "Function with empty parameter list should use (none)",
      "suggested_fix": "extern \"libc\" fn getppid(none) -> i32;"
    }
  ]
}