name: Asthra Build and Test

on:
  workflow_call:
    inputs:
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean
      run_sanitizer_tests:
        description: 'Run sanitizer tests'
        required: false
        default: true
        type: boolean

env:
  ASTHRA_VERSION: "0.1.0"
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.platform }}, ${{ matrix.compiler }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - Clang only
          - platform: linux
            os: ubuntu-22.04
            compiler: clang
            arch: x64
            cc: clang
            cxx: clang++
            build_type: Release
            
          # macOS builds - Clang only
          - platform: macos
            os: macos-14
            compiler: clang
            arch: arm64
            cc: clang
            cxx: clang++
            build_type: Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # =============================================================================
    # PLATFORM-SPECIFIC SETUP
    # =============================================================================
            
    - name: Setup Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        set -e
        echo "=== Installing Linux Dependencies ==="
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential \
          cmake \
          libc6-dev \
          pkg-config \
          gperf
        
        # Install LLVM 18 (required)
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
        sudo apt-get update -y
        sudo apt-get install -y llvm-18 llvm-18-dev clang-18 || {
          echo "Failed to install LLVM 18, trying default version"
          sudo apt-get install -y llvm llvm-dev clang
        }
        
        # Install optional dependencies (non-critical)
        sudo apt-get install -y valgrind clang-tools || echo "Optional tools not available"
        sudo apt-get install -y libjson-c-dev || echo "json-c package not available, CMake will handle it"
        
        echo "✓ Linux dependencies installed successfully"
          
    - name: Setup macOS dependencies
      if: matrix.platform == 'macos'
      run: |
        set -e
        echo "=== Installing macOS Dependencies ==="
        # Don't update brew, just install what we need
        brew install \
          cmake \
          pkg-config \
          gperf \
          llvm@18 \
          json-c || echo "Some packages may already be installed"
        
        # Add LLVM to PATH
        echo "/opt/homebrew/opt/llvm@18/bin" >> $GITHUB_PATH
        echo "LDFLAGS=-L/opt/homebrew/opt/llvm@18/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/llvm@18/include" >> $GITHUB_ENV
        
        echo "✓ macOS dependencies installed successfully"
          
    # =============================================================================
    # COMPILER SETUP
    # =============================================================================
    
    - name: Set compiler environment
      run: |
        set -e
        echo "=== Setting Compiler Environment ==="
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
        
        # Verify compilers are available
        echo "Verifying C compiler: ${{ matrix.cc }}"
        ${{ matrix.cc }} --version
        echo "Verifying C++ compiler: ${{ matrix.cxx }}"
        ${{ matrix.cxx }} --version
        
        echo "✓ Compiler environment set successfully"
    
    - name: Verify LLVM installation
      run: |
        set -e
        echo "=== Verifying LLVM Installation ==="
        
        # Try to find llvm-config
        if command -v llvm-config-18 >/dev/null 2>&1; then
          echo "Found llvm-config-18"
          llvm-config-18 --version
          echo "LLVM_CONFIG=llvm-config-18" >> $GITHUB_ENV
        elif command -v llvm-config >/dev/null 2>&1; then
          echo "Found llvm-config"
          llvm-config --version
          echo "LLVM_CONFIG=llvm-config" >> $GITHUB_ENV
        else
          echo "ERROR: LLVM not found!"
          exit 1
        fi
        
        echo "✓ LLVM verified successfully"

    # =============================================================================
    # BUILD INFORMATION
    # =============================================================================
    
    - name: Display build information
      shell: bash
      run: |
        echo "=== Build Information ==="
        echo "Platform: ${{ matrix.platform }}"
        echo "OS: ${{ matrix.os }}"
        echo "Compiler: ${{ matrix.compiler }}"
        echo "Architecture: ${{ matrix.arch }}"
        echo "Build Type: ${{ matrix.build_type }}"
        echo ""
        echo "=== Compiler Information ==="
        ${{ matrix.cc }} --version || true
        echo ""
        echo "=== CMake Information ==="
        cmake --version

    # =============================================================================
    # BUILD
    # =============================================================================
    
    - name: Configure CMake
      run: |
        set -e
        echo "=== CMake Configuration ==="
        mkdir -p build
        cd build
        
        echo "Working directory: $(pwd)"
        echo "CMakeLists.txt exists: $(test -f ../CMakeLists.txt && echo 'YES' || echo 'NO')"
        echo "CMAKE_BUILD_TYPE: ${{ matrix.build_type }}"
        echo "CMAKE_C_COMPILER: ${{ matrix.cc }}"
        echo "CMAKE_CXX_COMPILER: ${{ matrix.cxx }}"
        echo ""
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
        
        echo "✓ CMake configuration completed successfully"

    - name: Build Asthra compiler
      run: |
        set -e
        echo "=== Building Asthra Compiler ==="
        cd build
        
        echo "Build directory contents before build:"
        ls -la
        echo ""
        
        # Use a reasonable number of parallel jobs
        JOBS=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        echo "Building with $JOBS parallel jobs"
        
        cmake --build . --config ${{ matrix.build_type }} -j$JOBS
        
        echo "✓ Build completed successfully"

    - name: Verify build artifacts
      run: |
        echo "=== Verifying Build Artifacts ==="
        if [[ -f "build/asthra" ]]; then
          echo "✓ Asthra compiler built successfully"
          ls -la build/asthra
        elif [[ -f "build/bin/asthra" ]]; then
          echo "✓ Asthra compiler built successfully"
          ls -la build/bin/asthra
        else
          echo "✗ Asthra compiler not found"
          echo "Contents of build directory:"
          find build -name "asthra*" -o -name "*.exe" | head -10
          exit 1
        fi

    # =============================================================================
    # BASIC TESTING
    # =============================================================================
    
    - name: Run basic tests
      run: |
        echo "=== Running Basic Tests ==="
        cd build
        ctest --output-on-failure --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2) || echo "Some tests may have failed"

    - name: Test compiler version
      run: |
        echo "=== Testing Compiler Version ==="
        if [[ -f "build/asthra" ]]; then
          ./build/asthra --version || echo "Version command not implemented"
        elif [[ -f "build/bin/asthra" ]]; then
          ./build/bin/asthra --version || echo "Version command not implemented"
        else
          echo "Asthra binary not found for version test"
        fi
        
    - name: Test compiler help
      run: |
        echo "=== Testing Compiler Help ==="
        if [[ -f "build/asthra" ]]; then
          ./build/asthra --help || echo "Help command not implemented"
        elif [[ -f "build/bin/asthra" ]]; then
          ./build/bin/asthra --help || echo "Help command not implemented"
        else
          echo "Asthra binary not found for help test"
        fi

    # =============================================================================
    # SANITIZER TESTS (Optional)
    # =============================================================================
    
    - name: Run sanitizer tests
      if: inputs.run_sanitizer_tests && matrix.platform == 'linux'
      run: |
        echo "=== Running Sanitizer Tests ==="
        # Reconfigure with sanitizers
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_C_FLAGS="-fsanitize=address,undefined" -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined"
        cmake --build . --config Debug
        ctest --output-on-failure || echo "Sanitizer tests may have failed"

    # =============================================================================
    # PERFORMANCE TESTS (Optional)
    # =============================================================================
    
    - name: Run performance benchmarks
      if: inputs.run_performance_tests && matrix.platform == 'linux'
      run: |
        echo "=== Running Performance Benchmarks ==="
        cd build
        # Look for benchmark targets
        cmake --build . --target benchmark 2>/dev/null || echo "No benchmark target available"

    # =============================================================================
    # ARTIFACT COLLECTION
    # =============================================================================
    
    - name: Collect build artifacts
      if: always()
      run: |
        echo "=== Collecting Build Artifacts ==="
        mkdir -p artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}
        
        # Copy binaries and libraries
        find build -name "asthra*" -type f -executable -exec cp {} artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/ \; 2>/dev/null || true
        find build -name "*.a" -exec cp {} artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/ \; 2>/dev/null || true
        find build -name "*.so" -exec cp {} artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/ \; 2>/dev/null || true
        
        # Copy logs
        cp *.log artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/ 2>/dev/null || true
        
        echo "Artifacts collected:"
        ls -la artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: asthra-${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}
        path: artifacts/${{ matrix.platform }}-${{ matrix.compiler }}-${{ matrix.arch }}/
        retention-days: 7
