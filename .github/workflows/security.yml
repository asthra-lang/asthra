name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  CFLAGS: -std=c17 -Wall -Wextra -Wpedantic

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang libc6-dev gperf libjson-c-dev

      - name: Build for CodeQL
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install static analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck clang-tidy splint flawfinder

      - name: Run cppcheck
        run: |
          echo "=== CPPCheck Analysis ===" | tee static-analysis-report.txt
          cppcheck --enable=all --error-exitcode=0 --xml --xml-version=2 \
            --suppress=missingIncludeSystem --suppress=unusedFunction \
            --suppress=unmatchedSuppression --output-file=cppcheck-results.xml \
            src/ runtime/ tests/ tools/ 2>&1 | tee -a static-analysis-report.txt

      - name: Run clang-tidy
        run: |
          echo "=== Clang-Tidy Analysis ===" | tee -a static-analysis-report.txt
          find src runtime -name "*.c" -exec clang-tidy {} -- -std=c17 \; 2>&1 | tee -a static-analysis-report.txt || true

      - name: Run Flawfinder
        run: |
          echo "=== Flawfinder Security Analysis ===" | tee -a static-analysis-report.txt
          flawfinder --html --context --minlevel=2 src/ runtime/ > flawfinder-report.html
          flawfinder --minlevel=2 src/ runtime/ | tee -a static-analysis-report.txt

      - name: Run Splint (if applicable)
        run: |
          echo "=== Splint Analysis ===" | tee -a static-analysis-report.txt
          # Splint can be very strict, so we run it with relaxed settings
          find src runtime -name "*.c" -exec splint -weak {} \; 2>&1 | head -100 | tee -a static-analysis-report.txt || true

      - name: Upload static analysis results
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: |
            static-analysis-report.txt
            cppcheck-results.xml
            flawfinder-report.html

  sanitizer-security:
    name: Sanitizer Security Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [asan, ubsan, tsan]
        include:
          - sanitizer: asan
            description: "AddressSanitizer - Memory error detection"
          - sanitizer: ubsan
            description: "UndefinedBehaviorSanitizer - Undefined behavior detection"
          - sanitizer: tsan
            description: "ThreadSanitizer - Data race detection"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang libc6-dev gperf libjson-c-dev

      - name: Build with ${{ matrix.sanitizer }}
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer == 'asan' && 'address' || matrix.sanitizer == 'ubsan' && 'undefined' || matrix.sanitizer == 'tsan' && 'thread' || matrix.sanitizer }}"
          cmake --build . --config Debug

      - name: Run security tests with ${{ matrix.sanitizer }}
        run: |
          echo "=== ${{ matrix.description }} ===" | tee sanitizer-${{ matrix.sanitizer }}-report.txt
          
          # Run all available tests with sanitizer
          cd build
          ctest --output-on-failure 2>&1 | tee -a ../sanitizer-${{ matrix.sanitizer }}-report.txt || true

      - name: Upload sanitizer results
        uses: actions/upload-artifact@v4
        with:
          name: sanitizer-${{ matrix.sanitizer }}-results
          path: sanitizer-${{ matrix.sanitizer }}-report.txt

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for hardcoded secrets
        run: |
          echo "=== Secret Scanning ===" | tee dependency-scan-report.txt
          
          # Look for potential hardcoded secrets, keys, passwords
          echo "Scanning for potential secrets..." | tee -a dependency-scan-report.txt
          
          # Common secret patterns
          grep -r -i "password\s*=" src/ runtime/ tests/ tools/ || echo "No hardcoded passwords found" | tee -a dependency-scan-report.txt
          grep -r -i "secret\s*=" src/ runtime/ tests/ tools/ || echo "No hardcoded secrets found" | tee -a dependency-scan-report.txt
          grep -r -i "api_key\s*=" src/ runtime/ tests/ tools/ || echo "No hardcoded API keys found" | tee -a dependency-scan-report.txt
          grep -r -i "token\s*=" src/ runtime/ tests/ tools/ || echo "No hardcoded tokens found" | tee -a dependency-scan-report.txt

      - name: Check for vulnerable patterns
        run: |
          echo "=== Vulnerable Pattern Analysis ===" | tee -a dependency-scan-report.txt
          
          # Check for potentially dangerous C functions
          echo "Checking for dangerous C functions..." | tee -a dependency-scan-report.txt
          grep -r "strcpy\|strcat\|sprintf\|gets\|scanf" src/ runtime/ tests/ tools/ | head -20 | tee -a dependency-scan-report.txt || echo "No dangerous functions found" | tee -a dependency-scan-report.txt
          
          # Check for potential buffer overflow patterns
          echo "Checking for potential buffer overflow patterns..." | tee -a dependency-scan-report.txt
          grep -r "malloc\|calloc\|realloc\|free" src/ runtime/ | wc -l | xargs echo "Memory allocation calls found:" | tee -a dependency-scan-report.txt

      - name: License compliance check
        run: |
          echo "=== License Compliance ===" | tee -a dependency-scan-report.txt
          
          # Check for license headers in source files
          echo "Checking license headers..." | tee -a dependency-scan-report.txt
          find src runtime -name "*.c" -o -name "*.h" | while read file; do
            if ! head -10 "$file" | grep -i "copyright\|license" > /dev/null; then
              echo "Missing license header: $file" | tee -a dependency-scan-report.txt
            fi
          done

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: dependency-scan-report.txt

  fuzzing-security:
    name: Fuzzing Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install fuzzing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang libc6-dev gperf afl++ libjson-c-dev

      - name: Build for fuzzing
        run: |
          # Build with AFL++ instrumentation
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=afl-clang-fast -DCMAKE_CXX_COMPILER=afl-clang-fast++
          cmake --build . --config Debug

      - name: Prepare fuzzing inputs
        run: |
          mkdir -p fuzz_inputs
          mkdir -p fuzz_outputs
          
          # Create basic test inputs for fuzzing
          echo "hello world" > fuzz_inputs/basic.txt
          echo "int main() { return 0; }" > fuzz_inputs/simple.asthra
          echo "" > fuzz_inputs/empty.txt
          
          # Add some edge cases
          printf "\x00\x01\x02\x03" > fuzz_inputs/binary.bin
          python3 -c "print('A' * 1000)" > fuzz_inputs/large.txt

      - name: Run basic fuzzing test
        timeout-minutes: 5
        run: |
          echo "=== Fuzzing Security Test ===" | tee fuzzing-report.txt
          
          # Run a short fuzzing session (5 minutes max due to CI constraints)
          if [ -f build/asthra ]; then
            timeout 300 afl-fuzz -i fuzz_inputs -o fuzz_outputs -x /usr/share/afl/dictionaries/c.dict -- build/asthra @@ 2>&1 | tee -a fuzzing-report.txt || true
          elif [ -f build/bin/asthra ]; then
            timeout 300 afl-fuzz -i fuzz_inputs -o fuzz_outputs -x /usr/share/afl/dictionaries/c.dict -- build/bin/asthra @@ 2>&1 | tee -a fuzzing-report.txt || true
          fi
          
          # Check for crashes
          if [ -d fuzz_outputs/crashes ]; then
            echo "Crashes found during fuzzing:" | tee -a fuzzing-report.txt
            ls -la fuzz_outputs/crashes/ | tee -a fuzzing-report.txt
          else
            echo "No crashes found during fuzzing session" | tee -a fuzzing-report.txt
          fi

      - name: Upload fuzzing results
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-results
          path: |
            fuzzing-report.txt
            fuzz_outputs/

  security-hardening:
    name: Security Hardening Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang libc6-dev gperf checksec libjson-c-dev

      - name: Build with security flags
        run: |
          # Build with maximum security hardening
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE" -DCMAKE_EXE_LINKER_FLAGS="-Wl,-z,relro -Wl,-z,now -pie"
          cmake --build . --config Release

      - name: Check binary security features
        run: |
          echo "=== Binary Security Analysis ===" | tee security-hardening-report.txt
          
          if [ -f build/asthra ]; then
            echo "Checking security features of asthra binary:" | tee -a security-hardening-report.txt
            checksec --file=build/asthra | tee -a security-hardening-report.txt
            
            echo "Binary information:" | tee -a security-hardening-report.txt
            file build/asthra | tee -a security-hardening-report.txt
            
            echo "Checking for stack canaries:" | tee -a security-hardening-report.txt
            objdump -d build/asthra | grep -i stack | head -10 | tee -a security-hardening-report.txt || echo "No stack canary information found" | tee -a security-hardening-report.txt
          elif [ -f build/bin/asthra ]; then
            echo "Checking security features of asthra binary:" | tee -a security-hardening-report.txt
            checksec --file=build/bin/asthra | tee -a security-hardening-report.txt
            
            echo "Binary information:" | tee -a security-hardening-report.txt
            file build/bin/asthra | tee -a security-hardening-report.txt
            
            echo "Checking for stack canaries:" | tee -a security-hardening-report.txt
            objdump -d build/bin/asthra | grep -i stack | head -10 | tee -a security-hardening-report.txt || echo "No stack canary information found" | tee -a security-hardening-report.txt
          fi

      - name: Check compilation flags
        run: |
          echo "=== Compilation Security Flags ===" | tee -a security-hardening-report.txt
          echo "CMake flags used for security hardening" | tee -a security-hardening-report.txt
          
          # Show CMake configuration
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE" -DCMAKE_EXE_LINKER_FLAGS="-Wl,-z,relro -Wl,-z,now -pie" 2>&1 | tee -a ../security-hardening-report.txt

      - name: Upload security hardening results
        uses: actions/upload-artifact@v4
        with:
          name: security-hardening-results
          path: security-hardening-report.txt

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, static-analysis, sanitizer-security, dependency-scan, fuzzing-security, security-hardening]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results"
          merge-multiple: true

      - name: Generate comprehensive security report
        run: |
          echo "# Asthra Security Analysis Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date -u)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "This report contains the results of comprehensive security analysis including:" >> security-report.md
          echo "- Static code analysis" >> security-report.md
          echo "- Dynamic analysis with sanitizers" >> security-report.md
          echo "- Dependency and vulnerability scanning" >> security-report.md
          echo "- Fuzzing security tests" >> security-report.md
          echo "- Binary security hardening verification" >> security-report.md
          echo "" >> security-report.md
          
          # Include results from each analysis
          for report in static-analysis-report.txt dependency-scan-report.txt fuzzing-report.txt security-hardening-report.txt; do
            if [ -f "$report" ]; then
              echo "## $(basename $report .txt | tr '-' ' ' | tr '[:lower:]' '[:upper:]')" >> security-report.md
              echo '```' >> security-report.md
              cat "$report" >> security-report.md
              echo '```' >> security-report.md
              echo "" >> security-report.md
            fi
          done
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review any issues identified in the static analysis" >> security-report.md
          echo "2. Address any memory safety issues found by sanitizers" >> security-report.md
          echo "3. Ensure all dependencies are up to date and secure" >> security-report.md
          echo "4. Consider implementing additional fuzzing in development workflow" >> security-report.md
          echo "5. Verify binary hardening features are enabled in production builds" >> security-report.md

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md

      - name: Security analysis complete
        run: |
          echo "✅ Comprehensive security analysis completed"
          echo "Review the security report artifact for detailed findings" 
