name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'runtime/**'
      - 'README.md'
      - 'Doxyfile'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'runtime/**'
      - 'README.md'
      - 'Doxyfile'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  CFLAGS: -std=c17 -Wall -Wextra -Wpedantic

jobs:
  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz aspell aspell-en

      - name: Check documentation completeness
        run: |
          echo "=== Documentation Completeness Check ===" | tee doc-quality-report.txt
          
          # Check for README files in major directories
          for dir in src runtime tests tools examples; do
            if [ -d "$dir" ] && [ ! -f "$dir/README.md" ]; then
              echo "Missing README.md in $dir/" | tee -a doc-quality-report.txt
            fi
          done
          
          # Check for function documentation in header files
          echo "Checking function documentation coverage..." | tee -a doc-quality-report.txt
          find src runtime -name "*.h" | while read file; do
            functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*\s*(" "$file" 2>/dev/null || echo 0)
            documented=$(grep -c "/\*\*" "$file" 2>/dev/null || echo 0)
            if [ "$functions" -gt 0 ] && [ "$documented" -eq 0 ]; then
              echo "Low documentation coverage in $file (functions: $functions, documented: $documented)" | tee -a doc-quality-report.txt
            fi
          done

      - name: Spell check documentation
        run: |
          echo "=== Spell Check ===" | tee -a doc-quality-report.txt
          
          # Check spelling in markdown files
          find docs -name "*.md" -exec aspell --mode=markdown --personal=/dev/null list {} \; | sort | uniq > spelling-errors.txt || true
          if [ -s spelling-errors.txt ]; then
            echo "Potential spelling errors found:" | tee -a doc-quality-report.txt
            head -20 spelling-errors.txt | tee -a doc-quality-report.txt
          else
            echo "No spelling errors found" | tee -a doc-quality-report.txt
          fi

      - name: Check markdown formatting
        run: |
          echo "=== Markdown Formatting Check ===" | tee -a doc-quality-report.txt
          
          # Check for common markdown issues
          find docs -name "*.md" | while read file; do
            # Check for missing blank lines around headers
            if grep -n "^#" "$file" | while read line; do
              line_num=$(echo "$line" | cut -d: -f1)
              if [ "$line_num" -gt 1 ]; then
                prev_line=$((line_num - 1))
                if sed -n "${prev_line}p" "$file" | grep -q "^[^[:space:]]*$"; then
                  echo "Missing blank line before header at line $line_num in $file" | tee -a doc-quality-report.txt
                fi
              fi
            done; then
              :
            fi
          done

      - name: Upload documentation quality report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-report
          path: |
            doc-quality-report.txt
            spelling-errors.txt

  build-doxygen:
    name: Build Doxygen Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz build-essential clang libc6-dev

      - name: Generate Doxygen documentation
        run: |
          echo "=== Generating Doxygen Documentation ===" | tee doxygen-build.log
          doxygen Doxyfile 2>&1 | tee -a doxygen-build.log

      - name: Check for Doxygen warnings
        run: |
          if grep -i "warning\|error" doxygen-build.log; then
            echo "Doxygen warnings/errors found:"
            grep -i "warning\|error" doxygen-build.log
            echo "Please fix these issues for better documentation quality"
          else
            echo "✅ No Doxygen warnings found"
          fi

      - name: Verify documentation output
        run: |
          if [ -d "docs/html" ]; then
            echo "✅ HTML documentation generated successfully"
            echo "Documentation size: $(du -sh docs/html)"
            echo "Number of HTML files: $(find docs/html -name "*.html" | wc -l)"
          else
            echo "❌ HTML documentation not found"
            exit 1
          fi

      - name: Upload Doxygen documentation
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-docs
          path: |
            docs/html/
            doxygen-build.log

  build-manual:
    name: Build Manual Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-latex-extra

      - name: Build HTML manual
        run: |
          mkdir -p build/docs
          
          if [ -f docs/manual.md ]; then
            echo "Building HTML manual from docs/manual.md"
            pandoc docs/manual.md -o build/docs/manual.html \
              --standalone --toc --css=style.css \
              --metadata title="Asthra Language Manual"
          fi
          
          if [ -f docs/spec.md ]; then
            echo "Building HTML specification from docs/spec.md"
            pandoc docs/spec.md -o build/docs/specification.html \
              --standalone --toc --css=style.css \
              --metadata title="Asthra Language Specification"
          fi

      - name: Build PDF manual
        run: |
          if [ -f docs/manual.md ]; then
            echo "Building PDF manual from docs/manual.md"
            pandoc docs/manual.md -o build/docs/manual.pdf \
              --pdf-engine=pdflatex \
              --metadata title="Asthra Language Manual"
          fi
          
          if [ -f docs/spec.md ]; then
            echo "Building PDF specification from docs/spec.md"
            pandoc docs/spec.md -o build/docs/specification.pdf \
              --pdf-engine=pdflatex \
              --metadata title="Asthra Language Specification"
          fi

      - name: Create documentation index
        run: |
          cat > build/docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Asthra Programming Language Documentation</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .section { margin: 20px 0; }
                  .link { display: block; margin: 10px 0; }
                  a { color: #0066cc; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>Asthra Programming Language Documentation</h1>
              
              <div class="section">
                  <h2>Language Documentation</h2>
                  <a href="manual.html" class="link">Language Manual (HTML)</a>
                  <a href="manual.pdf" class="link">Language Manual (PDF)</a>
                  <a href="specification.html" class="link">Language Specification (HTML)</a>
                  <a href="specification.pdf" class="link">Language Specification (PDF)</a>
              </div>
              
              <div class="section">
                  <h2>API Documentation</h2>
                  <a href="../html/index.html" class="link">API Reference (Doxygen)</a>
              </div>
              
              <div class="section">
                  <h2>Additional Resources</h2>
                  <a href="https://github.com/asthra-lang/asthra" class="link">Source Code Repository</a>
                  <a href="https://github.com/asthra-lang/asthra/tree/main/examples" class="link">Code Examples</a>
              </div>
          </body>
          </html>
          EOF

      - name: Upload manual documentation
        uses: actions/upload-artifact@v4
        with:
          name: manual-docs
          path: build/docs/

  combine-documentation:
    name: Combine Documentation
    runs-on: ubuntu-latest
    needs: [build-doxygen, build-manual]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Doxygen docs
        uses: actions/download-artifact@v4
        with:
          name: doxygen-docs
          path: combined-docs/

      - name: Download manual docs
        uses: actions/download-artifact@v4
        with:
          name: manual-docs
          path: combined-docs/

      - name: Create combined documentation structure
        run: |
          mkdir -p combined-docs/final
          
          # Copy manual docs to root
          if [ -d combined-docs/build/docs ]; then
            cp -r combined-docs/build/docs/* combined-docs/final/
          fi
          
          # Copy Doxygen HTML to api subdirectory
          if [ -d combined-docs/docs/html ]; then
            mkdir -p combined-docs/final/api
            cp -r combined-docs/docs/html/* combined-docs/final/api/
          fi
          
          # Update index.html to point to correct API location
          if [ -f combined-docs/final/index.html ]; then
            sed -i 's|../html/index.html|api/index.html|g' combined-docs/final/index.html
          fi

      - name: Upload combined documentation
        uses: actions/upload-artifact@v4
        with:
          name: combined-documentation
          path: combined-docs/final/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [documentation-quality, combine-documentation]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download combined documentation
        uses: actions/download-artifact@v4
        with:
          name: combined-documentation
          path: docs-to-deploy/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-to-deploy/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  documentation-links:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install link checker
        run: |
          npm install -g markdown-link-check

      - name: Check links in documentation
        run: |
          echo "=== Documentation Link Check ===" | tee link-check-report.txt
          
          # Check links in all markdown files
          find docs -name "*.md" | while read file; do
            echo "Checking links in $file..." | tee -a link-check-report.txt
            markdown-link-check "$file" | tee -a link-check-report.txt || true
          done
          
          # Check README.md
          if [ -f README.md ]; then
            echo "Checking links in README.md..." | tee -a link-check-report.txt
            markdown-link-check README.md | tee -a link-check-report.txt || true
          fi

      - name: Upload link check report
        uses: actions/upload-artifact@v4
        with:
          name: link-check-report
          path: link-check-report.txt

  documentation-metrics:
    name: Documentation Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate documentation metrics
        run: |
          echo "# Asthra Documentation Metrics" > doc-metrics.md
          echo "" >> doc-metrics.md
          echo "Generated on: $(date -u)" >> doc-metrics.md
          echo "Commit: ${{ github.sha }}" >> doc-metrics.md
          echo "" >> doc-metrics.md
          
          echo "## File Counts" >> doc-metrics.md
          echo "- Markdown files: $(find . -name "*.md" | wc -l)" >> doc-metrics.md
          echo "- C source files: $(find src runtime -name "*.c" | wc -l)" >> doc-metrics.md
          echo "- C header files: $(find src runtime -name "*.h" | wc -l)" >> doc-metrics.md
          echo "" >> doc-metrics.md
          
          echo "## Documentation Coverage" >> doc-metrics.md
          total_functions=$(grep -r "^[a-zA-Z_][a-zA-Z0-9_]*\s*(" src/ runtime/ --include="*.h" | wc -l)
          documented_functions=$(grep -r "/\*\*" src/ runtime/ --include="*.h" | wc -l)
          echo "- Total functions in headers: $total_functions" >> doc-metrics.md
          echo "- Documented functions: $documented_functions" >> doc-metrics.md
          if [ "$total_functions" -gt 0 ]; then
            coverage=$((documented_functions * 100 / total_functions))
            echo "- Documentation coverage: ${coverage}%" >> doc-metrics.md
          fi
          echo "" >> doc-metrics.md
          
          echo "## Line Counts" >> doc-metrics.md
          echo "- Total lines in docs/: $(find docs -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo 0)" >> doc-metrics.md
          echo "- Total lines in README.md: $(wc -l README.md | awk '{print $1}' || echo 0)" >> doc-metrics.md
          echo "- Total lines in source code: $(find src runtime -name "*.c" -o -name "*.h" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo 0)" >> doc-metrics.md

      - name: Upload documentation metrics
        uses: actions/upload-artifact@v4
        with:
          name: documentation-metrics
          path: doc-metrics.md

  documentation-report:
    name: Documentation Report
    runs-on: ubuntu-latest
    needs: [documentation-quality, documentation-links, documentation-metrics]
    if: always()
    steps:
      - name: Download all documentation artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-report*"
          merge-multiple: true

      - name: Download documentation metrics
        uses: actions/download-artifact@v4
        with:
          name: documentation-metrics

      - name: Generate comprehensive documentation report
        run: |
          echo "# Asthra Documentation Analysis Report" > comprehensive-doc-report.md
          echo "" >> comprehensive-doc-report.md
          echo "Generated on: $(date -u)" >> comprehensive-doc-report.md
          echo "Commit: ${{ github.sha }}" >> comprehensive-doc-report.md
          echo "" >> comprehensive-doc-report.md
          
          # Include metrics
          if [ -f doc-metrics.md ]; then
            cat doc-metrics.md >> comprehensive-doc-report.md
            echo "" >> comprehensive-doc-report.md
          fi
          
          # Include quality report
          if [ -f doc-quality-report.txt ]; then
            echo "## Documentation Quality Issues" >> comprehensive-doc-report.md
            echo '```' >> comprehensive-doc-report.md
            cat doc-quality-report.txt >> comprehensive-doc-report.md
            echo '```' >> comprehensive-doc-report.md
            echo "" >> comprehensive-doc-report.md
          fi
          
          # Include link check report
          if [ -f link-check-report.txt ]; then
            echo "## Link Check Results" >> comprehensive-doc-report.md
            echo '```' >> comprehensive-doc-report.md
            tail -50 link-check-report.txt >> comprehensive-doc-report.md
            echo '```' >> comprehensive-doc-report.md
            echo "" >> comprehensive-doc-report.md
          fi
          
          echo "## Recommendations" >> comprehensive-doc-report.md
          echo "1. Review and fix any broken links identified" >> comprehensive-doc-report.md
          echo "2. Add missing README files in subdirectories" >> comprehensive-doc-report.md
          echo "3. Improve function documentation coverage" >> comprehensive-doc-report.md
          echo "4. Fix any spelling errors in documentation" >> comprehensive-doc-report.md
          echo "5. Ensure proper markdown formatting throughout" >> comprehensive-doc-report.md

      - name: Upload comprehensive documentation report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-documentation-report
          path: comprehensive-doc-report.md

      - name: Documentation workflow complete
        run: |
          echo "✅ Documentation workflow completed"
          echo "Check artifacts for detailed reports and generated documentation" 
