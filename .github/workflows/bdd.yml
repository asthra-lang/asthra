name: Asthra BDD Tests

on:
  workflow_call:

env:
  ASTHRA_VERSION: "0.1.0"

jobs:
  bdd-tests:
    name: BDD Tests (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - Clang only
          - platform: linux
            os: ubuntu-22.04
            cc: clang-18
            cxx: clang++-18
            
          # macOS - Clang only
          - platform: macos
            os: macos-14
            cc: /opt/homebrew/opt/llvm@18/bin/clang
            cxx: /opt/homebrew/opt/llvm@18/bin/clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # =============================================================================
    # PLATFORM-SPECIFIC SETUP
    # =============================================================================
    
    - name: Setup Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        set -e
        echo "=== Installing Linux BDD Dependencies ==="
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          gperf \
          ruby \
          ruby-dev \
          wget \
          software-properties-common
        
        # Install LLVM 18 (required - matching main build workflow)
        echo "Installing LLVM 18..."
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-18 main"
        sudo apt-get update -y
        sudo apt-get install -y llvm-18 llvm-18-dev clang-18 lld-18 llvm-18-tools
        
        # Verify LLVM 18 installation
        echo "Checking clang-18 version..."
        which clang-18 && clang-18 --version
        
        # Install Cucumber for BDD
        sudo gem install cucumber --no-document
        
        # Note: BDD tests use custom C-based framework, no external testing libraries needed
        
        echo "✓ Linux BDD dependencies installed successfully"
        
    - name: Setup macOS dependencies
      if: matrix.platform == 'macos'
      run: |
        set -e
        echo "=== Installing macOS BDD Dependencies ==="
        
        # Install basic dependencies
        brew install \
          cmake \
          pkg-config \
          gperf \
          llvm@18 || echo "Some packages may already be installed"
        
        # Add LLVM 18 to PATH
        echo "/opt/homebrew/opt/llvm@18/bin" >> $GITHUB_PATH
        echo "LDFLAGS=-L/opt/homebrew/opt/llvm@18/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/llvm@18/include" >> $GITHUB_ENV
        
        # Install Ruby and Cucumber
        brew install ruby || echo "Ruby already installed"
        echo 'export PATH="/opt/homebrew/opt/ruby/bin:$PATH"' >> $GITHUB_ENV
        export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
        gem install cucumber --no-document
        
        # Note: BDD tests use custom C-based framework, no external testing libraries needed
        
        echo "✓ macOS BDD dependencies installed successfully"

    # =============================================================================
    # COMPILER SETUP
    # =============================================================================
    
    - name: Set compiler environment
      run: |
        set -e
        echo "=== Setting Compiler Environment ==="
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
        
        # Verify compilers
        ${{ matrix.cc }} --version
        ${{ matrix.cxx }} --version
        
        echo "✓ Compiler environment set successfully"

    # =============================================================================
    # BUILD WITH BDD TESTS
    # =============================================================================
    
    - name: Configure CMake with BDD tests
      run: |
        set -e
        echo "=== CMake Configuration with BDD Tests ==="
        mkdir -p build
        cd build
        
        # Configure with BDD tests and ensure json-c is available
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
          -DBUILD_BDD_TESTS=ON \
          -DUSE_SYSTEM_JSON_C=OFF
        
        echo "✓ CMake configuration completed successfully"

    - name: Build Asthra with BDD tests
      run: |
        set -e
        echo "=== Building Asthra with BDD Tests ==="
        cd build
        
        # Build main compiler and dependencies first
        echo "Building main compiler and libraries..."
        cmake --build . --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        
        # Verify asthra_ai_server was built successfully
        if [ -f "lib/libasthra_ai_server.a" ]; then
          echo "✓ asthra_ai_server library built successfully"
        else
          echo "⚠️ asthra_ai_server library not found, checking available libraries:"
          find . -name "*.a" | grep -i server || echo "No server libraries found"
        fi
        
        # Build BDD test executables
        echo "Building BDD test executables..."
        cmake --build . --target build-tests
        
        echo "✓ Build completed successfully"

    # =============================================================================
    # RUN BDD TESTS
    # =============================================================================
    
    - name: Run BDD unit tests
      run: |
        set -e
        echo "=== Running BDD Unit Tests ==="
        cd build
        mkdir -p bdd-logs
        
        # Find the asthra compiler binary
        echo "Searching for asthra compiler binary..."
        
        # Check common locations
        ASTHRA_PATHS=(
          "$(pwd)/asthra"
          "$(pwd)/bin/asthra"
          "$(pwd)/src/asthra"
        )
        
        ASTHRA_COMPILER_PATH=""
        for path in "${ASTHRA_PATHS[@]}"; do
          if [ -f "$path" ]; then
            ASTHRA_COMPILER_PATH="$path"
            break
          fi
        done
        
        # If not found in common locations, search more broadly
        if [ -z "$ASTHRA_COMPILER_PATH" ]; then
          echo "Compiler not found in common locations, searching..."
          # Cross-platform find command
          if [[ "$OSTYPE" == "darwin"* ]]; then
            FOUND_BINARY=$(find . -name "asthra" -type f -perm +111 | head -1)
          else
            FOUND_BINARY=$(find . -name "asthra" -type f -executable | head -1)
          fi
          
          if [ -n "$FOUND_BINARY" ]; then
            ASTHRA_COMPILER_PATH="$FOUND_BINARY"
          fi
        fi
        
        # Verify compiler exists
        if [ -n "$ASTHRA_COMPILER_PATH" ] && [ -f "$ASTHRA_COMPILER_PATH" ]; then
          echo "✓ Asthra compiler found at: $ASTHRA_COMPILER_PATH"
          ls -la "$ASTHRA_COMPILER_PATH"
          export ASTHRA_COMPILER_PATH
        else
          echo "❌ Asthra compiler not found in any expected location"
          echo "Current directory structure:"
          ls -la .
          if [ -d "bin" ]; then
            echo "Contents of bin/:"
            ls -la bin/
          fi
          exit 1
        fi
        
        # Track test results
        TESTS_RUN=0
        TESTS_FAILED=0
        
        # Run unit-level BDD tests
        if [ -f "bdd/bin/bdd_unit_compiler_basic" ]; then
          echo "Running compiler basic unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_compiler_basic --reporter spec 2>&1 | tee bdd-logs/bdd_unit_compiler_basic.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_function_calls" ]; then
          echo "Running function calls unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_function_calls --reporter spec 2>&1 | tee bdd-logs/bdd_unit_function_calls.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_bitwise_operators" ]; then
          echo "Running bitwise operators unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_bitwise_operators --reporter spec 2>&1 | tee bdd-logs/bdd_unit_bitwise_operators.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_boolean_operators" ]; then
          echo "Running boolean operators unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_boolean_operators --reporter spec 2>&1 | tee bdd-logs/bdd_unit_boolean_operators.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_if_conditions" ]; then
          echo "Running if conditions unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_if_conditions --reporter spec 2>&1 | tee bdd-logs/bdd_unit_if_conditions.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        # Phase 1 BDD Tests - Core Language Structure
        if [ -f "bdd/bin/bdd_unit_package_declaration" ]; then
          echo "Running package declaration unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_package_declaration --reporter spec 2>&1 | tee bdd-logs/bdd_unit_package_declaration.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_import_system" ]; then
          echo "Running import system unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_import_system --reporter spec 2>&1 | tee bdd-logs/bdd_unit_import_system.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_visibility_modifiers" ]; then
          echo "Running visibility modifiers unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_visibility_modifiers --reporter spec 2>&1 | tee bdd-logs/bdd_unit_visibility_modifiers.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_annotations" ]; then
          echo "Running annotations unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_annotations --reporter spec 2>&1 | tee bdd-logs/bdd_unit_annotations.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        # Phase 1 BDD Tests - Type System
        if [ -f "bdd/bin/bdd_unit_primitive_types" ]; then
          echo "Running primitive types unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_primitive_types --reporter spec 2>&1 | tee bdd-logs/bdd_unit_primitive_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_composite_types" ]; then
          echo "Running composite types unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_composite_types --reporter spec 2>&1 | tee bdd-logs/bdd_unit_composite_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_user_defined_types" ]; then
          echo "Running user-defined types unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_user_defined_types --reporter spec 2>&1 | tee bdd-logs/bdd_unit_user_defined_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_generic_types" ]; then
          echo "Running generic types unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_generic_types --reporter spec 2>&1 | tee bdd-logs/bdd_unit_generic_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        if [ -f "bdd/bin/bdd_unit_special_types" ]; then
          echo "Running special types unit tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_unit_special_types --reporter spec 2>&1 | tee bdd-logs/bdd_unit_special_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        # Report results and fail if any tests failed
        echo "BDD Unit Tests Summary: $TESTS_RUN tests run, $TESTS_FAILED failed"
        if [ $TESTS_FAILED -gt 0 ]; then
          echo "❌ BDD unit tests failed - this will block the CI pipeline"
          exit 1
        elif [ $TESTS_RUN -eq 0 ]; then
          echo "⚠️ No BDD unit tests were found or executed"
          exit 1
        else
          echo "✅ All BDD unit tests passed"
        fi

    - name: Run BDD integration tests
      run: |
        set -e
        echo "=== Running BDD Integration Tests ==="
        cd build
        mkdir -p bdd-logs
        
        # Export compiler path for BDD tests
        export ASTHRA_COMPILER_PATH="$(pwd)/asthra"
        
        # Track test results
        TESTS_RUN=0
        TESTS_FAILED=0
        
        # Run integration-level BDD tests
        if [ -f "bdd/bin/bdd_integration_ffi_integration" ]; then
          echo "Running FFI integration tests..."
          TESTS_RUN=$((TESTS_RUN + 1))
          ./bdd/bin/bdd_integration_ffi_integration --reporter spec 2>&1 | tee bdd-logs/bdd_integration_ffi_integration.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then TESTS_FAILED=$((TESTS_FAILED + 1)); fi
        fi
        
        # Report results and fail if any tests failed
        echo "BDD Integration Tests Summary: $TESTS_RUN tests run, $TESTS_FAILED failed"
        if [ $TESTS_FAILED -gt 0 ]; then
          echo "❌ BDD integration tests failed - this will block the CI pipeline"
          exit 1
        elif [ $TESTS_RUN -eq 0 ]; then
          echo "⚠️ No BDD integration tests were found or executed"
          exit 1
        else
          echo "✅ All BDD integration tests passed"
        fi

    - name: Run Cucumber feature tests
      if: matrix.platform == 'linux'
      run: |
        set -e
        echo "=== Running Cucumber Feature Tests ==="
        cd bdd
        
        # Check if cucumber is available
        if command -v cucumber &> /dev/null; then
          echo "Running Cucumber tests..."
          # Run all feature tests including Phase 1 tests
          cucumber features/*.feature --format html --out ../build/cucumber-report.html --format json --out ../build/cucumber-report.json 2>&1 | tee ../build/bdd-logs/cucumber_features.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then exit 1; fi
          
          # Also run Phase 1 tests explicitly to ensure they're executed
          echo "Running Phase 1 Core Language Structure tests..."
          cucumber features/package_declaration.feature features/import_system.feature features/visibility_modifiers.feature features/annotations.feature --format progress 2>&1 | tee ../build/bdd-logs/cucumber_phase1_core.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then exit 1; fi
          
          echo "Running Phase 1 Type System tests..."
          cucumber features/primitive_types.feature features/composite_types.feature features/user_defined_types.feature features/generic_types.feature features/special_types.feature --format progress 2>&1 | tee ../build/bdd-logs/cucumber_phase1_types.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then exit 1; fi
          
          echo "✅ Cucumber feature tests completed successfully"
        else
          echo "⚠️ Cucumber not found, skipping feature tests (not mandatory)"
        fi

    # =============================================================================
    # TEST REPORTING
    # =============================================================================
    
    - name: Generate test report
      if: always()
      run: |
        echo "=== Generating Test Report ==="
        mkdir -p test-reports
        
        # Copy test outputs
        if [ -f "build/cucumber-report.html" ]; then
          cp build/cucumber-report.html test-reports/
        fi
        
        if [ -f "build/cucumber-report.json" ]; then
          cp build/cucumber-report.json test-reports/
        fi
        
        # Generate summary
        echo "BDD Test Summary" > test-reports/summary.txt
        echo "=================" >> test-reports/summary.txt
        echo "Platform: ${{ matrix.platform }}" >> test-reports/summary.txt
        echo "Date: $(date)" >> test-reports/summary.txt
        echo "" >> test-reports/summary.txt
        
        # List executed tests
        echo "Executed BDD tests:" >> test-reports/summary.txt
        find build/bdd/bin -name "bdd_*" -type f -executable 2>/dev/null | while read test; do
          echo "- $(basename $test)" >> test-reports/summary.txt
        done || echo "No BDD test executables found" >> test-reports/summary.txt
        
        cat test-reports/summary.txt

    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bdd-test-reports-${{ matrix.platform }}
        path: test-reports/
        retention-days: 7

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: bdd-test-logs-${{ matrix.platform }}
        path: |
          build/bdd-logs/
          build/Testing/Temporary/
        retention-days: 7

  # =============================================================================
  # TEST SUMMARY
  # =============================================================================
  
  bdd-summary:
    name: BDD Test Summary
    needs: bdd-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test reports
      uses: actions/download-artifact@v4
      with:
        pattern: bdd-test-reports-*
        merge-multiple: true
        path: all-reports/
        
    - name: Generate combined report
      run: |
        echo "=== BDD Test Summary ==="
        echo "Test Status: ${{ needs.bdd-tests.result }}"
        
        if [ -d "all-reports" ]; then
          echo ""
          echo "Test Reports Available:"
          find all-reports -name "*.txt" -o -name "*.html" -o -name "*.json" | sort
        fi
        
        # Set status for downstream workflows
        if [ "${{ needs.bdd-tests.result }}" == "success" ]; then
          echo "✅ All BDD tests passed"
        else
          echo "❌ Some BDD tests failed"
        fi