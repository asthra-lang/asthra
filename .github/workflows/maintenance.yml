name: Maintenance

on:
  schedule:
    # Run maintenance tasks weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Type of maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - cleanup
          - format
          - dependencies
          - security

permissions:
  contents: write
  pull-requests: write

env:
  CFLAGS: -std=c17 -Wall -Wextra -Wpedantic

jobs:
  code-formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'format' || github.event.inputs.task_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install formatting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Format C/C++ code
        run: |
          echo "=== Code Formatting ===" | tee formatting-report.txt
          
          # Find and format all C/C++ files
          find src runtime tests tools -name "*.c" -o -name "*.h" | while read file; do
            echo "Formatting $file..." | tee -a formatting-report.txt
            clang-format -i "$file"
          done

      - name: Check for formatting changes
        id: format_changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed" | tee -a formatting-report.txt
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes applied" | tee -a formatting-report.txt
            git diff --stat | tee -a formatting-report.txt
          fi

      - name: Commit formatting changes
        if: steps.format_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "🎨 Auto-format code with clang-format

          - Applied consistent code formatting
          - Updated by maintenance workflow
          
          [skip ci]"
          git push

      - name: Upload formatting report
        uses: actions/upload-artifact@v4
        with:
          name: formatting-report
          path: formatting-report.txt

  code-cleanup:
    name: Code Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'cleanup' || github.event.inputs.task_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cleanup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libc6-dev

      - name: Remove trailing whitespace
        run: |
          echo "=== Code Cleanup ===" | tee cleanup-report.txt
          
          # Remove trailing whitespace from source files
          find src runtime tests tools -name "*.c" -o -name "*.h" | while read file; do
            if sed -i 's/[[:space:]]*$//' "$file"; then
              echo "Cleaned trailing whitespace in $file" | tee -a cleanup-report.txt
            fi
          done

      - name: Remove empty lines at end of files
        run: |
          # Remove multiple empty lines at end of files
          find src runtime tests tools -name "*.c" -o -name "*.h" | while read file; do
            # Remove trailing empty lines but keep one newline at end
            sed -i -e :a -e '/^\s*$/N;ba' -e 's/\n\s*$/\n/' "$file"
          done

      - name: Check for TODO/FIXME comments
        run: |
          echo "=== TODO/FIXME Analysis ===" | tee -a cleanup-report.txt
          
          todo_count=$(grep -r "TODO\|FIXME" src/ runtime/ tests/ tools/ --include="*.c" --include="*.h" | wc -l || echo 0)
          echo "Found $todo_count TODO/FIXME comments" | tee -a cleanup-report.txt
          
          if [ "$todo_count" -gt 0 ]; then
            echo "TODO/FIXME locations:" | tee -a cleanup-report.txt
            grep -rn "TODO\|FIXME" src/ runtime/ tests/ tools/ --include="*.c" --include="*.h" | head -20 | tee -a cleanup-report.txt
          fi

      - name: Check for unused includes
        run: |
          echo "=== Unused Includes Analysis ===" | tee -a cleanup-report.txt
          
          # Simple check for potentially unused includes
          find src runtime -name "*.c" | while read file; do
            includes=$(grep "^#include" "$file" | wc -l)
            if [ "$includes" -gt 10 ]; then
              echo "File $file has $includes includes (review for unused)" | tee -a cleanup-report.txt
            fi
          done

      - name: Check for cleanup changes
        id: cleanup_changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No cleanup changes needed" | tee -a cleanup-report.txt
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Cleanup changes applied" | tee -a cleanup-report.txt
            git diff --stat | tee -a cleanup-report.txt
          fi

      - name: Commit cleanup changes
        if: steps.cleanup_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "🧹 Auto-cleanup code

          - Removed trailing whitespace
          - Cleaned up empty lines
          - Updated by maintenance workflow
          
          [skip ci]"
          git push

      - name: Upload cleanup report
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-report
          path: cleanup-report.txt

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'dependencies' || github.event.inputs.task_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit system dependencies
        run: |
          echo "=== Dependency Audit ===" | tee dependency-audit.txt
          echo "Timestamp: $(date -u)" | tee -a dependency-audit.txt
          echo "" | tee -a dependency-audit.txt
          
          echo "## System Information" | tee -a dependency-audit.txt
          echo "OS: $(uname -a)" | tee -a dependency-audit.txt
          echo "Clang Version: $(clang --version | head -1)" | tee -a dependency-audit.txt
          echo "LLVM Version: $(llvm-config --version 2>/dev/null || echo 'Not available')" | tee -a dependency-audit.txt
          echo "Make Version: $(make --version | head -1)" | tee -a dependency-audit.txt
          echo "" | tee -a dependency-audit.txt

      - name: Check for security updates
        run: |
          echo "## Security Updates Check" | tee -a dependency-audit.txt
          
          # Check for available security updates
          sudo apt-get update
          security_updates=$(apt list --upgradable 2>/dev/null | grep -i security | wc -l || echo 0)
          echo "Available security updates: $security_updates" | tee -a dependency-audit.txt
          
          if [ "$security_updates" -gt 0 ]; then
            echo "Security updates available:" | tee -a dependency-audit.txt
            apt list --upgradable 2>/dev/null | grep -i security | head -10 | tee -a dependency-audit.txt
          fi

      - name: Check build tool versions
        run: |
          echo "## Build Tool Versions" | tee -a dependency-audit.txt
          
          # Check versions of key build tools
          tools=("clang" "llvm-config" "make" "gperf" "doxygen")
          for tool in "${tools[@]}"; do
            if command -v "$tool" >/dev/null 2>&1; then
              version=$($tool --version 2>/dev/null | head -1 || echo "Version unknown")
              echo "$tool: $version" | tee -a dependency-audit.txt
            else
              echo "$tool: Not installed" | tee -a dependency-audit.txt
            fi
          done

      - name: Upload dependency audit
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit
          path: dependency-audit.txt

  security-maintenance:
    name: Security Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'security' || github.event.inputs.task_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security file permissions check
        run: |
          echo "=== Security Maintenance ===" | tee security-maintenance.txt
          
          # Check for files with overly permissive permissions
          echo "Checking file permissions..." | tee -a security-maintenance.txt
          find . -type f -perm /o+w | head -20 | tee -a security-maintenance.txt || echo "No world-writable files found" | tee -a security-maintenance.txt

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..." | tee -a security-maintenance.txt
          
          # Look for potentially sensitive files
          sensitive_patterns=("*.key" "*.pem" "*.p12" "*.pfx" "id_rsa" "id_dsa" "*.env")
          for pattern in "${sensitive_patterns[@]}"; do
            files=$(find . -name "$pattern" -not -path "./.git/*" | head -10)
            if [ -n "$files" ]; then
              echo "Found files matching $pattern:" | tee -a security-maintenance.txt
              echo "$files" | tee -a security-maintenance.txt
            fi
          done

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..." | tee -a security-maintenance.txt
          
          # Look for potential secrets in source code
          secret_patterns=("password" "secret" "api_key" "token" "private_key")
          for pattern in "${secret_patterns[@]}"; do
            matches=$(grep -ri "$pattern\s*=" src/ runtime/ tests/ tools/ --include="*.c" --include="*.h" | head -5)
            if [ -n "$matches" ]; then
              echo "Potential $pattern found:" | tee -a security-maintenance.txt
              echo "$matches" | tee -a security-maintenance.txt
            fi
          done

      - name: Upload security maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: security-maintenance
          path: security-maintenance.txt

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [code-formatting, code-cleanup]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libc6-dev gperf

      - name: Verify build after maintenance
        run: |
          echo "=== Build Verification ===" | tee build-verification.txt
          
          # Test that the project still builds after maintenance changes
          make clean
          if make; then
            echo "✅ Build successful after maintenance" | tee -a build-verification.txt
          else
            echo "❌ Build failed after maintenance" | tee -a build-verification.txt
            exit 1
          fi

      - name: Run basic tests
        run: |
          echo "Running basic tests..." | tee -a build-verification.txt
          if make test-runtime; then
            echo "✅ Basic tests passed" | tee -a build-verification.txt
          else
            echo "❌ Basic tests failed" | tee -a build-verification.txt
            exit 1
          fi

      - name: Upload build verification report
        uses: actions/upload-artifact@v4
        with:
          name: build-verification
          path: build-verification.txt

  maintenance-report:
    name: Maintenance Report
    runs-on: ubuntu-latest
    needs: [code-formatting, code-cleanup, dependency-audit, security-maintenance, build-verification]
    if: always()
    steps:
      - name: Download all maintenance artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-report*"
          merge-multiple: true

      - name: Download all maintenance artifacts (alternative names)
        uses: actions/download-artifact@v4
        with:
          pattern: "*-audit*"
          merge-multiple: true

      - name: Download all maintenance artifacts (security)
        uses: actions/download-artifact@v4
        with:
          pattern: "*-maintenance*"
          merge-multiple: true

      - name: Generate comprehensive maintenance report
        run: |
          echo "# Asthra Maintenance Report" > maintenance-summary.md
          echo "" >> maintenance-summary.md
          echo "Generated on: $(date -u)" >> maintenance-summary.md
          echo "Workflow run: ${{ github.run_number }}" >> maintenance-summary.md
          echo "" >> maintenance-summary.md
          
          echo "## Summary" >> maintenance-summary.md
          echo "This report contains the results of automated maintenance tasks:" >> maintenance-summary.md
          echo "- Code formatting and cleanup" >> maintenance-summary.md
          echo "- Dependency auditing" >> maintenance-summary.md
          echo "- Security maintenance checks" >> maintenance-summary.md
          echo "- Build verification" >> maintenance-summary.md
          echo "" >> maintenance-summary.md
          
          # Include results from each maintenance task
          for report in formatting-report.txt cleanup-report.txt dependency-audit.txt security-maintenance.txt build-verification.txt; do
            if [ -f "$report" ]; then
              echo "## $(basename $report .txt | tr '-' ' ' | tr '[:lower:]' '[:upper:]')" >> maintenance-summary.md
              echo '```' >> maintenance-summary.md
              cat "$report" >> maintenance-summary.md
              echo '```' >> maintenance-summary.md
              echo "" >> maintenance-summary.md
            fi
          done
          
          echo "## Next Steps" >> maintenance-summary.md
          echo "1. Review any formatting or cleanup changes that were committed" >> maintenance-summary.md
          echo "2. Address any security issues identified" >> maintenance-summary.md
          echo "3. Consider updating dependencies if security updates are available" >> maintenance-summary.md
          echo "4. Review TODO/FIXME comments for potential improvements" >> maintenance-summary.md

      - name: Upload comprehensive maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-maintenance-report
          path: maintenance-summary.md

      - name: Maintenance workflow complete
        run: |
          echo "✅ Maintenance workflow completed"
          echo "Check artifacts for detailed maintenance reports" 
