#!/usr/bin/env python3\n\"\"\"\nFix malformed code blocks in the FFI interop file.\n\"\"\"\n\nimport re\n\ndef fix_ffi_file():\n    \"\"\"Fix all malformed code blocks in the FFI interop file.\"\"\"\n    file_path = 'docs_website/docs/user-manual/ffi-interop.md'\n    \n    with open(file_path, 'r', encoding='utf-8') as f:\n        content = f.read()\n    \n    original_content = content\n    \n    # Fix malformed unsafe blocks and code patterns\n    \n    # Fix unsafe \" + + \" patterns\n    content = re.sub(r'unsafe \"\\s*\\+\\s*\\+\\s*\"', 'unsafe', content)\n    content = re.sub(r'unsafe \"\\s*\\+', 'unsafe &#123;', content)\n    \n    # Fix standalone + \" patterns\n    content = re.sub(r'\\s*\\+\\s*\"\\s*$', ' &#125;', content, flags=re.MULTILINE)\n    content = re.sub(r'\\s*\\+\\s*$', ' &#125;', content, flags=re.MULTILINE)\n    \n    # Fix \" + patterns at end of lines\n    content = re.sub(r'\"\\s*\\+\\s*\"', '', content)\n    content = re.sub(r'\"\\s*\\+\\s*;', ';', content)\n    \n    # Fix struct definitions\n    content = re.sub(r'pub struct (\\w+)\\s*\"\\s*\\+', r'pub struct \\1 &#123;', content)\n    content = re.sub(r'\\+\\s*\"', ' &#125;', content)\n    \n    # Fix function calls with malformed braces\n    content = re.sub(r'\\{\\s*([^}]+)\\s*\\+\\s*\"', r'&#123; \\1 &#125;', content)\n    \n    # Fix match statements\n    content = re.sub(r'match ([^\"]+)\\s*\"\\s*\\+', r'match \\1 &#123;', content)\n    content = re.sub(r'=&gt;\\s*\"\\s*\\+', r'=&gt; &#123;', content)\n    \n    # Fix return statements in match arms\n    content = re.sub(r'\\+\\s*\",', ' &#125;,', content)\n    content = re.sub(r'\\+\\s*\"', ' &#125;', content)\n    \n    # Fix function definitions\n    content = re.sub(r'\\)\\s*\"\\s*\\+([^\"]*?)\\+\\s*\"', r') &#123;\\1&#125;', content)\n    \n    if content != original_content:\n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.write(content)\n        print(f\"Fixed malformed code blocks in {file_path}\")\n        return True\n    else:\n        print(f\"No changes needed in {file_path}\")\n        return False\n\nif __name__ == '__main__':\n    fix_ffi_file() 