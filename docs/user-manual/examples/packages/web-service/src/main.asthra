package main;

import "models";
import "handlers";
import "database";
import "utils";
import "system/libc";

pub fn main() -> i32 {
    utils.log_info("Starting Asthra Web Service...");
    
    // Initialize database connection
    let db_result: Result<database.Connection, string> = database.initialize();
    let db_conn: database.Connection = match db_result {
        Result.Ok(conn) => conn,
        Result.Err(error) => {
            utils.log_error("Failed to initialize database: " + error);
            return 1;
        },
    };
    
    utils.log_info("Database initialized successfully");
    
    // Create sample users
    let user1: models.User = models.create_user("alice", "alice@example.com");
    let user2: models.User = models.create_user("bob", "bob@example.com");
    
    // Save users to database
    let save_result1: bool = database.save_user(db_conn, user1);
    let save_result2: bool = database.save_user(db_conn, user2);
    
    if save_result1 && save_result2 {
        utils.log_info("Sample users created successfully");
    } else {
        utils.log_error("Failed to create sample users");
        return 1;
    }
    
    // Simulate handling HTTP requests
    let response1: handlers.ApiResponse = handlers.handle_get_user(1);
    let response2: handlers.ApiResponse = handlers.handle_create_user("charlie", "charlie@example.com");
    
    utils.log_info("API responses generated");
    unsafe {
        libc.printf("User GET response status: %d\n", response1.status);
        libc.printf("User CREATE response status: %d\n", response2.status);
    }
    
    utils.log_info("Web service completed successfully");
    return 0;
} 