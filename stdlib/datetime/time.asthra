// Asthra Standard Library - Time Package
// Provides time, duration, and timing operations

package stdlib::datetime::time;

// Import core functionality
import "stdlib/asthra/core";

// ============================================================================
// Duration Representation
// ============================================================================

// Duration structure representing a span of time
struct Duration {
    seconds: i64,
    nanoseconds: u32
}

// Duration constants
const NANOS_PER_SEC: u64 = 1_000_000_000;
const NANOS_PER_MILLI: u64 = 1_000_000;
const NANOS_PER_MICRO: u64 = 1_000;

// Create duration from seconds
fn duration_from_secs(secs: u64) -> Duration {
    return Duration {
        seconds: secs as i64,
        nanoseconds: 0
    };
}

// Create duration from milliseconds
fn duration_from_millis(millis: u64) -> Duration {
    let secs: u64 = millis / 1000;
    let remaining_millis: u64 = millis % 1000;
    let nanos: u32 = (remaining_millis * NANOS_PER_MILLI) as u32;
    
    return Duration {
        seconds: secs as i64,
        nanoseconds: nanos
    };
}

// Create duration from microseconds
fn duration_from_micros(micros: u64) -> Duration {
    let secs: u64 = micros / 1_000_000;
    let remaining_micros: u64 = micros % 1_000_000;
    let nanos: u32 = (remaining_micros * NANOS_PER_MICRO) as u32;
    
    return Duration {
        seconds: secs as i64,
        nanoseconds: nanos
    };
}

// Create duration from nanoseconds
fn duration_from_nanos(nanos: u64) -> Duration {
    let secs: u64 = nanos / NANOS_PER_SEC;
    let remaining_nanos: u32 = (nanos % NANOS_PER_SEC) as u32;
    
    return Duration {
        seconds: secs as i64,
        nanoseconds: remaining_nanos
    };
}

// Convert duration to seconds
fn duration_as_secs(d: Duration) -> u64 {
    if d.seconds < 0 {
        return 0;
    }
    return d.seconds as u64;
}

// Convert duration to milliseconds
fn duration_as_millis(d: Duration) -> u64 {
    if d.seconds < 0 {
        return 0;
    }
    let secs_as_millis: u64 = (d.seconds as u64) * 1000;
    let nanos_as_millis: u64 = (d.nanoseconds as u64) / NANOS_PER_MILLI;
    return secs_as_millis + nanos_as_millis;
}

// Convert duration to microseconds
fn duration_as_micros(d: Duration) -> u64 {
    if d.seconds < 0 {
        return 0;
    }
    let secs_as_micros: u64 = (d.seconds as u64) * 1_000_000;
    let nanos_as_micros: u64 = (d.nanoseconds as u64) / NANOS_PER_MICRO;
    return secs_as_micros + nanos_as_micros;
}

// Convert duration to nanoseconds
fn duration_as_nanos(d: Duration) -> u64 {
    if d.seconds < 0 {
        return 0;
    }
    let secs_as_nanos: u64 = (d.seconds as u64) * NANOS_PER_SEC;
    return secs_as_nanos + (d.nanoseconds as u64);
}

// ============================================================================
// Duration Arithmetic
// ============================================================================

// Add two durations
fn duration_add(a: Duration, b: Duration) -> Duration {
    let total_secs: i64 = a.seconds + b.seconds;
    let total_nanos: u64 = (a.nanoseconds as u64) + (b.nanoseconds as u64);
    
    if total_nanos >= NANOS_PER_SEC {
        return Duration {
            seconds: total_secs + 1,
            nanoseconds: (total_nanos - NANOS_PER_SEC) as u32
        };
    } else {
        return Duration {
            seconds: total_secs,
            nanoseconds: total_nanos as u32
        };
    }
}

// Subtract two durations
fn duration_sub(a: Duration, b: Duration) -> Result<Duration, string> {
    let a_total_nanos: u64 = duration_as_nanos(a);
    let b_total_nanos: u64 = duration_as_nanos(b);
    
    if b_total_nanos > a_total_nanos {
        return Result.Err("Cannot subtract larger duration from smaller duration");
    }
    
    let result_nanos: u64 = a_total_nanos - b_total_nanos;
    return Result.Ok(duration_from_nanos(result_nanos));
}

// Multiply duration by a factor
fn duration_mul(d: Duration, factor: u32) -> Duration {
    let total_nanos: u64 = duration_as_nanos(d);
    let result_nanos: u64 = total_nanos * (factor as u64);
    return duration_from_nanos(result_nanos);
}

// Divide duration by a divisor
fn duration_div(d: Duration, divisor: u32) -> Duration {
    if divisor == 0 {
        return Duration { seconds: 0, nanoseconds: 0 };
    }
    
    let total_nanos: u64 = duration_as_nanos(d);
    let result_nanos: u64 = total_nanos / (divisor as u64);
    return duration_from_nanos(result_nanos);
}

// Check if duration is zero
fn duration_is_zero(d: Duration) -> bool {
    return d.seconds == 0 && d.nanoseconds == 0;
}

// Compare two durations
fn duration_cmp(a: Duration, b: Duration) -> i32 {
    if a.seconds < b.seconds {
        return -1;
    } else if a.seconds > b.seconds {
        return 1;
    } else {
        if a.nanoseconds < b.nanoseconds {
            return -1;
        } else if a.nanoseconds > b.nanoseconds {
            return 1;
        } else {
            return 0;
        }
    }
}

// ============================================================================
// Instant (Monotonic Time)
// ============================================================================

// Instant represents a monotonic point in time
struct Instant {
    seconds: u64,
    nanoseconds: u32
}

// Get current instant
fn instant_now(none) -> Instant {
    extern "libc" fn clock_gettime(clk_id: i32, tp: *mut CTimespec) -> i32;
    
    unsafe {
        let mut timespec: CTimespec = CTimespec { tv_sec: 0, tv_nsec: 0 };
        let result: i32 = clock_gettime(1, &mut timespec);  // CLOCK_MONOTONIC = 1
        
        if result != 0 {
            // Fallback to epoch time if monotonic clock fails
            return instant_from_system_time(system_time_now());
        }
        
        return Instant {
            seconds: timespec.tv_sec as u64,
            nanoseconds: timespec.tv_nsec as u32
        };
    }
}

// Get elapsed time since instant
fn instant_elapsed(instant: Instant) -> Duration {
    let now: Instant = instant_now();
    let duration_result: Result<Duration, string> = instant_duration_since(now, instant);
    
    match duration_result {
        Result.Ok(duration) => return duration
        Result.Err(_) => return Duration { seconds: 0, nanoseconds: 0 }
    }
}

// Get duration between two instants
fn instant_duration_since(later: Instant, earlier: Instant) -> Result<Duration, string> {
    if later.seconds < earlier.seconds || 
       (later.seconds == earlier.seconds && later.nanoseconds < earlier.nanoseconds) {
        return Result.Err("Later instant is before earlier instant");
    }
    
    let mut secs_diff: u64 = later.seconds - earlier.seconds;
    let mut nanos_diff: u32;
    
    if later.nanoseconds >= earlier.nanoseconds {
        nanos_diff = later.nanoseconds - earlier.nanoseconds;
    } else {
        secs_diff = secs_diff - 1;
        nanos_diff = (NANOS_PER_SEC as u32) + later.nanoseconds - earlier.nanoseconds;
    }
    
    return Result.Ok(Duration {
        seconds: secs_diff as i64,
        nanoseconds: nanos_diff
    });
}

// ============================================================================
// System Time (Wall Clock)
// ============================================================================

// SystemTime represents wall clock time
struct SystemTime {
    seconds: i64,
    nanoseconds: u32
}

// Unix epoch constant
const UNIX_EPOCH_SECONDS: i64 = 0;

// Get current system time
fn system_time_now(none) -> SystemTime {
    extern "libc" fn clock_gettime(clk_id: i32, tp: *mut CTimespec) -> i32;
    
    unsafe {
        let mut timespec: CTimespec = CTimespec { tv_sec: 0, tv_nsec: 0 };
        let result: i32 = clock_gettime(0, &mut timespec);  // CLOCK_REALTIME = 0
        
        if result != 0 {
            // Fallback to time() if clock_gettime fails
            extern "libc" fn time(tloc: *mut i64) -> i64;
            let secs: i64 = time(null);
            return SystemTime { seconds: secs, nanoseconds: 0 };
        }
        
        return SystemTime {
            seconds: timespec.tv_sec,
            nanoseconds: timespec.tv_nsec as u32
        };
    }
}

// Get duration since Unix epoch
fn system_time_duration_since_epoch(time: SystemTime) -> Duration {
    let epoch_secs: i64 = time.seconds - UNIX_EPOCH_SECONDS;
    
    if epoch_secs < 0 {
        return Duration { seconds: 0, nanoseconds: 0 };
    }
    
    return Duration {
        seconds: epoch_secs,
        nanoseconds: time.nanoseconds
    };
}

// Add duration to system time
fn system_time_add(time: SystemTime, duration: Duration) -> SystemTime {
    let total_secs: i64 = time.seconds + duration.seconds;
    let total_nanos: u64 = (time.nanoseconds as u64) + (duration.nanoseconds as u64);
    
    if total_nanos >= NANOS_PER_SEC {
        return SystemTime {
            seconds: total_secs + 1,
            nanoseconds: (total_nanos - NANOS_PER_SEC) as u32
        };
    } else {
        return SystemTime {
            seconds: total_secs,
            nanoseconds: total_nanos as u32
        };
    }
}

// Subtract duration from system time
fn system_time_sub(time: SystemTime, duration: Duration) -> Result<SystemTime, string> {
    let time_nanos: u64 = (time.seconds as u64) * NANOS_PER_SEC + (time.nanoseconds as u64);
    let duration_nanos: u64 = duration_as_nanos(duration);
    
    if duration_nanos > time_nanos {
        return Result.Err("Cannot subtract duration larger than time");
    }
    
    let result_nanos: u64 = time_nanos - duration_nanos;
    let result_secs: i64 = (result_nanos / NANOS_PER_SEC) as i64;
    let result_nano_part: u32 = (result_nanos % NANOS_PER_SEC) as u32;
    
    return Result.Ok(SystemTime {
        seconds: result_secs,
        nanoseconds: result_nano_part
    });
}

// Get duration between two system times
fn system_time_duration_since(later: SystemTime, earlier: SystemTime) -> Result<Duration, string> {
    let later_nanos: u64 = (later.seconds as u64) * NANOS_PER_SEC + (later.nanoseconds as u64);
    let earlier_nanos: u64 = (earlier.seconds as u64) * NANOS_PER_SEC + (earlier.nanoseconds as u64);
    
    if later_nanos < earlier_nanos {
        return Result.Err("Later time is before earlier time");
    }
    
    let diff_nanos: u64 = later_nanos - earlier_nanos;
    return Result.Ok(duration_from_nanos(diff_nanos));
}

// ============================================================================
// Sleep and Timing
// ============================================================================

// Sleep for a duration
fn sleep(duration: Duration) -> void {
    extern "libc" fn nanosleep(req: *const CTimespec, rem: *mut CTimespec) -> i32;
    
    unsafe {
        let timespec: CTimespec = CTimespec {
            tv_sec: duration.seconds,
            tv_nsec: duration.nanoseconds as i64
        };
        
        nanosleep(&timespec, null);
    }
}

// Sleep for milliseconds
fn sleep_millis(millis: u64) -> void {
    let duration: Duration = duration_from_millis(millis);
    sleep(duration);
}

// Sleep for seconds
fn sleep_secs(secs: u64) -> void {
    let duration: Duration = duration_from_secs(secs);
    sleep(duration);
}

// ============================================================================
// Timeout and Deadline
// ============================================================================

// Deadline represents a point in time when something should complete
struct Deadline {
    instant: Instant
}

// Create deadline from duration
fn deadline_from_duration(duration: Duration) -> Deadline {
    let now: Instant = instant_now();
    let deadline_instant: Instant = instant_add(now, duration);
    return Deadline { instant: deadline_instant };
}

// Check if deadline has passed
fn deadline_is_expired(deadline: Deadline) -> bool {
    let now: Instant = instant_now();
    let cmp_result: i32 = instant_cmp(now, deadline.instant);
    return cmp_result >= 0;
}

// Get remaining time until deadline
fn deadline_remaining(deadline: Deadline) -> Duration {
    let now: Instant = instant_now();
    let duration_result: Result<Duration, string> = instant_duration_since(deadline.instant, now);
    
    match duration_result {
        Result.Ok(duration) => return duration
        Result.Err(_) => return Duration { seconds: 0, nanoseconds: 0 }
    }
}

// ============================================================================
// Internal Helper Functions
// ============================================================================

// Internal C timespec structure
#[ownership(c)]
struct CTimespec {
    tv_sec: i64,
    tv_nsec: i64
}

// Convert instant to system time (approximate)
fn instant_to_system_time(instant: Instant) -> SystemTime {
    return SystemTime {
        seconds: instant.seconds as i64,
        nanoseconds: instant.nanoseconds
    };
}

// Convert system time to instant (approximate)
fn instant_from_system_time(time: SystemTime) -> Instant {
    return Instant {
        seconds: time.seconds as u64,
        nanoseconds: time.nanoseconds
    };
}

// Add duration to instant
fn instant_add(instant: Instant, duration: Duration) -> Instant {
    let total_secs: u64 = instant.seconds + (duration.seconds as u64);
    let total_nanos: u64 = (instant.nanoseconds as u64) + (duration.nanoseconds as u64);
    
    if total_nanos >= NANOS_PER_SEC {
        return Instant {
            seconds: total_secs + 1,
            nanoseconds: (total_nanos - NANOS_PER_SEC) as u32
        };
    } else {
        return Instant {
            seconds: total_secs,
            nanoseconds: total_nanos as u32
        };
    }
}

// Compare two instants
fn instant_cmp(a: Instant, b: Instant) -> i32 {
    if a.seconds < b.seconds {
        return -1;
    } else if a.seconds > b.seconds {
        return 1;
    } else {
        if a.nanoseconds < b.nanoseconds {
            return -1;
        } else if a.nanoseconds > b.nanoseconds {
            return 1;
        } else {
            return 0;
        }
    }
}

// ============================================================================
// Formatting and Parsing
// ============================================================================

// Format duration as human-readable string
fn duration_format(d: Duration) -> string {
    if duration_is_zero(d) {
        return "0s";
    }
    
    let mut result: string = "";
    let mut remaining_secs: u64 = duration_as_secs(d);
    
    // Days
    if remaining_secs >= 86400 {
        let days: u64 = remaining_secs / 86400;
        result = result + days + "d";
        remaining_secs = remaining_secs % 86400;
    }
    
    // Hours
    if remaining_secs >= 3600 {
        let hours: u64 = remaining_secs / 3600;
        result = result + hours + "h";
        remaining_secs = remaining_secs % 3600;
    }
    
    // Minutes
    if remaining_secs >= 60 {
        let minutes: u64 = remaining_secs / 60;
        result = result + minutes + "m";
        remaining_secs = remaining_secs % 60;
    }
    
    // Seconds
    if remaining_secs > 0 {
        result = result + remaining_secs + "s";
    }
    
    // Milliseconds (if no larger units)
    if result == "" && d.nanoseconds > 0 {
        let millis: u64 = (d.nanoseconds as u64) / NANOS_PER_MILLI;
        if millis > 0 {
            result = millis + "ms";
        } else {
            let micros: u64 = (d.nanoseconds as u64) / NANOS_PER_MICRO;
            if micros > 0 {
                result = micros + "μs";
            } else {
                result = (d.nanoseconds as u64) + "ns";
            }
        }
    }
    
    return result;
} 
