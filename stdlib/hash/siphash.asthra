// Asthra Standard Library - SipHash Implementation
package stdlib::hash;

import "stdlib/asthra/core";

// SipHash key structure (128-bit key)
pub struct SipHashKey {
    pub k0: u64,
    pub k1: u64,
}

// SipHash variants
pub enum SipHashVariant {
    SipHash_1_3,    // Fast variant (1 compression round, 3 finalization)
    SipHash_2_4,    // Standard variant (2 compression rounds, 4 finalization)  
    SipHash_4_8,    // High-security variant (4 compression rounds, 8 finalization)
}

// SipHash context for streaming
pub struct SipHashContext {
    pub key: SipHashKey,
    pub variant: SipHashVariant,
    pub buffer: [8]u8,
    pub buffer_len: usize,
    pub total_len: usize,
    pub v0: u64,
    pub v1: u64,
    pub v2: u64,
    pub v3: u64,
}

// =============================================================================
// Key Generation and Management
// =============================================================================

// Generate random SipHash key
pub fn generate_key(none) -> SipHashKey {
    let k0: u64 = random_u64(none);
    let k1: u64 = random_u64(none);
    return SipHashKey { k0: k0, k1: k1 };
}

// Create SipHash key from two 64-bit values
pub fn key_from_u64(k0: u64, k1: u64) -> SipHashKey {
    return SipHashKey { k0: k0, k1: k1 };
}

// Create SipHash key from byte array (16 bytes)
pub fn key_from_bytes(bytes: []u8) -> Result<SipHashKey, string> {
    if bytes.len != 16 {
        return Result.Err("SipHash key requires exactly 16 bytes");
    }
    
    let k0: u64 = bytes_to_u64_le(bytes[0..8]);
    let k1: u64 = bytes_to_u64_le(bytes[8..16]);
    
    return Result.Ok(SipHashKey { k0: k0, k1: k1 });
}

// Convert SipHash key to byte array
pub fn key_to_bytes(key: SipHashKey) -> [16]u8 {
    let mut bytes: [16]u8 = [0; 16];
    u64_to_bytes_le(key.k0, bytes[0..8]);
    u64_to_bytes_le(key.k1, bytes[8..16]);
    return bytes;
}

// =============================================================================
// One-Shot Hashing Functions
// =============================================================================

// Hash bytes using SipHash-2-4 (standard variant)
pub fn siphash_24(data: []u8, key: SipHashKey) -> u64 {
    return siphash_variant(data, key, SipHashVariant.SipHash_2_4);
}

// Hash bytes using SipHash-1-3 (fast variant)
pub fn siphash_13(data: []u8, key: SipHashKey) -> u64 {
    return siphash_variant(data, key, SipHashVariant.SipHash_1_3);
}

// Hash bytes using SipHash-4-8 (high-security variant)
pub fn siphash_48(data: []u8, key: SipHashKey) -> u64 {
    return siphash_variant(data, key, SipHashVariant.SipHash_4_8);
}

// Hash bytes with specified SipHash variant
pub fn siphash_variant(data: []u8, key: SipHashKey, variant: SipHashVariant) -> u64 {
    // Implementation delegates to C runtime for performance
    return asthra_siphash_hash_variant(data.ptr, data.len, key, variant);
}

// Hash string using SipHash-2-4
pub fn hash_string(s: string, key: SipHashKey) -> u64 {
    return siphash_24(string_to_bytes(s), key);
}

// Hash string with random key (convenience function)
pub fn hash_string_random(s: string) -> u64 {
    let key: SipHashKey = generate_key(none);
    return hash_string(s, key);
}

// =============================================================================
// Streaming Interface
// =============================================================================

// Create new SipHash context for streaming
pub fn new_context(key: SipHashKey, variant: SipHashVariant) -> SipHashContext {
    let mut ctx: SipHashContext = SipHashContext {
        key: key,
        variant: variant,
        buffer: [0; 8],
        buffer_len: 0,
        total_len: 0,
        v0: 0, v1: 0, v2: 0, v3: 0,
    };
    
    // Initialize SipHash state
    ctx.v0 = key.k0 ^ 0x736f6d6570736575ULL;
    ctx.v1 = key.k1 ^ 0x646f72616e646f6dULL;
    ctx.v2 = key.k0 ^ 0x6c7967656e657261ULL;
    ctx.v3 = key.k1 ^ 0x7465646279746573ULL;
    
    return ctx;
}

// Update SipHash context with more data
pub fn update(ctx: *mut SipHashContext, data: []u8) -> void {
    // Implementation delegates to C runtime for performance
    asthra_siphash_update(ctx, data.ptr, data.len);
}

// Finalize SipHash context and get result
pub fn finalize(ctx: *mut SipHashContext) -> u64 {
    // Implementation delegates to C runtime for performance
    return asthra_siphash_finalize(ctx);
}

// =============================================================================
// Convenience Functions with Error Handling
// =============================================================================

// Hash with automatic key generation and result wrapping
pub fn hash_auto(data: []u8) -> HashResult {
    let key: SipHashKey = generate_key(none);
    let hash: u64 = siphash_24(data, key);
    return HashResult.Ok(hash);
}

// Hash string with configuration
pub fn hash_string_config(s: string, config: HashConfig) -> HashResult {
    match config.function {
        HashFunction.SipHash_2_4 => {
            let key: SipHashKey = get_key_from_config(config);
            let hash: u64 = hash_string(s, key);
            return HashResult.Ok(hash);
        },
        HashFunction.SipHash_1_3 => {
            let key: SipHashKey = get_key_from_config(config);
            let hash: u64 = siphash_13(string_to_bytes(s), key);
            return HashResult.Ok(hash);
        },
        _ => {
            return HashResult.InvalidInput("Unsupported hash function for SipHash module");
        },
    }
}

// =============================================================================
// Private Helper Functions
// =============================================================================

priv fn get_key_from_config(config: HashConfig) -> SipHashKey {
    match config.seed {
        Option.Some(seed) => {
            return key_from_u64(seed, seed ^ 0xAAAAAAAAAAAAAAAAULL);
        },
        Option.None => {
            if config.use_random_seed {
                return generate_key(none);
            } else {
                // Default deterministic key for testing
                return key_from_u64(0x0706050403020100ULL, 0x0f0e0d0c0b0a0908ULL);
            }
        },
    }
}

// External C functions (implemented in runtime)
extern fn asthra_siphash_hash_variant(data: *const u8, len: usize, key: SipHashKey, variant: SipHashVariant) -> u64;
extern fn asthra_siphash_update(ctx: *mut SipHashContext, data: *const u8, len: usize) -> void;
extern fn asthra_siphash_finalize(ctx: *mut SipHashContext) -> u64;
extern fn random_u64(none) -> u64;
extern fn bytes_to_u64_le(bytes: []u8) -> u64;
extern fn u64_to_bytes_le(value: u64, bytes: []u8) -> void;
extern fn string_to_bytes(s: string) -> []u8; 